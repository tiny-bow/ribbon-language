// This file is generated by `bin/tools/codegen.zig`, do not edit //
// See `Instruction_intro.zig` for the template; `codegen.zig/#generateTypes` for the generator //

//! # Instruction
//! The instruction module is both the abstract data type representing a Ribbon bytecode instruction,
//! and the namespace for the opcode and operand definitions.
//!
//! * **IMPORTANT**: "Abstract data type" here means that the `Instruction` struct carries the same data,
//! but not in the same way, as an actual bytecode instruction stream. The layout and size is different.
//!
//! See the `bytecode` namespace for encoding and decoding utilities.
const Instruction = @This();
const core = @import("core");
const Id = @import("Id");
const pl = @import("platform");
const std = @import("std");

const log = std.log.scoped(.Instruction);

test {
    std.testing.refAllDeclsRecursive(@This());
}

/// discriminator for instruction identity
code: OpCode,
/// operand set for the instruction
data: OpData,

/// Derive a type from `operand_sets` using the provided opcode.
pub fn SetType(comptime code: OpCode) type {
    return @FieldType(OpData, @tagName(code));
}

/// Determine if a type is from `operand_sets`.
pub fn isSetType(comptime T: type) bool {
    comptime {
        for (std.meta.declarations(operand_sets)) |typeDecl| {
            const F = @field(operand_sets, typeDecl.name);
            if (T == F) return true;
        }
        return false;
    }
}

/// Masks out the operands from encoded instruction bits, leaving only the opcode.
pub const OPCODE_MASK = @as(core.InstructionBits, std.math.maxInt(std.meta.Int(.unsigned, @bitSizeOf(Instruction.OpCode))));

/// Split an encoded instruction word into its opcode and operand data, and return it as an `Instruction`.
pub fn fromBits(encodedBits: core.InstructionBits) Instruction {
    const opcode: std.meta.Int(.unsigned, @bitSizeOf(Instruction.OpCode)) = @truncate(encodedBits & Instruction.OPCODE_MASK);
    const data: std.meta.Int(.unsigned, @bitSizeOf(Instruction.OpData)) = @truncate(encodedBits >> @bitSizeOf(Instruction.OpCode));

    return Instruction{
        .code = @enumFromInt(opcode),
        .data = @bitCast(data),
    };
}

/// Enumeration identifying all basic block terminating instructions that branch.
pub const BranchOpCode = enum(u16) {
    /// convert branch opcode -> full opcode
    pub fn upcast(self: BranchOpCode) OpCode { return @enumFromInt(@intFromEnum(self)); }

    /// `0007`
    /// Applies a signed integer offset `I` to the instruction pointer; `07 00 I. .. .. .. __ __`
    @"br" = 0x0007,
    /// `0008`
    /// Applies a signed integer offset `I` to the instruction pointer, if the value stored in `R` is non-zero; `08 00 R. I. .. .. .. __`
    @"br_if" = 0x0008,
};

/// Enumeration identifying each instruction that can terminate a basic block, and that is not a branch.
pub const TermOpCode = enum(u16) {
    /// convert term opcode -> full opcode
    pub fn upcast(self: TermOpCode) OpCode { return @enumFromInt(@intFromEnum(self)); }

    /// `000e`
    /// Returns flow control to the caller of current function, yielding `R` to the caller; `0e 00 R. __ __ __ __ __`
    @"return" = 0x000e,
    /// `000f`
    /// Returns flow control to the offset associated with the current effect handler's `HandlerSetId`, yielding `R` as the cancellation value; `0f 00 R. __ __ __ __ __`
    @"cancel" = 0x000f,
};

/// Enumeration identifying all instructions that perform a call.
pub const CallOpCode = enum(u16) {
    /// convert call opcode -> full opcode
    pub fn upcast(self: CallOpCode) OpCode { return @enumFromInt(@intFromEnum(self)); }

    /// `0009`
    /// Calls the bytecode or builtin function in `Ry` using `I` argument registers, placing the result in `Rx`; `09 00 Rx Ry I. __ __ __ + ...`
    @"call" = 0x0009,
    /// `000a`
    /// Calls the bytecode or builtin function at `F` using `I` argument registers, placing the result in `R`; `0a 00 R. F. .. .. .. I. + ...`
    @"call_c" = 0x000a,
    /// `000b`
    /// Calls the foreign function in `Ry` using `I` argument registers, placing the result in `Rx`; `0b 00 Rx Ry I. __ __ __ + ...`
    @"f_call" = 0x000b,
    /// `000c`
    /// Calls the foreign function at `X` using `I` argument registers, placing the result in `R`; `0c 00 R. X. .. .. .. I. + ...`
    @"f_call_c" = 0x000c,
    /// `000d`
    /// Calls the bytecode or builtin effect handler designated by `E` using `I` argument registers, placing the result in `R`.; `0d 00 R. E. .. .. .. I. + ...`
    @"prompt" = 0x000d,
};

/// Enumeration identifying all instructions that can appear inside a basic block which are larger than a single word, and are not calls.
pub const WideOpCode = enum(u16) {
    /// convert wide opcode -> full opcode
    pub fn upcast(self: WideOpCode) OpCode { return @enumFromInt(@intFromEnum(self)); }

    /// `0028`
    /// Stores a 16-bit value to memory at the address in `R` offset by `Iy`; `28 00 R. __ __ __ __ __ + Ix .. Iy .. .. .. __ __`
    @"store16c" = 0x0028,
    /// `0029`
    /// Stores a 32-bit value to memory at the address in `R` offset by `Iy`; `29 00 R. __ __ __ __ __ + Ix .. .. .. Iy .. .. ..`
    @"store32c" = 0x0029,
    /// `002a`
    /// Stores a 64-bit value (encoded as `Iy`) to memory at the address in `R` offset by `Ix`; `2a 00 R. Ix .. .. .. __ + Iy .. .. .. .. .. .. ..`
    @"store64c" = 0x002a,
    /// `0036`
    /// Copies a 64-bit `I` value into `R`; `36 00 R. __ __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_copy64c" = 0x0036,
    /// `004a`
    /// 64-bit `Rx` = `Ry` & `I`; `4a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_and64c" = 0x004a,
    /// `0052`
    /// 64-bit `Rx` = `Ry` \| `I`; `52 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_or64c" = 0x0052,
    /// `005a`
    /// 64-bit `Rx` = `Ry` ^ `I`; `5a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_xor64c" = 0x005a,
    /// `0062`
    /// 64-bit `Rx` = `I` << `Ry`; `62 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_lshift64a" = 0x0062,
    /// `006e`
    /// 64-bit unsigned/logical `Rx` = `I` >> `Ry`; `6e 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_rshift64a" = 0x006e,
    /// `007a`
    /// 64-bit signed/arithmetic `Rx` = `I` >> `Ry`; `7a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_rshift64a" = 0x007a,
    /// `0086`
    /// 64-bit integer `Rx` = `Ry` == `I`; `86 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_eq64c" = 0x0086,
    /// `008a`
    /// 64-bit floating point `Rx` = `Ry` == `I`; `8a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_eq64c" = 0x008a,
    /// `0092`
    /// 64-bit integer `Rx` = `Ry` != `I`; `92 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_ne64c" = 0x0092,
    /// `0096`
    /// 64-bit floating point `Rx` = `Ry` != `I`; `96 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_ne64c" = 0x0096,
    /// `009e`
    /// 64-bit unsigned integer `Rx` = `I` < `Ry`; `9e 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_lt64a" = 0x009e,
    /// `00a2`
    /// 64-bit unsigned integer `Rx` = `Ry` < `I`; `a2 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_lt64b" = 0x00a2,
    /// `00aa`
    /// 64-bit signed integer `Rx` = `I` < `Ry`; `aa 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_lt64a" = 0x00aa,
    /// `00ae`
    /// 64-bit signed integer `Rx` = `Ry` < `I`; `ae 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_lt64b" = 0x00ae,
    /// `00b3`
    /// 64-bit floating point `Rx` = `I` < `Ry`; `b3 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_lt64a" = 0x00b3,
    /// `00b4`
    /// 64-bit floating point `Rx` = `Ry` < `I`; `b4 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_lt64b" = 0x00b4,
    /// `00bc`
    /// 64-bit unsigned integer `Rx` = `I` > `Ry`; `bc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_gt64a" = 0x00bc,
    /// `00c0`
    /// 64-bit unsigned integer `Rx` = `Ry` > `I`; `c0 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_gt64b" = 0x00c0,
    /// `00c8`
    /// 64-bit signed integer `Rx` = `I` > `Ry`; `c8 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_gt64a" = 0x00c8,
    /// `00cc`
    /// 64-bit signed integer `Rx` = `Ry` > `I`; `cc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_gt64b" = 0x00cc,
    /// `00d1`
    /// 64-bit floating point `Rx` = `I` > `Ry`; `d1 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_gt64a" = 0x00d1,
    /// `00d2`
    /// 64-bit floating point `Rx` = `Ry` > `I`; `d2 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_gt64b" = 0x00d2,
    /// `00da`
    /// 64-bit unsigned integer `Rx` = `I` <= `Ry`; `da 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_le64a" = 0x00da,
    /// `00de`
    /// 64-bit unsigned integer `Rx` = `Ry` <= `I`; `de 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_le64b" = 0x00de,
    /// `00e6`
    /// 64-bit signed integer `Rx` = `I` <= `Ry`; `e6 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_le64a" = 0x00e6,
    /// `00ea`
    /// 64-bit signed integer `Rx` = `Ry` <= `I`; `ea 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_le64b" = 0x00ea,
    /// `00ef`
    /// 64-bit floating point `Rx` = `I` <= `Ry`; `ef 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_le64a" = 0x00ef,
    /// `00f0`
    /// 64-bit floating point `Rx` = `Ry` <= `I`; `f0 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_le64b" = 0x00f0,
    /// `00f8`
    /// 64-bit unsigned integer `Rx` = `I` >= `Ry`; `f8 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_ge64a" = 0x00f8,
    /// `00fc`
    /// 64-bit unsigned integer `Rx` = `Ry` >= `I`; `fc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_ge64b" = 0x00fc,
    /// `0104`
    /// 64-bit signed integer `Rx` = `I` >= `Ry`; `04 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_ge64a" = 0x0104,
    /// `0108`
    /// 64-bit signed integer `Rx` = `Ry` >= `I`; `08 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_ge64b" = 0x0108,
    /// `010d`
    /// 64-bit floating point `Rx` = `I` >= `Ry`; `0d 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_ge64a" = 0x010d,
    /// `010e`
    /// 64-bit floating point `Rx` = `Ry` >= `I`; `0e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_ge64b" = 0x010e,
    /// `011e`
    /// 64-bit `Rx` = `Ry` + `I`; `1e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_add64c" = 0x011e,
    /// `0126`
    /// 64-bit `Rx` = `I` - `Ry`; `26 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_sub64a" = 0x0126,
    /// `012a`
    /// 64-bit `Rx` = `Ry` - `I`; `2a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_sub64b" = 0x012a,
    /// `0132`
    /// 64-bit `Rx` = `Ry` * `I`; `32 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_mul64c" = 0x0132,
    /// `013a`
    /// 64-bit unsigned `Rx` = `I` / `Ry`; `3a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_div64a" = 0x013a,
    /// `013e`
    /// 64-bit unsigned `Rx` = `Ry` / `I`; `3e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_div64b" = 0x013e,
    /// `0146`
    /// 64-bit signed `Rx` = `I` / `Ry`; `46 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_div64a" = 0x0146,
    /// `014a`
    /// 64-bit signed `Rx` = `Ry` / `I`; `4a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_div64b" = 0x014a,
    /// `0152`
    /// 64-bit unsigned `Rx` = `I` % `Ry`; `52 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_rem64a" = 0x0152,
    /// `0156`
    /// 64-bit unsigned `Rx` = `Ry` % `I`; `56 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_rem64b" = 0x0156,
    /// `015e`
    /// 64-bit signed `Rx` = `I` % `Ry`; `5e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_rem64a" = 0x015e,
    /// `0162`
    /// 64-bit signed `Rx` = `Ry` % `I`; `62 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_rem64b" = 0x0162,
    /// `016a`
    /// 64-bit `Rx` = `I` ** `Ry`; `6a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_pow64a" = 0x016a,
    /// `016e`
    /// 64-bit `Rx` = `Ry` ** `I`; `6e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_pow64b" = 0x016e,
    /// `0184`
    /// 64-bit `Rx` = `Ry` + `I`; `84 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_add64c" = 0x0184,
    /// `0189`
    /// 64-bit `Rx` = `I` - `Ry`; `89 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_sub64a" = 0x0189,
    /// `018a`
    /// 64-bit `Rx` = `Ry` - `I`; `8a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_sub64b" = 0x018a,
    /// `018e`
    /// 64-bit `Rx` = `Ry` * `I`; `8e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_mul64c" = 0x018e,
    /// `0193`
    /// 64-bit `Rx` = `I` / `Ry`; `93 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_div64a" = 0x0193,
    /// `0194`
    /// 64-bit `Rx` = `Ry` / `I`; `94 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_div64b" = 0x0194,
    /// `0199`
    /// 64-bit `Rx` = `I` % `Ry`; `99 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_rem64a" = 0x0199,
    /// `019a`
    /// 64-bit `Rx` = `Ry` % `I`; `9a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_rem64b" = 0x019a,
    /// `019f`
    /// 64-bit `Rx` = `I` ** `Ry`; `9f 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_pow64a" = 0x019f,
    /// `01a0`
    /// 64-bit `Rx` = `Ry` ** `I`; `a0 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_pow64b" = 0x01a0,
};

/// Enumeration identifying each instruction that can appear inside a basic block, that is not a call or wide instruction.
pub const BasicOpCode = enum(u16) {
    /// convert basic opcode -> full opcode
    pub fn upcast(self: BasicOpCode) OpCode { return @enumFromInt(@intFromEnum(self)); }
    /// `0000`
    /// No operation; `00 00 __ __ __ __ __ __`
    @"nop" = 0x0000,
    /// `0001`
    /// Triggers a breakpoint in debuggers; does nothing otherwise; `01 00 __ __ __ __ __ __`
    @"breakpoint" = 0x0001,
    /// `0002`
    /// Halts execution at this instruction offset; `02 00 __ __ __ __ __ __`
    @"halt" = 0x0002,
    /// `0003`
    /// Traps execution of the `Rvm.Fiber` at this instruction offset
    /// Unlike `unreachable`, this indicates expected behavior; optimizing compilers should *not* assume it is never reached; `03 00 __ __ __ __ __ __`
    @"trap" = 0x0003,
    /// `0004`
    /// Marks a point in the code as unreachable; if executed in Rvm, it is the same as `trap`
    /// Unlike `trap`, however, this indicates undefined behavior; optimizing compilers should assume it is never reached; `04 00 __ __ __ __ __ __`
    @"unreachable" = 0x0004,
    /// `0005`
    /// Pushes `H` onto the stack.
    /// The handlers in this set will be first in line for their effects' prompts until a corresponding `pop` operation.; `05 00 H. .. .. .. __ __`
    @"push_set" = 0x0005,
    /// `0006`
    /// Pops the top most `HandlerSetId` from the stack, restoring the previous if present; `06 00 __ __ __ __ __ __`
    @"pop_set" = 0x0006,
    /// `0010`
    /// Each byte, starting from the address in `Rx`, up to an offset of `Rz`, is set to the least significant byte of `Ry`; `10 00 Rx Ry Rz __ __ __`
    @"mem_set" = 0x0010,
    /// `0011`
    /// Each byte, starting from the address in `Rx`, up to an offset of `I`, is set to `Ry`; `11 00 Rx Ry I. .. .. ..`
    @"mem_set_a" = 0x0011,
    /// `0012`
    /// Each byte, starting from the address in `Rx`, up to an offset of `Ry`, is set to `I`; `12 00 Rx Ry I. __ __ __`
    @"mem_set_b" = 0x0012,
    /// `0013`
    /// Each byte, starting from the address in `Ry`, up to an offset of `Rz`, is copied to the same offset of the address in `Rx`; `13 00 Rx Ry Rz __ __ __`
    @"mem_copy" = 0x0013,
    /// `0014`
    /// Each byte, starting from the address in `Ry`, up to an offset of `I`, is copied to the same offset from the address in `Rx`; `14 00 Rx Ry I. .. .. ..`
    @"mem_copy_a" = 0x0014,
    /// `0015`
    /// Each byte, starting from the address of `C`, up to an offset of `Ry`, is copied to the same offset from the address in `Rx`; `15 00 Rx Ry C. .. .. ..`
    @"mem_copy_b" = 0x0015,
    /// `0016`
    /// Each byte, starting from the addresses in `Rx` and `Ry`, up to an offset of `Rz`, are swapped with each-other; `16 00 Rx Ry Rz __ __ __`
    @"mem_swap" = 0x0016,
    /// `0017`
    /// Each byte, starting from the addresses in `Rx` and `Ry`, up to an offset of `I`, are swapped with each-other; `17 00 Rx Ry I. .. .. ..`
    @"mem_swap_c" = 0x0017,
    /// `0018`
    /// Get the address of a signed integer frame-relative operand stack offset `I`, placing it in `R`.
    /// 
    /// An operand stack offset of 1 is equivalent to 8 bytes down from the base of the stack frame; `18 00 R. I. .. .. .. __`
    @"addr_l" = 0x0018,
    /// `0019`
    /// Get the address of `U`, placing it in `R`; `19 00 R. U. __ __ __ __`
    @"addr_u" = 0x0019,
    /// `001a`
    /// Get the address of `G`, placing it in `R`; `1a 00 R. G. .. .. .. __`
    @"addr_g" = 0x001a,
    /// `001b`
    /// Get the address of `F`, placing it in `R`; `1b 00 R. F. .. .. .. __`
    @"addr_f" = 0x001b,
    /// `001c`
    /// Get the address of `B`, placing it in `R`; `1c 00 R. B. .. .. .. __`
    @"addr_b" = 0x001c,
    /// `001d`
    /// Get the address of `X`, placing it in `R`; `1d 00 R. X. .. .. .. __`
    @"addr_x" = 0x001d,
    /// `001e`
    /// Get the address of `C`, placing it in `R`; `1e 00 R. C. .. .. .. __`
    @"addr_c" = 0x001e,
    /// `001f`
    /// Loads an 8-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `1f 00 Rx Ry I. .. .. ..`
    @"load8" = 0x001f,
    /// `0020`
    /// Loads a 16-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `20 00 Rx Ry I. .. .. ..`
    @"load16" = 0x0020,
    /// `0021`
    /// Loads a 32-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `21 00 Rx Ry I. .. .. ..`
    @"load32" = 0x0021,
    /// `0022`
    /// Loads a 64-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `22 00 Rx Ry I. .. .. ..`
    @"load64" = 0x0022,
    /// `0023`
    /// Stores an 8-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `23 00 Rx Ry I. .. .. ..`
    @"store8" = 0x0023,
    /// `0024`
    /// Stores a 16-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `24 00 Rx Ry I. .. .. ..`
    @"store16" = 0x0024,
    /// `0025`
    /// Stores a 32-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `25 00 Rx Ry I. .. .. ..`
    @"store32" = 0x0025,
    /// `0026`
    /// Stores a 64-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `26 00 Rx Ry I. .. .. ..`
    @"store64" = 0x0026,
    /// `0027`
    /// Stores an 8-bit value to memory at the address in `R` offset by `Iy`; `27 00 R. Ix Iy .. .. ..`
    @"store8c" = 0x0027,
    /// `002b`
    /// 8-bit `Rx` ⇔ `Ry`; `2b 00 Rx Ry __ __ __ __`
    @"bit_swap8" = 0x002b,
    /// `002c`
    /// 16-bit `Rx` ⇔ `Ry`; `2c 00 Rx Ry __ __ __ __`
    @"bit_swap16" = 0x002c,
    /// `002d`
    /// 32-bit `Rx` ⇔ `Ry`; `2d 00 Rx Ry __ __ __ __`
    @"bit_swap32" = 0x002d,
    /// `002e`
    /// 64-bit `Rx` ⇔ `Ry`; `2e 00 Rx Ry __ __ __ __`
    @"bit_swap64" = 0x002e,
    /// `002f`
    /// 8-bit `Rx` = `Ry`; `2f 00 Rx Ry __ __ __ __`
    @"bit_copy8" = 0x002f,
    /// `0030`
    /// 16-bit `Rx` = `Ry`; `30 00 Rx Ry __ __ __ __`
    @"bit_copy16" = 0x0030,
    /// `0031`
    /// 32-bit `Rx` = `Ry`; `31 00 Rx Ry __ __ __ __`
    @"bit_copy32" = 0x0031,
    /// `0032`
    /// 64-bit `Rx` = `Ry`; `32 00 Rx Ry __ __ __ __`
    @"bit_copy64" = 0x0032,
    /// `0033`
    /// Copies an 8-bit `I` value into `R`; `33 00 R. I. __ __ __ __`
    @"bit_copy8c" = 0x0033,
    /// `0034`
    /// Copies a 16-bit `I` value into `R`; `34 00 R. I. .. __ __ __`
    @"bit_copy16c" = 0x0034,
    /// `0035`
    /// Copies a 32-bit `I` value into `R`; `35 00 R. I. .. .. .. __`
    @"bit_copy32c" = 0x0035,
    /// `0037`
    /// Counts the leading zeroes in 8-bits of `Ry`, placing the result in `Rx`; `37 00 Rx Ry __ __ __ __`
    @"bit_clz8" = 0x0037,
    /// `0038`
    /// Counts the leading zeroes in 16-bits of `Ry`, placing the result in `Rx`; `38 00 Rx Ry __ __ __ __`
    @"bit_clz16" = 0x0038,
    /// `0039`
    /// Counts the leading zeroes in 32-bits of `Ry`, placing the result in `Rx`; `39 00 Rx Ry __ __ __ __`
    @"bit_clz32" = 0x0039,
    /// `003a`
    /// Counts the leading zeroes in 64-bits of `Ry`, placing the result in `Rx`; `3a 00 Rx Ry __ __ __ __`
    @"bit_clz64" = 0x003a,
    /// `003b`
    /// Counts the set bits in 8-bits of `Ry`, placing the result in `Rx`; `3b 00 Rx Ry __ __ __ __`
    @"bit_pop8" = 0x003b,
    /// `003c`
    /// Counts the set bits in 16-bits of `Ry`, placing the result in `Rx`; `3c 00 Rx Ry __ __ __ __`
    @"bit_pop16" = 0x003c,
    /// `003d`
    /// Counts the set bits in 32-bits of `Ry`, placing the result in `Rx`; `3d 00 Rx Ry __ __ __ __`
    @"bit_pop32" = 0x003d,
    /// `003e`
    /// Counts the set bits in 64-bits of `Ry`, placing the result in `Rx`; `3e 00 Rx Ry __ __ __ __`
    @"bit_pop64" = 0x003e,
    /// `003f`
    /// 8-bit `Rx` = ~`Ry`; `3f 00 Rx Ry __ __ __ __`
    @"bit_not8" = 0x003f,
    /// `0040`
    /// 16-bit `Rx` = ~`Ry`; `40 00 Rx Ry __ __ __ __`
    @"bit_not16" = 0x0040,
    /// `0041`
    /// 32-bit `Rx` = ~`Ry`; `41 00 Rx Ry __ __ __ __`
    @"bit_not32" = 0x0041,
    /// `0042`
    /// 64-bit `Rx` = ~`Ry`; `42 00 Rx Ry __ __ __ __`
    @"bit_not64" = 0x0042,
    /// `0043`
    /// 8-bit `Rx` = `Ry` & `Rz`; `43 00 Rx Ry Rz __ __ __`
    @"bit_and8" = 0x0043,
    /// `0044`
    /// 16-bit `Rx` = `Ry` & `Rz`; `44 00 Rx Ry Rz __ __ __`
    @"bit_and16" = 0x0044,
    /// `0045`
    /// 32-bit `Rx` = `Ry` & `Rz`; `45 00 Rx Ry Rz __ __ __`
    @"bit_and32" = 0x0045,
    /// `0046`
    /// 64-bit `Rx` = `Ry` & `Rz`; `46 00 Rx Ry Rz __ __ __`
    @"bit_and64" = 0x0046,
    /// `0047`
    /// 8-bit `Rx` = `Ry` & `I`; `47 00 Rx Ry I. __ __ __`
    @"bit_and8c" = 0x0047,
    /// `0048`
    /// 16-bit `Rx` = `Ry` & `I`; `48 00 Rx Ry I. .. __ __`
    @"bit_and16c" = 0x0048,
    /// `0049`
    /// 32-bit `Rx` = `Ry` & `I`; `49 00 Rx Ry I. .. .. ..`
    @"bit_and32c" = 0x0049,
    /// `004b`
    /// 8-bit `Rx` = `Ry` \| `Rz`; `4b 00 Rx Ry Rz __ __ __`
    @"bit_or8" = 0x004b,
    /// `004c`
    /// 16-bit `Rx` = `Ry` \| `Rz`; `4c 00 Rx Ry Rz __ __ __`
    @"bit_or16" = 0x004c,
    /// `004d`
    /// 32-bit `Rx` = `Ry` \| `Rz`; `4d 00 Rx Ry Rz __ __ __`
    @"bit_or32" = 0x004d,
    /// `004e`
    /// 64-bit `Rx` = `Ry` \| `Rz`; `4e 00 Rx Ry Rz __ __ __`
    @"bit_or64" = 0x004e,
    /// `004f`
    /// 8-bit `Rx` = `Ry` \| `I`; `4f 00 Rx Ry I. __ __ __`
    @"bit_or8c" = 0x004f,
    /// `0050`
    /// 16-bit `Rx` = `Ry` \| `I`; `50 00 Rx Ry I. .. __ __`
    @"bit_or16c" = 0x0050,
    /// `0051`
    /// 32-bit `Rx` = `Ry` \| `I`; `51 00 Rx Ry I. .. .. ..`
    @"bit_or32c" = 0x0051,
    /// `0053`
    /// 8-bit `Rx` = `Ry` ^ `Rz`; `53 00 Rx Ry Rz __ __ __`
    @"bit_xor8" = 0x0053,
    /// `0054`
    /// 16-bit `Rx` = `Ry` ^ `Rz`; `54 00 Rx Ry Rz __ __ __`
    @"bit_xor16" = 0x0054,
    /// `0055`
    /// 32-bit `Rx` = `Ry` ^ `Rz`; `55 00 Rx Ry Rz __ __ __`
    @"bit_xor32" = 0x0055,
    /// `0056`
    /// 64-bit `Rx` = `Ry` ^ `Rz`; `56 00 Rx Ry Rz __ __ __`
    @"bit_xor64" = 0x0056,
    /// `0057`
    /// 8-bit `Rx` = `Ry` ^ `I`; `57 00 Rx Ry I. __ __ __`
    @"bit_xor8c" = 0x0057,
    /// `0058`
    /// 16-bit `Rx` = `Ry` ^ `I`; `58 00 Rx Ry I. .. __ __`
    @"bit_xor16c" = 0x0058,
    /// `0059`
    /// 32-bit `Rx` = `Ry` ^ `I`; `59 00 Rx Ry I. .. .. ..`
    @"bit_xor32c" = 0x0059,
    /// `005b`
    /// 8-bit `Rx` = `Ry` << `Rz`; `5b 00 Rx Ry Rz __ __ __`
    @"bit_lshift8" = 0x005b,
    /// `005c`
    /// 16-bit `Rx` = `Ry` << `Rz`; `5c 00 Rx Ry Rz __ __ __`
    @"bit_lshift16" = 0x005c,
    /// `005d`
    /// 32-bit `Rx` = `Ry` << `Rz`; `5d 00 Rx Ry Rz __ __ __`
    @"bit_lshift32" = 0x005d,
    /// `005e`
    /// 64-bit `Rx` = `Ry` << `Rz`; `5e 00 Rx Ry Rz __ __ __`
    @"bit_lshift64" = 0x005e,
    /// `005f`
    /// 8-bit `Rx` = `I` << `Ry`; `5f 00 Rx Ry I. __ __ __`
    @"bit_lshift8a" = 0x005f,
    /// `0060`
    /// 16-bit `Rx` = `I` << `Ry`; `60 00 Rx Ry I. .. __ __`
    @"bit_lshift16a" = 0x0060,
    /// `0061`
    /// 32-bit `Rx` = `I` << `Ry`; `61 00 Rx Ry I. .. .. ..`
    @"bit_lshift32a" = 0x0061,
    /// `0063`
    /// 8-bit `Rx` = `Ry` << `I`; `63 00 Rx Ry I. __ __ __`
    @"bit_lshift8b" = 0x0063,
    /// `0064`
    /// 16-bit `Rx` = `Ry` << `I`; `64 00 Rx Ry I. __ __ __`
    @"bit_lshift16b" = 0x0064,
    /// `0065`
    /// 32-bit `Rx` = `Ry` << `I`; `65 00 Rx Ry I. __ __ __`
    @"bit_lshift32b" = 0x0065,
    /// `0066`
    /// 64-bit `Rx` = `Ry` << `I`; `66 00 Rx Ry I. __ __ __`
    @"bit_lshift64b" = 0x0066,
    /// `0067`
    /// 8-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `67 00 Rx Ry Rz __ __ __`
    @"u_rshift8" = 0x0067,
    /// `0068`
    /// 16-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `68 00 Rx Ry Rz __ __ __`
    @"u_rshift16" = 0x0068,
    /// `0069`
    /// 32-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `69 00 Rx Ry Rz __ __ __`
    @"u_rshift32" = 0x0069,
    /// `006a`
    /// 64-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `6a 00 Rx Ry Rz __ __ __`
    @"u_rshift64" = 0x006a,
    /// `006b`
    /// 8-bit unsigned/logical `Rx` = `I` >> `Ry`; `6b 00 Rx Ry I. __ __ __`
    @"u_rshift8a" = 0x006b,
    /// `006c`
    /// 16-bit unsigned/logical `Rx` = `I` >> `Ry`; `6c 00 Rx Ry I. .. __ __`
    @"u_rshift16a" = 0x006c,
    /// `006d`
    /// 32-bit unsigned/logical `Rx` = `I` >> `Ry`; `6d 00 Rx Ry I. .. .. ..`
    @"u_rshift32a" = 0x006d,
    /// `006f`
    /// 8-bit unsigned/logical `Rx` = `Ry` >> `I`; `6f 00 Rx Ry I. __ __ __`
    @"u_rshift8b" = 0x006f,
    /// `0070`
    /// 16-bit unsigned/logical `Rx` = `Ry` >> `I`; `70 00 Rx Ry I. __ __ __`
    @"u_rshift16b" = 0x0070,
    /// `0071`
    /// 32-bit unsigned/logical `Rx` = `Ry` >> `I`; `71 00 Rx Ry I. __ __ __`
    @"u_rshift32b" = 0x0071,
    /// `0072`
    /// 64-bit unsigned/logical `Rx` = `Ry` >> `I`; `72 00 Rx Ry I. __ __ __`
    @"u_rshift64b" = 0x0072,
    /// `0073`
    /// 8-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `73 00 Rx Ry Rz __ __ __`
    @"s_rshift8" = 0x0073,
    /// `0074`
    /// 16-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `74 00 Rx Ry Rz __ __ __`
    @"s_rshift16" = 0x0074,
    /// `0075`
    /// 32-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `75 00 Rx Ry Rz __ __ __`
    @"s_rshift32" = 0x0075,
    /// `0076`
    /// 64-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `76 00 Rx Ry Rz __ __ __`
    @"s_rshift64" = 0x0076,
    /// `0077`
    /// 8-bit signed/arithmetic `Rx` = `I` >> `Ry`; `77 00 Rx Ry I. __ __ __`
    @"s_rshift8a" = 0x0077,
    /// `0078`
    /// 16-bit signed/arithmetic `Rx` = `I` >> `Ry`; `78 00 Rx Ry I. .. __ __`
    @"s_rshift16a" = 0x0078,
    /// `0079`
    /// 32-bit signed/arithmetic `Rx` = `I` >> `Ry`; `79 00 Rx Ry I. .. .. ..`
    @"s_rshift32a" = 0x0079,
    /// `007b`
    /// 8-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7b 00 Rx Ry I. __ __ __`
    @"s_rshift8b" = 0x007b,
    /// `007c`
    /// 16-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7c 00 Rx Ry I. __ __ __`
    @"s_rshift16b" = 0x007c,
    /// `007d`
    /// 32-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7d 00 Rx Ry I. __ __ __`
    @"s_rshift32b" = 0x007d,
    /// `007e`
    /// 64-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7e 00 Rx Ry I. __ __ __`
    @"s_rshift64b" = 0x007e,
    /// `007f`
    /// 8-bit integer `Rx` = `Ry` == `Rz`; `7f 00 Rx Ry Rz __ __ __`
    @"i_eq8" = 0x007f,
    /// `0080`
    /// 16-bit integer `Rx` = `Ry` == `Rz`; `80 00 Rx Ry Rz __ __ __`
    @"i_eq16" = 0x0080,
    /// `0081`
    /// 32-bit integer `Rx` = `Ry` == `Rz`; `81 00 Rx Ry Rz __ __ __`
    @"i_eq32" = 0x0081,
    /// `0082`
    /// 64-bit integer `Rx` = `Ry` == `Rz`; `82 00 Rx Ry Rz __ __ __`
    @"i_eq64" = 0x0082,
    /// `0083`
    /// 8-bit integer `Rx` = `Ry` == `I`; `83 00 Rx Ry I. __ __ __`
    @"i_eq8c" = 0x0083,
    /// `0084`
    /// 16-bit integer `Rx` = `Ry` == `I`; `84 00 Rx Ry I. .. __ __`
    @"i_eq16c" = 0x0084,
    /// `0085`
    /// 32-bit integer `Rx` = `Ry` == `I`; `85 00 Rx Ry I. .. .. ..`
    @"i_eq32c" = 0x0085,
    /// `0087`
    /// 32-bit floating point `Rx` = `Ry` == `Rz`; `87 00 Rx Ry Rz __ __ __`
    @"f_eq32" = 0x0087,
    /// `0088`
    /// 64-bit floating point `Rx` = `Ry` == `Rz`; `88 00 Rx Ry Rz __ __ __`
    @"f_eq64" = 0x0088,
    /// `0089`
    /// 32-bit floating point `Rx` = `Ry` == `I`; `89 00 Rx Ry I. .. .. ..`
    @"f_eq32c" = 0x0089,
    /// `008b`
    /// 8-bit integer `Rx` = `Ry` != `Rz`; `8b 00 Rx Ry Rz __ __ __`
    @"i_ne8" = 0x008b,
    /// `008c`
    /// 16-bit integer `Rx` = `Ry` != `Rz`; `8c 00 Rx Ry Rz __ __ __`
    @"i_ne16" = 0x008c,
    /// `008d`
    /// 32-bit integer `Rx` = `Ry` != `Rz`; `8d 00 Rx Ry Rz __ __ __`
    @"i_ne32" = 0x008d,
    /// `008e`
    /// 64-bit integer `Rx` = `Ry` != `Rz`; `8e 00 Rx Ry Rz __ __ __`
    @"i_ne64" = 0x008e,
    /// `008f`
    /// 8-bit integer `Rx` = `Ry` != `I`; `8f 00 Rx Ry I. __ __ __`
    @"i_ne8c" = 0x008f,
    /// `0090`
    /// 16-bit integer `Rx` = `Ry` != `I`; `90 00 Rx Ry I. .. __ __`
    @"i_ne16c" = 0x0090,
    /// `0091`
    /// 32-bit integer `Rx` = `Ry` != `I`; `91 00 Rx Ry I. .. .. ..`
    @"i_ne32c" = 0x0091,
    /// `0093`
    /// 32-bit floating point `Rx` = `Ry` != `Rz`; `93 00 Rx Ry Rz __ __ __`
    @"f_ne32" = 0x0093,
    /// `0094`
    /// 64-bit floating point `Rx` = `Ry` != `Rz`; `94 00 Rx Ry Rz __ __ __`
    @"f_ne64" = 0x0094,
    /// `0095`
    /// 32-bit floating point `Rx` = `Ry` != `I`; `95 00 Rx Ry I. .. .. ..`
    @"f_ne32c" = 0x0095,
    /// `0097`
    /// 8-bit unsigned integer `Rx` = `Ry` < `Rz`; `97 00 Rx Ry Rz __ __ __`
    @"u_lt8" = 0x0097,
    /// `0098`
    /// 16-bit unsigned integer `Rx` = `Ry` < `Rz`; `98 00 Rx Ry Rz __ __ __`
    @"u_lt16" = 0x0098,
    /// `0099`
    /// 32-bit unsigned integer `Rx` = `Ry` < `Rz`; `99 00 Rx Ry Rz __ __ __`
    @"u_lt32" = 0x0099,
    /// `009a`
    /// 64-bit unsigned integer `Rx` = `Ry` < `Rz`; `9a 00 Rx Ry Rz __ __ __`
    @"u_lt64" = 0x009a,
    /// `009b`
    /// 8-bit unsigned integer `Rx` = `I` < `Ry`; `9b 00 Rx Ry I. __ __ __`
    @"u_lt8a" = 0x009b,
    /// `009c`
    /// 16-bit unsigned integer `Rx` = `I` < `Ry`; `9c 00 Rx Ry I. .. __ __`
    @"u_lt16a" = 0x009c,
    /// `009d`
    /// 32-bit unsigned integer `Rx` = `I` < `Ry`; `9d 00 Rx Ry I. .. .. ..`
    @"u_lt32a" = 0x009d,
    /// `009f`
    /// 8-bit unsigned integer `Rx` = `Ry` < `I`; `9f 00 Rx Ry I. __ __ __`
    @"u_lt8b" = 0x009f,
    /// `00a0`
    /// 16-bit unsigned integer `Rx` = `Ry` < `I`; `a0 00 Rx Ry I. .. __ __`
    @"u_lt16b" = 0x00a0,
    /// `00a1`
    /// 32-bit unsigned integer `Rx` = `Ry` < `I`; `a1 00 Rx Ry I. .. .. ..`
    @"u_lt32b" = 0x00a1,
    /// `00a3`
    /// 8-bit signed integer `Rx` = `Ry` < `Rz`; `a3 00 Rx Ry Rz __ __ __`
    @"s_lt8" = 0x00a3,
    /// `00a4`
    /// 16-bit signed integer `Rx` = `Ry` < `Rz`; `a4 00 Rx Ry Rz __ __ __`
    @"s_lt16" = 0x00a4,
    /// `00a5`
    /// 32-bit signed integer `Rx` = `Ry` < `Rz`; `a5 00 Rx Ry Rz __ __ __`
    @"s_lt32" = 0x00a5,
    /// `00a6`
    /// 64-bit signed integer `Rx` = `Ry` < `Rz`; `a6 00 Rx Ry Rz __ __ __`
    @"s_lt64" = 0x00a6,
    /// `00a7`
    /// 8-bit signed integer `Rx` = `I` < `Ry`; `a7 00 Rx Ry I. __ __ __`
    @"s_lt8a" = 0x00a7,
    /// `00a8`
    /// 16-bit signed integer `Rx` = `I` < `Ry`; `a8 00 Rx Ry I. .. __ __`
    @"s_lt16a" = 0x00a8,
    /// `00a9`
    /// 32-bit signed integer `Rx` = `I` < `Ry`; `a9 00 Rx Ry I. .. .. ..`
    @"s_lt32a" = 0x00a9,
    /// `00ab`
    /// 8-bit signed integer `Rx` = `Ry` < `I`; `ab 00 Rx Ry I. __ __ __`
    @"s_lt8b" = 0x00ab,
    /// `00ac`
    /// 16-bit signed integer `Rx` = `Ry` < `I`; `ac 00 Rx Ry I. .. __ __`
    @"s_lt16b" = 0x00ac,
    /// `00ad`
    /// 32-bit signed integer `Rx` = `Ry` < `I`; `ad 00 Rx Ry I. .. .. ..`
    @"s_lt32b" = 0x00ad,
    /// `00af`
    /// 32-bit floating point `Rx` = `Ry` < `Rz`; `af 00 Rx Ry Rz __ __ __`
    @"f_lt32" = 0x00af,
    /// `00b0`
    /// 32-bit floating point `Rx` = `I` < `Ry`; `b0 00 Rx Ry I. .. .. ..`
    @"f_lt32a" = 0x00b0,
    /// `00b1`
    /// 32-bit floating point `Rx` = `Ry` < `I`; `b1 00 Rx Ry I. .. .. ..`
    @"f_lt32b" = 0x00b1,
    /// `00b2`
    /// 64-bit floating point `Rx` = `Ry` < `Rz`; `b2 00 Rx Ry Rz __ __ __`
    @"f_lt64" = 0x00b2,
    /// `00b5`
    /// 8-bit unsigned integer `Rx` = `Ry` > `Rz`; `b5 00 Rx Ry Rz __ __ __`
    @"u_gt8" = 0x00b5,
    /// `00b6`
    /// 16-bit unsigned integer `Rx` = `Ry` > `Rz`; `b6 00 Rx Ry Rz __ __ __`
    @"u_gt16" = 0x00b6,
    /// `00b7`
    /// 32-bit unsigned integer `Rx` = `Ry` > `Rz`; `b7 00 Rx Ry Rz __ __ __`
    @"u_gt32" = 0x00b7,
    /// `00b8`
    /// 64-bit unsigned integer `Rx` = `Ry` > `Rz`; `b8 00 Rx Ry Rz __ __ __`
    @"u_gt64" = 0x00b8,
    /// `00b9`
    /// 8-bit unsigned integer `Rx` = `I` > `Ry`; `b9 00 Rx Ry I. __ __ __`
    @"u_gt8a" = 0x00b9,
    /// `00ba`
    /// 16-bit unsigned integer `Rx` = `I` > `Ry`; `ba 00 Rx Ry I. .. __ __`
    @"u_gt16a" = 0x00ba,
    /// `00bb`
    /// 32-bit unsigned integer `Rx` = `I` > `Ry`; `bb 00 Rx Ry I. .. .. ..`
    @"u_gt32a" = 0x00bb,
    /// `00bd`
    /// 8-bit unsigned integer `Rx` = `Ry` > `I`; `bd 00 Rx Ry I. __ __ __`
    @"u_gt8b" = 0x00bd,
    /// `00be`
    /// 16-bit unsigned integer `Rx` = `Ry` > `I`; `be 00 Rx Ry I. .. __ __`
    @"u_gt16b" = 0x00be,
    /// `00bf`
    /// 32-bit unsigned integer `Rx` = `Ry` > `I`; `bf 00 Rx Ry I. .. .. ..`
    @"u_gt32b" = 0x00bf,
    /// `00c1`
    /// 8-bit signed integer `Rx` = `Ry` > `Rz`; `c1 00 Rx Ry Rz __ __ __`
    @"s_gt8" = 0x00c1,
    /// `00c2`
    /// 16-bit signed integer `Rx` = `Ry` > `Rz`; `c2 00 Rx Ry Rz __ __ __`
    @"s_gt16" = 0x00c2,
    /// `00c3`
    /// 32-bit signed integer `Rx` = `Ry` > `Rz`; `c3 00 Rx Ry Rz __ __ __`
    @"s_gt32" = 0x00c3,
    /// `00c4`
    /// 64-bit signed integer `Rx` = `Ry` > `Rz`; `c4 00 Rx Ry Rz __ __ __`
    @"s_gt64" = 0x00c4,
    /// `00c5`
    /// 8-bit signed integer `Rx` = `I` > `Ry`; `c5 00 Rx Ry I. __ __ __`
    @"s_gt8a" = 0x00c5,
    /// `00c6`
    /// 16-bit signed integer `Rx` = `I` > `Ry`; `c6 00 Rx Ry I. .. __ __`
    @"s_gt16a" = 0x00c6,
    /// `00c7`
    /// 32-bit signed integer `Rx` = `I` > `Ry`; `c7 00 Rx Ry I. .. .. ..`
    @"s_gt32a" = 0x00c7,
    /// `00c9`
    /// 8-bit signed integer `Rx` = `Ry` > `I`; `c9 00 Rx Ry I. __ __ __`
    @"s_gt8b" = 0x00c9,
    /// `00ca`
    /// 16-bit signed integer `Rx` = `Ry` > `I`; `ca 00 Rx Ry I. .. __ __`
    @"s_gt16b" = 0x00ca,
    /// `00cb`
    /// 32-bit signed integer `Rx` = `Ry` > `I`; `cb 00 Rx Ry I. .. .. ..`
    @"s_gt32b" = 0x00cb,
    /// `00cd`
    /// 32-bit floating point `Rx` = `Ry` > `Rz`; `cd 00 Rx Ry Rz __ __ __`
    @"f_gt32" = 0x00cd,
    /// `00ce`
    /// 32-bit floating point `Rx` = `I` > `Ry`; `ce 00 Rx Ry I. .. .. ..`
    @"f_gt32a" = 0x00ce,
    /// `00cf`
    /// 32-bit floating point `Rx` = `Ry` > `I`; `cf 00 Rx Ry I. .. .. ..`
    @"f_gt32b" = 0x00cf,
    /// `00d0`
    /// 64-bit floating point `Rx` = `Ry` > `Rz`; `d0 00 Rx Ry Rz __ __ __`
    @"f_gt64" = 0x00d0,
    /// `00d3`
    /// 8-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d3 00 Rx Ry Rz __ __ __`
    @"u_le8" = 0x00d3,
    /// `00d4`
    /// 16-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d4 00 Rx Ry Rz __ __ __`
    @"u_le16" = 0x00d4,
    /// `00d5`
    /// 32-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d5 00 Rx Ry Rz __ __ __`
    @"u_le32" = 0x00d5,
    /// `00d6`
    /// 64-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d6 00 Rx Ry Rz __ __ __`
    @"u_le64" = 0x00d6,
    /// `00d7`
    /// 8-bit unsigned integer `Rx` = `I` <= `Ry`; `d7 00 Rx Ry I. __ __ __`
    @"u_le8a" = 0x00d7,
    /// `00d8`
    /// 16-bit unsigned integer `Rx` = `I` <= `Ry`; `d8 00 Rx Ry I. .. __ __`
    @"u_le16a" = 0x00d8,
    /// `00d9`
    /// 32-bit unsigned integer `Rx` = `I` <= `Ry`; `d9 00 Rx Ry I. .. .. ..`
    @"u_le32a" = 0x00d9,
    /// `00db`
    /// 8-bit unsigned integer `Rx` = `Ry` <= `I`; `db 00 Rx Ry I. __ __ __`
    @"u_le8b" = 0x00db,
    /// `00dc`
    /// 16-bit unsigned integer `Rx` = `Ry` <= `I`; `dc 00 Rx Ry I. .. __ __`
    @"u_le16b" = 0x00dc,
    /// `00dd`
    /// 32-bit unsigned integer `Rx` = `Ry` <= `I`; `dd 00 Rx Ry I. .. .. ..`
    @"u_le32b" = 0x00dd,
    /// `00df`
    /// 8-bit signed integer `Rx` = `Ry` <= `Rz`; `df 00 Rx Ry Rz __ __ __`
    @"s_le8" = 0x00df,
    /// `00e0`
    /// 16-bit signed integer `Rx` = `Ry` <= `Rz`; `e0 00 Rx Ry Rz __ __ __`
    @"s_le16" = 0x00e0,
    /// `00e1`
    /// 32-bit signed integer `Rx` = `Ry` <= `Rz`; `e1 00 Rx Ry Rz __ __ __`
    @"s_le32" = 0x00e1,
    /// `00e2`
    /// 64-bit signed integer `Rx` = `Ry` <= `Rz`; `e2 00 Rx Ry Rz __ __ __`
    @"s_le64" = 0x00e2,
    /// `00e3`
    /// 8-bit signed integer `Rx` = `I` <= `Ry`; `e3 00 Rx Ry I. __ __ __`
    @"s_le8a" = 0x00e3,
    /// `00e4`
    /// 16-bit signed integer `Rx` = `I` <= `Ry`; `e4 00 Rx Ry I. .. __ __`
    @"s_le16a" = 0x00e4,
    /// `00e5`
    /// 32-bit signed integer `Rx` = `I` <= `Ry`; `e5 00 Rx Ry I. .. .. ..`
    @"s_le32a" = 0x00e5,
    /// `00e7`
    /// 8-bit signed integer `Rx` = `Ry` <= `I`; `e7 00 Rx Ry I. __ __ __`
    @"s_le8b" = 0x00e7,
    /// `00e8`
    /// 16-bit signed integer `Rx` = `Ry` <= `I`; `e8 00 Rx Ry I. .. __ __`
    @"s_le16b" = 0x00e8,
    /// `00e9`
    /// 32-bit signed integer `Rx` = `Ry` <= `I`; `e9 00 Rx Ry I. .. .. ..`
    @"s_le32b" = 0x00e9,
    /// `00eb`
    /// 32-bit floating point `Rx` = `Ry` <= `Rz`; `eb 00 Rx Ry Rz __ __ __`
    @"f_le32" = 0x00eb,
    /// `00ec`
    /// 32-bit floating point `Rx` = `I` <= `Ry`; `ec 00 Rx Ry I. .. .. ..`
    @"f_le32a" = 0x00ec,
    /// `00ed`
    /// 32-bit floating point `Rx` = `Ry` <= `I`; `ed 00 Rx Ry I. .. .. ..`
    @"f_le32b" = 0x00ed,
    /// `00ee`
    /// 64-bit floating point `Rx` = `Ry` <= `Rz`; `ee 00 Rx Ry Rz __ __ __`
    @"f_le64" = 0x00ee,
    /// `00f1`
    /// 8-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f1 00 Rx Ry Rz __ __ __`
    @"u_ge8" = 0x00f1,
    /// `00f2`
    /// 16-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f2 00 Rx Ry Rz __ __ __`
    @"u_ge16" = 0x00f2,
    /// `00f3`
    /// 32-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f3 00 Rx Ry Rz __ __ __`
    @"u_ge32" = 0x00f3,
    /// `00f4`
    /// 64-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f4 00 Rx Ry Rz __ __ __`
    @"u_ge64" = 0x00f4,
    /// `00f5`
    /// 8-bit unsigned integer `Rx` = `I` >= `Ry`; `f5 00 Rx Ry I. __ __ __`
    @"u_ge8a" = 0x00f5,
    /// `00f6`
    /// 16-bit unsigned integer `Rx` = `I` >= `Ry`; `f6 00 Rx Ry I. .. __ __`
    @"u_ge16a" = 0x00f6,
    /// `00f7`
    /// 32-bit unsigned integer `Rx` = `I` >= `Ry`; `f7 00 Rx Ry I. .. .. ..`
    @"u_ge32a" = 0x00f7,
    /// `00f9`
    /// 8-bit unsigned integer `Rx` = `Ry` >= `I`; `f9 00 Rx Ry I. __ __ __`
    @"u_ge8b" = 0x00f9,
    /// `00fa`
    /// 16-bit unsigned integer `Rx` = `Ry` >= `I`; `fa 00 Rx Ry I. .. __ __`
    @"u_ge16b" = 0x00fa,
    /// `00fb`
    /// 32-bit unsigned integer `Rx` = `Ry` >= `I`; `fb 00 Rx Ry I. .. .. ..`
    @"u_ge32b" = 0x00fb,
    /// `00fd`
    /// 8-bit signed integer `Rx` = `Ry` >= `Rz`; `fd 00 Rx Ry Rz __ __ __`
    @"s_ge8" = 0x00fd,
    /// `00fe`
    /// 16-bit signed integer `Rx` = `Ry` >= `Rz`; `fe 00 Rx Ry Rz __ __ __`
    @"s_ge16" = 0x00fe,
    /// `00ff`
    /// 32-bit signed integer `Rx` = `Ry` >= `Rz`; `ff 00 Rx Ry Rz __ __ __`
    @"s_ge32" = 0x00ff,
    /// `0100`
    /// 64-bit signed integer `Rx` = `Ry` >= `Rz`; `00 01 Rx Ry Rz __ __ __`
    @"s_ge64" = 0x0100,
    /// `0101`
    /// 8-bit signed integer `Rx` = `I` >= `Ry`; `01 01 Rx Ry I. __ __ __`
    @"s_ge8a" = 0x0101,
    /// `0102`
    /// 16-bit signed integer `Rx` = `I` >= `Ry`; `02 01 Rx Ry I. .. __ __`
    @"s_ge16a" = 0x0102,
    /// `0103`
    /// 32-bit signed integer `Rx` = `I` >= `Ry`; `03 01 Rx Ry I. .. .. ..`
    @"s_ge32a" = 0x0103,
    /// `0105`
    /// 8-bit signed integer `Rx` = `Ry` >= `I`; `05 01 Rx Ry I. __ __ __`
    @"s_ge8b" = 0x0105,
    /// `0106`
    /// 16-bit signed integer `Rx` = `Ry` >= `I`; `06 01 Rx Ry I. .. __ __`
    @"s_ge16b" = 0x0106,
    /// `0107`
    /// 32-bit signed integer `Rx` = `Ry` >= `I`; `07 01 Rx Ry I. .. .. ..`
    @"s_ge32b" = 0x0107,
    /// `0109`
    /// 32-bit floating point `Rx` = `Ry` >= `Rz`; `09 01 Rx Ry Rz __ __ __`
    @"f_ge32" = 0x0109,
    /// `010a`
    /// 32-bit floating point `Rx` = `I` >= `Ry`; `0a 01 Rx Ry I. .. .. ..`
    @"f_ge32a" = 0x010a,
    /// `010b`
    /// 32-bit floating point `Rx` = `Ry` >= `I`; `0b 01 Rx Ry I. .. .. ..`
    @"f_ge32b" = 0x010b,
    /// `010c`
    /// 64-bit floating point `Rx` = `Ry` >= `Rz`; `0c 01 Rx Ry Rz __ __ __`
    @"f_ge64" = 0x010c,
    /// `010f`
    /// 8-bit `Rx` = -`Ry`; `0f 01 Rx Ry __ __ __ __`
    @"s_neg8" = 0x010f,
    /// `0110`
    /// 16-bit `Rx` = -`Ry`; `10 01 Rx Ry __ __ __ __`
    @"s_neg16" = 0x0110,
    /// `0111`
    /// 32-bit `Rx` = -`Ry`; `11 01 Rx Ry __ __ __ __`
    @"s_neg32" = 0x0111,
    /// `0112`
    /// 64-bit `Rx` = -`Ry`; `12 01 Rx Ry __ __ __ __`
    @"s_neg64" = 0x0112,
    /// `0113`
    /// 8-bit `Rx` = \|`Ry`\|; `13 01 Rx Ry __ __ __ __`
    @"s_abs8" = 0x0113,
    /// `0114`
    /// 16-bit `Rx` = \|`Ry`\|; `14 01 Rx Ry __ __ __ __`
    @"s_abs16" = 0x0114,
    /// `0115`
    /// 32-bit `Rx` = \|`Ry`\|; `15 01 Rx Ry __ __ __ __`
    @"s_abs32" = 0x0115,
    /// `0116`
    /// 64-bit `Rx` = \|`Ry`\|; `16 01 Rx Ry __ __ __ __`
    @"s_abs64" = 0x0116,
    /// `0117`
    /// 8-bit `Rx` = `Ry` + `Rz`; `17 01 Rx Ry Rz __ __ __`
    @"i_add8" = 0x0117,
    /// `0118`
    /// 16-bit `Rx` = `Ry` + `Rz`; `18 01 Rx Ry Rz __ __ __`
    @"i_add16" = 0x0118,
    /// `0119`
    /// 32-bit `Rx` = `Ry` + `Rz`; `19 01 Rx Ry Rz __ __ __`
    @"i_add32" = 0x0119,
    /// `011a`
    /// 64-bit `Rx` = `Ry` + `Rz`; `1a 01 Rx Ry Rz __ __ __`
    @"i_add64" = 0x011a,
    /// `011b`
    /// 8-bit `Rx` = `Ry` + `I`; `1b 01 Rx Ry I. __ __ __`
    @"i_add8c" = 0x011b,
    /// `011c`
    /// 16-bit `Rx` = `Ry` + `I`; `1c 01 Rx Ry I. .. __ __`
    @"i_add16c" = 0x011c,
    /// `011d`
    /// 32-bit `Rx` = `Ry` + `I`; `1d 01 Rx Ry I. .. .. ..`
    @"i_add32c" = 0x011d,
    /// `011f`
    /// 8-bit `Rx` = `Ry` - `Rz`; `1f 01 Rx Ry Rz __ __ __`
    @"i_sub8" = 0x011f,
    /// `0120`
    /// 16-bit `Rx` = `Ry` - `Rz`; `20 01 Rx Ry Rz __ __ __`
    @"i_sub16" = 0x0120,
    /// `0121`
    /// 32-bit `Rx` = `Ry` - `Rz`; `21 01 Rx Ry Rz __ __ __`
    @"i_sub32" = 0x0121,
    /// `0122`
    /// 64-bit `Rx` = `Ry` - `Rz`; `22 01 Rx Ry Rz __ __ __`
    @"i_sub64" = 0x0122,
    /// `0123`
    /// 8-bit `Rx` = `I` - `Ry`; `23 01 Rx Ry I. __ __ __`
    @"i_sub8a" = 0x0123,
    /// `0124`
    /// 16-bit `Rx` = `I` - `Ry`; `24 01 Rx Ry I. .. __ __`
    @"i_sub16a" = 0x0124,
    /// `0125`
    /// 32-bit `Rx` = `I` - `Ry`; `25 01 Rx Ry I. .. .. ..`
    @"i_sub32a" = 0x0125,
    /// `0127`
    /// 8-bit `Rx` = `Ry` - `I`; `27 01 Rx Ry I. __ __ __`
    @"i_sub8b" = 0x0127,
    /// `0128`
    /// 16-bit `Rx` = `Ry` - `I`; `28 01 Rx Ry I. .. __ __`
    @"i_sub16b" = 0x0128,
    /// `0129`
    /// 32-bit `Rx` = `Ry` - `I`; `29 01 Rx Ry I. .. .. ..`
    @"i_sub32b" = 0x0129,
    /// `012b`
    /// 8-bit `Rx` = `Ry` * `Rz`; `2b 01 Rx Ry Rz __ __ __`
    @"i_mul8" = 0x012b,
    /// `012c`
    /// 16-bit `Rx` = `Ry` * `Rz`; `2c 01 Rx Ry Rz __ __ __`
    @"i_mul16" = 0x012c,
    /// `012d`
    /// 32-bit `Rx` = `Ry` * `Rz`; `2d 01 Rx Ry Rz __ __ __`
    @"i_mul32" = 0x012d,
    /// `012e`
    /// 64-bit `Rx` = `Ry` * `Rz`; `2e 01 Rx Ry Rz __ __ __`
    @"i_mul64" = 0x012e,
    /// `012f`
    /// 8-bit `Rx` = `Ry` * `I`; `2f 01 Rx Ry I. __ __ __`
    @"i_mul8c" = 0x012f,
    /// `0130`
    /// 16-bit `Rx` = `Ry` * `I`; `30 01 Rx Ry I. .. __ __`
    @"i_mul16c" = 0x0130,
    /// `0131`
    /// 32-bit `Rx` = `Ry` * `I`; `31 01 Rx Ry I. .. .. ..`
    @"i_mul32c" = 0x0131,
    /// `0133`
    /// 8-bit unsigned `Rx` = `Ry` / `Rz`; `33 01 Rx Ry Rz __ __ __`
    @"u_div8" = 0x0133,
    /// `0134`
    /// 16-bit unsigned `Rx` = `Ry` / `Rz`; `34 01 Rx Ry Rz __ __ __`
    @"u_div16" = 0x0134,
    /// `0135`
    /// 32-bit unsigned `Rx` = `Ry` / `Rz`; `35 01 Rx Ry Rz __ __ __`
    @"u_div32" = 0x0135,
    /// `0136`
    /// 64-bit unsigned `Rx` = `Ry` / `Rz`; `36 01 Rx Ry Rz __ __ __`
    @"u_div64" = 0x0136,
    /// `0137`
    /// 8-bit unsigned `Rx` = `I` / `Ry`; `37 01 Rx Ry I. __ __ __`
    @"u_div8a" = 0x0137,
    /// `0138`
    /// 16-bit unsigned `Rx` = `I` / `Ry`; `38 01 Rx Ry I. .. __ __`
    @"u_div16a" = 0x0138,
    /// `0139`
    /// 32-bit unsigned `Rx` = `I` / `Ry`; `39 01 Rx Ry I. .. .. ..`
    @"u_div32a" = 0x0139,
    /// `013b`
    /// 8-bit unsigned `Rx` = `Ry` / `I`; `3b 01 Rx Ry I. __ __ __`
    @"u_div8b" = 0x013b,
    /// `013c`
    /// 16-bit unsigned `Rx` = `Ry` / `I`; `3c 01 Rx Ry I. .. __ __`
    @"u_div16b" = 0x013c,
    /// `013d`
    /// 32-bit unsigned `Rx` = `Ry` / `I`; `3d 01 Rx Ry I. .. .. ..`
    @"u_div32b" = 0x013d,
    /// `013f`
    /// 8-bit signed `Rx` = `Ry` / `Rz`; `3f 01 Rx Ry Rz __ __ __`
    @"s_div8" = 0x013f,
    /// `0140`
    /// 16-bit signed `Rx` = `Ry` / `Rz`; `40 01 Rx Ry Rz __ __ __`
    @"s_div16" = 0x0140,
    /// `0141`
    /// 32-bit signed `Rx` = `Ry` / `Rz`; `41 01 Rx Ry Rz __ __ __`
    @"s_div32" = 0x0141,
    /// `0142`
    /// 64-bit signed `Rx` = `Ry` / `Rz`; `42 01 Rx Ry Rz __ __ __`
    @"s_div64" = 0x0142,
    /// `0143`
    /// 8-bit signed `Rx` = `I` / `Ry`; `43 01 Rx Ry I. __ __ __`
    @"s_div8a" = 0x0143,
    /// `0144`
    /// 16-bit signed `Rx` = `I` / `Ry`; `44 01 Rx Ry I. .. __ __`
    @"s_div16a" = 0x0144,
    /// `0145`
    /// 32-bit signed `Rx` = `I` / `Ry`; `45 01 Rx Ry I. .. .. ..`
    @"s_div32a" = 0x0145,
    /// `0147`
    /// 8-bit signed `Rx` = `Ry` / `I`; `47 01 Rx Ry I. __ __ __`
    @"s_div8b" = 0x0147,
    /// `0148`
    /// 16-bit signed `Rx` = `Ry` / `I`; `48 01 Rx Ry I. .. __ __`
    @"s_div16b" = 0x0148,
    /// `0149`
    /// 32-bit signed `Rx` = `Ry` / `I`; `49 01 Rx Ry I. .. .. ..`
    @"s_div32b" = 0x0149,
    /// `014b`
    /// 8-bit unsigned `Rx` = `Ry` % `Rz`; `4b 01 Rx Ry Rz __ __ __`
    @"u_rem8" = 0x014b,
    /// `014c`
    /// 16-bit unsigned `Rx` = `Ry` % `Rz`; `4c 01 Rx Ry Rz __ __ __`
    @"u_rem16" = 0x014c,
    /// `014d`
    /// 32-bit unsigned `Rx` = `Ry` % `Rz`; `4d 01 Rx Ry Rz __ __ __`
    @"u_rem32" = 0x014d,
    /// `014e`
    /// 64-bit unsigned `Rx` = `Ry` % `Rz`; `4e 01 Rx Ry Rz __ __ __`
    @"u_rem64" = 0x014e,
    /// `014f`
    /// 8-bit unsigned `Rx` = `I` % `Ry`; `4f 01 Rx Ry I. __ __ __`
    @"u_rem8a" = 0x014f,
    /// `0150`
    /// 16-bit unsigned `Rx` = `I` % `Ry`; `50 01 Rx Ry I. .. __ __`
    @"u_rem16a" = 0x0150,
    /// `0151`
    /// 32-bit unsigned `Rx` = `I` % `Ry`; `51 01 Rx Ry I. .. .. ..`
    @"u_rem32a" = 0x0151,
    /// `0153`
    /// 8-bit unsigned `Rx` = `Ry` % `I`; `53 01 Rx Ry I. __ __ __`
    @"u_rem8b" = 0x0153,
    /// `0154`
    /// 16-bit unsigned `Rx` = `Ry` % `I`; `54 01 Rx Ry I. .. __ __`
    @"u_rem16b" = 0x0154,
    /// `0155`
    /// 32-bit unsigned `Rx` = `Ry` % `I`; `55 01 Rx Ry I. .. .. ..`
    @"u_rem32b" = 0x0155,
    /// `0157`
    /// 8-bit signed `Rx` = `Ry` % `Rz`; `57 01 Rx Ry Rz __ __ __`
    @"s_rem8" = 0x0157,
    /// `0158`
    /// 16-bit signed `Rx` = `Ry` % `Rz`; `58 01 Rx Ry Rz __ __ __`
    @"s_rem16" = 0x0158,
    /// `0159`
    /// 32-bit signed `Rx` = `Ry` % `Rz`; `59 01 Rx Ry Rz __ __ __`
    @"s_rem32" = 0x0159,
    /// `015a`
    /// 64-bit signed `Rx` = `Ry` % `Rz`; `5a 01 Rx Ry Rz __ __ __`
    @"s_rem64" = 0x015a,
    /// `015b`
    /// 8-bit signed `Rx` = `I` % `Ry`; `5b 01 Rx Ry I. __ __ __`
    @"s_rem8a" = 0x015b,
    /// `015c`
    /// 16-bit signed `Rx` = `I` % `Ry`; `5c 01 Rx Ry I. .. __ __`
    @"s_rem16a" = 0x015c,
    /// `015d`
    /// 32-bit signed `Rx` = `I` % `Ry`; `5d 01 Rx Ry I. .. .. ..`
    @"s_rem32a" = 0x015d,
    /// `015f`
    /// 8-bit signed `Rx` = `Ry` % `I`; `5f 01 Rx Ry I. __ __ __`
    @"s_rem8b" = 0x015f,
    /// `0160`
    /// 16-bit signed `Rx` = `Ry` % `I`; `60 01 Rx Ry I. .. __ __`
    @"s_rem16b" = 0x0160,
    /// `0161`
    /// 32-bit signed `Rx` = `Ry` % `I`; `61 01 Rx Ry I. .. .. ..`
    @"s_rem32b" = 0x0161,
    /// `0163`
    /// 8-bit `Rx` = `Ry` ** `Rz`; `63 01 Rx Ry Rz __ __ __`
    @"i_pow8" = 0x0163,
    /// `0164`
    /// 16-bit `Rx` = `Ry` ** `Rz`; `64 01 Rx Ry Rz __ __ __`
    @"i_pow16" = 0x0164,
    /// `0165`
    /// 32-bit `Rx` = `Ry` ** `Rz`; `65 01 Rx Ry Rz __ __ __`
    @"i_pow32" = 0x0165,
    /// `0166`
    /// 64-bit `Rx` = `Ry` ** `Rz`; `66 01 Rx Ry Rz __ __ __`
    @"i_pow64" = 0x0166,
    /// `0167`
    /// 8-bit `Rx` = `I` ** `Ry`; `67 01 Rx Ry I. __ __ __`
    @"i_pow8a" = 0x0167,
    /// `0168`
    /// 16-bit `Rx` = `I` ** `Ry`; `68 01 Rx Ry I. .. __ __`
    @"i_pow16a" = 0x0168,
    /// `0169`
    /// 32-bit `Rx` = `I` ** `Ry`; `69 01 Rx Ry I. .. .. ..`
    @"i_pow32a" = 0x0169,
    /// `016b`
    /// 8-bit `Rx` = `Ry` ** `I`; `6b 01 Rx Ry I. __ __ __`
    @"i_pow8b" = 0x016b,
    /// `016c`
    /// 16-bit `Rx` = `Ry` ** `I`; `6c 01 Rx Ry I. .. __ __`
    @"i_pow16b" = 0x016c,
    /// `016d`
    /// 32-bit `Rx` = `Ry` ** `I`; `6d 01 Rx Ry I. .. .. ..`
    @"i_pow32b" = 0x016d,
    /// `016f`
    /// 32-bit `Rx` = -`Ry`; `6f 01 Rx Ry __ __ __ __`
    @"f_neg32" = 0x016f,
    /// `0170`
    /// 64-bit `Rx` = -`Ry`; `70 01 Rx Ry __ __ __ __`
    @"f_neg64" = 0x0170,
    /// `0171`
    /// 32-bit `Rx` = \|`Ry`\|; `71 01 Rx Ry __ __ __ __`
    @"f_abs32" = 0x0171,
    /// `0172`
    /// 64-bit `Rx` = \|`Ry`\|; `72 01 Rx Ry __ __ __ __`
    @"f_abs64" = 0x0172,
    /// `0173`
    /// 32-bit `Rx` = sqrt(`Ry`); `73 01 Rx Ry __ __ __ __`
    @"f_sqrt32" = 0x0173,
    /// `0174`
    /// 64-bit `Rx` = sqrt(`Ry`); `74 01 Rx Ry __ __ __ __`
    @"f_sqrt64" = 0x0174,
    /// `0175`
    /// 32-bit `Rx` = floor(`Ry`); `75 01 Rx Ry __ __ __ __`
    @"f_floor32" = 0x0175,
    /// `0176`
    /// 64-bit `Rx` = floor(`Ry`); `76 01 Rx Ry __ __ __ __`
    @"f_floor64" = 0x0176,
    /// `0177`
    /// 32-bit `Rx` = ceil(`Ry`); `77 01 Rx Ry __ __ __ __`
    @"f_ceil32" = 0x0177,
    /// `0178`
    /// 64-bit `Rx` = ceil(`Ry`); `78 01 Rx Ry __ __ __ __`
    @"f_ceil64" = 0x0178,
    /// `0179`
    /// 32-bit `Rx` = round(`Ry`); `79 01 Rx Ry __ __ __ __`
    @"f_round32" = 0x0179,
    /// `017a`
    /// 64-bit `Rx` = round(`Ry`); `7a 01 Rx Ry __ __ __ __`
    @"f_round64" = 0x017a,
    /// `017b`
    /// 32-bit `Rx` = truncate(`Ry`); `7b 01 Rx Ry __ __ __ __`
    @"f_trunc32" = 0x017b,
    /// `017c`
    /// 64-bit `Rx` = truncate(`Ry`); `7c 01 Rx Ry __ __ __ __`
    @"f_trunc64" = 0x017c,
    /// `017d`
    /// 32-bit `Rx` = whole(`Ry`); `7d 01 Rx Ry __ __ __ __`
    @"f_whole32" = 0x017d,
    /// `017e`
    /// 64-bit `Rx` = whole(`Ry`); `7e 01 Rx Ry __ __ __ __`
    @"f_whole64" = 0x017e,
    /// `017f`
    /// 32-bit `Rx` = frac(`Ry`); `7f 01 Rx Ry __ __ __ __`
    @"f_frac32" = 0x017f,
    /// `0180`
    /// 64-bit `Rx` = frac(`Ry`); `80 01 Rx Ry __ __ __ __`
    @"f_frac64" = 0x0180,
    /// `0181`
    /// 32-bit `Rx` = `Ry` + `Rz`; `81 01 Rx Ry Rz __ __ __`
    @"f_add32" = 0x0181,
    /// `0182`
    /// 32-bit `Rx` = `Ry` + `I`; `82 01 Rx Ry I. .. .. ..`
    @"f_add32c" = 0x0182,
    /// `0183`
    /// 64-bit `Rx` = `Ry` + `Rz`; `83 01 Rx Ry Rz __ __ __`
    @"f_add64" = 0x0183,
    /// `0185`
    /// 32-bit `Rx` = `Ry` - `Rz`; `85 01 Rx Ry Rz __ __ __`
    @"f_sub32" = 0x0185,
    /// `0186`
    /// 32-bit `Rx` = `I` - `Ry`; `86 01 Rx Ry I. .. .. ..`
    @"f_sub32a" = 0x0186,
    /// `0187`
    /// 32-bit `Rx` = `Ry` - `I`; `87 01 Rx Ry I. .. .. ..`
    @"f_sub32b" = 0x0187,
    /// `0188`
    /// 64-bit `Rx` = `Ry` - `Rz`; `88 01 Rx Ry Rz __ __ __`
    @"f_sub64" = 0x0188,
    /// `018b`
    /// 32-bit `Rx` = `Ry` * `Rz`; `8b 01 Rx Ry Rz __ __ __`
    @"f_mul32" = 0x018b,
    /// `018c`
    /// 32-bit `Rx` = `Ry` * `I`; `8c 01 Rx Ry I. .. .. ..`
    @"f_mul32c" = 0x018c,
    /// `018d`
    /// 64-bit `Rx` = `Ry` * `Rz`; `8d 01 Rx Ry Rz __ __ __`
    @"f_mul64" = 0x018d,
    /// `018f`
    /// 32-bit `Rx` = `Ry` / `Rz`; `8f 01 Rx Ry Rz __ __ __`
    @"f_div32" = 0x018f,
    /// `0190`
    /// 32-bit `Rx` = `I` / `Ry`; `90 01 Rx Ry I. .. .. ..`
    @"f_div32a" = 0x0190,
    /// `0191`
    /// 32-bit `Rx` = `Ry` / `I`; `91 01 Rx Ry I. .. .. ..`
    @"f_div32b" = 0x0191,
    /// `0192`
    /// 64-bit `Rx` = `Ry` / `Rz`; `92 01 Rx Ry Rz __ __ __`
    @"f_div64" = 0x0192,
    /// `0195`
    /// 32-bit `Rx` = `Ry` % `Rz`; `95 01 Rx Ry Rz __ __ __`
    @"f_rem32" = 0x0195,
    /// `0196`
    /// 32-bit `Rx` = `I` % `Ry`; `96 01 Rx Ry I. .. .. ..`
    @"f_rem32a" = 0x0196,
    /// `0197`
    /// 32-bit `Rx` = `Ry` % `I`; `97 01 Rx Ry I. .. .. ..`
    @"f_rem32b" = 0x0197,
    /// `0198`
    /// 64-bit `Rx` = `Ry` % `Rz`; `98 01 Rx Ry Rz __ __ __`
    @"f_rem64" = 0x0198,
    /// `019b`
    /// 32-bit `Rx` = `Ry` ** `Rz`; `9b 01 Rx Ry Rz __ __ __`
    @"f_pow32" = 0x019b,
    /// `019c`
    /// 32-bit `Rx` = `I` ** `Ry`; `9c 01 Rx Ry I. .. .. ..`
    @"f_pow32a" = 0x019c,
    /// `019d`
    /// 32-bit `Rx` = `Ry` ** `I`; `9d 01 Rx Ry I. .. .. ..`
    @"f_pow32b" = 0x019d,
    /// `019e`
    /// 64-bit `Rx` = `Ry` ** `Rz`; `9e 01 Rx Ry Rz __ __ __`
    @"f_pow64" = 0x019e,
    /// `01a1`
    /// Sign extend 8-bits of `Ry` to 16-bits, placing the result in `Rx`; `a1 01 Rx Ry __ __ __ __`
    @"s_ext8_16" = 0x01a1,
    /// `01a2`
    /// Sign extend 8-bits of `Ry` to 32-bits, placing the result in `Rx`; `a2 01 Rx Ry __ __ __ __`
    @"s_ext8_32" = 0x01a2,
    /// `01a3`
    /// Sign extend 8-bits of `Ry` to 64-bits, placing the result in `Rx`; `a3 01 Rx Ry __ __ __ __`
    @"s_ext8_64" = 0x01a3,
    /// `01a4`
    /// Sign extend 16-bits of `Ry` to 32-bits, placing the result in `Rx`; `a4 01 Rx Ry __ __ __ __`
    @"s_ext16_32" = 0x01a4,
    /// `01a5`
    /// Sign extend 16-bits of `Ry` to 64-bits, placing the result in `Rx`; `a5 01 Rx Ry __ __ __ __`
    @"s_ext16_64" = 0x01a5,
    /// `01a6`
    /// Sign extend 32-bits of `Ry` to 64-bits, placing the result in `Rx`; `a6 01 Rx Ry __ __ __ __`
    @"s_ext32_64" = 0x01a6,
    /// `01a7`
    /// Convert of 32-bit float in `Ry` to 8-bit integer; discards sign, places the result in `Rx`; `a7 01 Rx Ry __ __ __ __`
    @"f32_to_u8" = 0x01a7,
    /// `01a8`
    /// Convert of 32-bit float in `Ry` to 16-bit integer; discards sign, places the result in `Rx`; `a8 01 Rx Ry __ __ __ __`
    @"f32_to_u16" = 0x01a8,
    /// `01a9`
    /// Convert of 32-bit float in `Ry` to 32-bit integer; discards sign, places the result in `Rx`; `a9 01 Rx Ry __ __ __ __`
    @"f32_to_u32" = 0x01a9,
    /// `01aa`
    /// Convert of 32-bit float in `Ry` to 64-bit integer; discards sign, places the result in `Rx`; `aa 01 Rx Ry __ __ __ __`
    @"f32_to_u64" = 0x01aa,
    /// `01ab`
    /// Convert of 32-bit float in `Ry` to 8-bit integer; keeps sign, places the result in `Rx`; `ab 01 Rx Ry __ __ __ __`
    @"f32_to_s8" = 0x01ab,
    /// `01ac`
    /// Convert of 32-bit float in `Ry` to 16-bit integer; keeps sign, places the result in `Rx`; `ac 01 Rx Ry __ __ __ __`
    @"f32_to_s16" = 0x01ac,
    /// `01ad`
    /// Convert of 32-bit float in `Ry` to 32-bit integer; keeps sign, places the result in `Rx`; `ad 01 Rx Ry __ __ __ __`
    @"f32_to_s32" = 0x01ad,
    /// `01ae`
    /// Convert of 32-bit float in `Ry` to 64-bit integer; keeps sign, places the result in `Rx`; `ae 01 Rx Ry __ __ __ __`
    @"f32_to_s64" = 0x01ae,
    /// `01af`
    /// Convert 8-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `af 01 Rx Ry __ __ __ __`
    @"u8_to_f32" = 0x01af,
    /// `01b0`
    /// Convert 16-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b0 01 Rx Ry __ __ __ __`
    @"u16_to_f32" = 0x01b0,
    /// `01b1`
    /// Convert 32-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b1 01 Rx Ry __ __ __ __`
    @"u32_to_f32" = 0x01b1,
    /// `01b2`
    /// Convert 64-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b2 01 Rx Ry __ __ __ __`
    @"u64_to_f32" = 0x01b2,
    /// `01b3`
    /// Convert 8-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b3 01 Rx Ry __ __ __ __`
    @"s8_to_f32" = 0x01b3,
    /// `01b4`
    /// Convert 16-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b4 01 Rx Ry __ __ __ __`
    @"s16_to_f32" = 0x01b4,
    /// `01b5`
    /// Convert 32-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b5 01 Rx Ry __ __ __ __`
    @"s32_to_f32" = 0x01b5,
    /// `01b6`
    /// Convert 64-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b6 01 Rx Ry __ __ __ __`
    @"s64_to_f32" = 0x01b6,
    /// `01b7`
    /// Convert 8-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b7 01 Rx Ry __ __ __ __`
    @"u8_to_f64" = 0x01b7,
    /// `01b8`
    /// Convert 16-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b8 01 Rx Ry __ __ __ __`
    @"u16_to_f64" = 0x01b8,
    /// `01b9`
    /// Convert 32-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b9 01 Rx Ry __ __ __ __`
    @"u32_to_f64" = 0x01b9,
    /// `01ba`
    /// Convert 64-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `ba 01 Rx Ry __ __ __ __`
    @"u64_to_f64" = 0x01ba,
    /// `01bb`
    /// Convert 8-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bb 01 Rx Ry __ __ __ __`
    @"s8_to_f64" = 0x01bb,
    /// `01bc`
    /// Convert 16-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bc 01 Rx Ry __ __ __ __`
    @"s16_to_f64" = 0x01bc,
    /// `01bd`
    /// Convert 32-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bd 01 Rx Ry __ __ __ __`
    @"s32_to_f64" = 0x01bd,
    /// `01be`
    /// Convert 64-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `be 01 Rx Ry __ __ __ __`
    @"s64_to_f64" = 0x01be,
    /// `01bf`
    /// Convert 32-bit float in `Ry` to 64-bit float; places the result in `Rx`; `bf 01 Rx Ry __ __ __ __`
    @"f32_to_f64" = 0x01bf,
    /// `01c0`
    /// Convert 64-bit float in `Ry` to 32-bit float; places the result in `Rx`; `c0 01 Rx Ry __ __ __ __`
    @"f64_to_f32" = 0x01c0,
};

/// Enumeration identifying each instruction.
pub const OpCode = enum(u16) {
    /// Downcast full opcode -> basic opcode | term opcode
    pub fn downcast(self: OpCode) union(enum) { basic: BasicOpCode, term: TermOpCode } {
        @setEvalBranchQuota(std.meta.fieldNames(OpCode).len * 4);

        inline for (comptime std.meta.fieldNames(BasicOpCode)) |fieldName| {
            if (self == comptime @field(BasicOpCode, fieldName).upcast()) {
                 return .{ .basic = @enumFromInt(@intFromEnum(self)) };
            }
        }

        inline for (comptime std.meta.fieldNames(TermOpCode)) |fieldName| {
            if (self == comptime @field(TermOpCode, fieldName).upcast()) {
                 return .{ .term = @enumFromInt(@intFromEnum(self)) };
            }
        }

        unreachable;
    }

    /// Determine if this OpCode's associated instruction is wider than a single word.
    pub fn isWide(code: OpCode) bool {
        const is_wide = [_]bool{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, true, true, false, false, false, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
        return is_wide[@intFromEnum(code)];
    }
    
    /// Determine if this OpCode's associated instruction is a call.
    pub fn isCall(code: OpCode) bool {
        const is_call = [_]bool{ false, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
        return is_call[@intFromEnum(code)];
    }
    
    /// Determine if this OpCode's associated instruction is a branch.
    pub fn isBranch(code: OpCode) bool {
        const is_branch = [_]bool{ false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
        return is_branch[@intFromEnum(code)];
    }
    
    /// Determine if this OpCode's associated instruction is can occur inside a basic block (not a terminator).
    pub fn isBasic(code: OpCode) bool {
        const is_basic = [_]bool{ true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, false, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, false, false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true };
        return is_basic[@intFromEnum(code)];
    }
    
    /// Determine if this OpCode's associated instruction is a terminator.
    pub fn isTerm(code: OpCode) bool {
        const is_term = [_]bool{ false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
        return is_term[@intFromEnum(code)];
    }

    /// `0000`
    /// No operation; `00 00 __ __ __ __ __ __`
    @"nop" = 0x0000,
    /// `0001`
    /// Triggers a breakpoint in debuggers; does nothing otherwise; `01 00 __ __ __ __ __ __`
    @"breakpoint" = 0x0001,
    /// `0002`
    /// Halts execution at this instruction offset; `02 00 __ __ __ __ __ __`
    @"halt" = 0x0002,
    /// `0003`
    /// Traps execution of the `Rvm.Fiber` at this instruction offset
    /// Unlike `unreachable`, this indicates expected behavior; optimizing compilers should *not* assume it is never reached; `03 00 __ __ __ __ __ __`
    @"trap" = 0x0003,
    /// `0004`
    /// Marks a point in the code as unreachable; if executed in Rvm, it is the same as `trap`
    /// Unlike `trap`, however, this indicates undefined behavior; optimizing compilers should assume it is never reached; `04 00 __ __ __ __ __ __`
    @"unreachable" = 0x0004,
    /// `0005`
    /// Pushes `H` onto the stack.
    /// The handlers in this set will be first in line for their effects' prompts until a corresponding `pop` operation.; `05 00 H. .. .. .. __ __`
    @"push_set" = 0x0005,
    /// `0006`
    /// Pops the top most `HandlerSetId` from the stack, restoring the previous if present; `06 00 __ __ __ __ __ __`
    @"pop_set" = 0x0006,
    /// `0007`
    /// Applies a signed integer offset `I` to the instruction pointer; `07 00 I. .. .. .. __ __`
    @"br" = 0x0007,
    /// `0008`
    /// Applies a signed integer offset `I` to the instruction pointer, if the value stored in `R` is non-zero; `08 00 R. I. .. .. .. __`
    @"br_if" = 0x0008,
    /// `0009`
    /// Calls the bytecode or builtin function in `Ry` using `I` argument registers, placing the result in `Rx`; `09 00 Rx Ry I. __ __ __ + ...`
    @"call" = 0x0009,
    /// `000a`
    /// Calls the bytecode or builtin function at `F` using `I` argument registers, placing the result in `R`; `0a 00 R. F. .. .. .. I. + ...`
    @"call_c" = 0x000a,
    /// `000b`
    /// Calls the foreign function in `Ry` using `I` argument registers, placing the result in `Rx`; `0b 00 Rx Ry I. __ __ __ + ...`
    @"f_call" = 0x000b,
    /// `000c`
    /// Calls the foreign function at `X` using `I` argument registers, placing the result in `R`; `0c 00 R. X. .. .. .. I. + ...`
    @"f_call_c" = 0x000c,
    /// `000d`
    /// Calls the bytecode or builtin effect handler designated by `E` using `I` argument registers, placing the result in `R`.; `0d 00 R. E. .. .. .. I. + ...`
    @"prompt" = 0x000d,
    /// `000e`
    /// Returns flow control to the caller of current function, yielding `R` to the caller; `0e 00 R. __ __ __ __ __`
    @"return" = 0x000e,
    /// `000f`
    /// Returns flow control to the offset associated with the current effect handler's `HandlerSetId`, yielding `R` as the cancellation value; `0f 00 R. __ __ __ __ __`
    @"cancel" = 0x000f,
    /// `0010`
    /// Each byte, starting from the address in `Rx`, up to an offset of `Rz`, is set to the least significant byte of `Ry`; `10 00 Rx Ry Rz __ __ __`
    @"mem_set" = 0x0010,
    /// `0011`
    /// Each byte, starting from the address in `Rx`, up to an offset of `I`, is set to `Ry`; `11 00 Rx Ry I. .. .. ..`
    @"mem_set_a" = 0x0011,
    /// `0012`
    /// Each byte, starting from the address in `Rx`, up to an offset of `Ry`, is set to `I`; `12 00 Rx Ry I. __ __ __`
    @"mem_set_b" = 0x0012,
    /// `0013`
    /// Each byte, starting from the address in `Ry`, up to an offset of `Rz`, is copied to the same offset of the address in `Rx`; `13 00 Rx Ry Rz __ __ __`
    @"mem_copy" = 0x0013,
    /// `0014`
    /// Each byte, starting from the address in `Ry`, up to an offset of `I`, is copied to the same offset from the address in `Rx`; `14 00 Rx Ry I. .. .. ..`
    @"mem_copy_a" = 0x0014,
    /// `0015`
    /// Each byte, starting from the address of `C`, up to an offset of `Ry`, is copied to the same offset from the address in `Rx`; `15 00 Rx Ry C. .. .. ..`
    @"mem_copy_b" = 0x0015,
    /// `0016`
    /// Each byte, starting from the addresses in `Rx` and `Ry`, up to an offset of `Rz`, are swapped with each-other; `16 00 Rx Ry Rz __ __ __`
    @"mem_swap" = 0x0016,
    /// `0017`
    /// Each byte, starting from the addresses in `Rx` and `Ry`, up to an offset of `I`, are swapped with each-other; `17 00 Rx Ry I. .. .. ..`
    @"mem_swap_c" = 0x0017,
    /// `0018`
    /// Get the address of a signed integer frame-relative operand stack offset `I`, placing it in `R`.
    /// 
    /// An operand stack offset of 1 is equivalent to 8 bytes down from the base of the stack frame; `18 00 R. I. .. .. .. __`
    @"addr_l" = 0x0018,
    /// `0019`
    /// Get the address of `U`, placing it in `R`; `19 00 R. U. __ __ __ __`
    @"addr_u" = 0x0019,
    /// `001a`
    /// Get the address of `G`, placing it in `R`; `1a 00 R. G. .. .. .. __`
    @"addr_g" = 0x001a,
    /// `001b`
    /// Get the address of `F`, placing it in `R`; `1b 00 R. F. .. .. .. __`
    @"addr_f" = 0x001b,
    /// `001c`
    /// Get the address of `B`, placing it in `R`; `1c 00 R. B. .. .. .. __`
    @"addr_b" = 0x001c,
    /// `001d`
    /// Get the address of `X`, placing it in `R`; `1d 00 R. X. .. .. .. __`
    @"addr_x" = 0x001d,
    /// `001e`
    /// Get the address of `C`, placing it in `R`; `1e 00 R. C. .. .. .. __`
    @"addr_c" = 0x001e,
    /// `001f`
    /// Loads an 8-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `1f 00 Rx Ry I. .. .. ..`
    @"load8" = 0x001f,
    /// `0020`
    /// Loads a 16-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `20 00 Rx Ry I. .. .. ..`
    @"load16" = 0x0020,
    /// `0021`
    /// Loads a 32-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `21 00 Rx Ry I. .. .. ..`
    @"load32" = 0x0021,
    /// `0022`
    /// Loads a 64-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `22 00 Rx Ry I. .. .. ..`
    @"load64" = 0x0022,
    /// `0023`
    /// Stores an 8-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `23 00 Rx Ry I. .. .. ..`
    @"store8" = 0x0023,
    /// `0024`
    /// Stores a 16-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `24 00 Rx Ry I. .. .. ..`
    @"store16" = 0x0024,
    /// `0025`
    /// Stores a 32-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `25 00 Rx Ry I. .. .. ..`
    @"store32" = 0x0025,
    /// `0026`
    /// Stores a 64-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `26 00 Rx Ry I. .. .. ..`
    @"store64" = 0x0026,
    /// `0027`
    /// Stores an 8-bit value to memory at the address in `R` offset by `Iy`; `27 00 R. Ix Iy .. .. ..`
    @"store8c" = 0x0027,
    /// `0028`
    /// Stores a 16-bit value to memory at the address in `R` offset by `Iy`; `28 00 R. __ __ __ __ __ + Ix .. Iy .. .. .. __ __`
    @"store16c" = 0x0028,
    /// `0029`
    /// Stores a 32-bit value to memory at the address in `R` offset by `Iy`; `29 00 R. __ __ __ __ __ + Ix .. .. .. Iy .. .. ..`
    @"store32c" = 0x0029,
    /// `002a`
    /// Stores a 64-bit value (encoded as `Iy`) to memory at the address in `R` offset by `Ix`; `2a 00 R. Ix .. .. .. __ + Iy .. .. .. .. .. .. ..`
    @"store64c" = 0x002a,
    /// `002b`
    /// 8-bit `Rx` ⇔ `Ry`; `2b 00 Rx Ry __ __ __ __`
    @"bit_swap8" = 0x002b,
    /// `002c`
    /// 16-bit `Rx` ⇔ `Ry`; `2c 00 Rx Ry __ __ __ __`
    @"bit_swap16" = 0x002c,
    /// `002d`
    /// 32-bit `Rx` ⇔ `Ry`; `2d 00 Rx Ry __ __ __ __`
    @"bit_swap32" = 0x002d,
    /// `002e`
    /// 64-bit `Rx` ⇔ `Ry`; `2e 00 Rx Ry __ __ __ __`
    @"bit_swap64" = 0x002e,
    /// `002f`
    /// 8-bit `Rx` = `Ry`; `2f 00 Rx Ry __ __ __ __`
    @"bit_copy8" = 0x002f,
    /// `0030`
    /// 16-bit `Rx` = `Ry`; `30 00 Rx Ry __ __ __ __`
    @"bit_copy16" = 0x0030,
    /// `0031`
    /// 32-bit `Rx` = `Ry`; `31 00 Rx Ry __ __ __ __`
    @"bit_copy32" = 0x0031,
    /// `0032`
    /// 64-bit `Rx` = `Ry`; `32 00 Rx Ry __ __ __ __`
    @"bit_copy64" = 0x0032,
    /// `0033`
    /// Copies an 8-bit `I` value into `R`; `33 00 R. I. __ __ __ __`
    @"bit_copy8c" = 0x0033,
    /// `0034`
    /// Copies a 16-bit `I` value into `R`; `34 00 R. I. .. __ __ __`
    @"bit_copy16c" = 0x0034,
    /// `0035`
    /// Copies a 32-bit `I` value into `R`; `35 00 R. I. .. .. .. __`
    @"bit_copy32c" = 0x0035,
    /// `0036`
    /// Copies a 64-bit `I` value into `R`; `36 00 R. __ __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_copy64c" = 0x0036,
    /// `0037`
    /// Counts the leading zeroes in 8-bits of `Ry`, placing the result in `Rx`; `37 00 Rx Ry __ __ __ __`
    @"bit_clz8" = 0x0037,
    /// `0038`
    /// Counts the leading zeroes in 16-bits of `Ry`, placing the result in `Rx`; `38 00 Rx Ry __ __ __ __`
    @"bit_clz16" = 0x0038,
    /// `0039`
    /// Counts the leading zeroes in 32-bits of `Ry`, placing the result in `Rx`; `39 00 Rx Ry __ __ __ __`
    @"bit_clz32" = 0x0039,
    /// `003a`
    /// Counts the leading zeroes in 64-bits of `Ry`, placing the result in `Rx`; `3a 00 Rx Ry __ __ __ __`
    @"bit_clz64" = 0x003a,
    /// `003b`
    /// Counts the set bits in 8-bits of `Ry`, placing the result in `Rx`; `3b 00 Rx Ry __ __ __ __`
    @"bit_pop8" = 0x003b,
    /// `003c`
    /// Counts the set bits in 16-bits of `Ry`, placing the result in `Rx`; `3c 00 Rx Ry __ __ __ __`
    @"bit_pop16" = 0x003c,
    /// `003d`
    /// Counts the set bits in 32-bits of `Ry`, placing the result in `Rx`; `3d 00 Rx Ry __ __ __ __`
    @"bit_pop32" = 0x003d,
    /// `003e`
    /// Counts the set bits in 64-bits of `Ry`, placing the result in `Rx`; `3e 00 Rx Ry __ __ __ __`
    @"bit_pop64" = 0x003e,
    /// `003f`
    /// 8-bit `Rx` = ~`Ry`; `3f 00 Rx Ry __ __ __ __`
    @"bit_not8" = 0x003f,
    /// `0040`
    /// 16-bit `Rx` = ~`Ry`; `40 00 Rx Ry __ __ __ __`
    @"bit_not16" = 0x0040,
    /// `0041`
    /// 32-bit `Rx` = ~`Ry`; `41 00 Rx Ry __ __ __ __`
    @"bit_not32" = 0x0041,
    /// `0042`
    /// 64-bit `Rx` = ~`Ry`; `42 00 Rx Ry __ __ __ __`
    @"bit_not64" = 0x0042,
    /// `0043`
    /// 8-bit `Rx` = `Ry` & `Rz`; `43 00 Rx Ry Rz __ __ __`
    @"bit_and8" = 0x0043,
    /// `0044`
    /// 16-bit `Rx` = `Ry` & `Rz`; `44 00 Rx Ry Rz __ __ __`
    @"bit_and16" = 0x0044,
    /// `0045`
    /// 32-bit `Rx` = `Ry` & `Rz`; `45 00 Rx Ry Rz __ __ __`
    @"bit_and32" = 0x0045,
    /// `0046`
    /// 64-bit `Rx` = `Ry` & `Rz`; `46 00 Rx Ry Rz __ __ __`
    @"bit_and64" = 0x0046,
    /// `0047`
    /// 8-bit `Rx` = `Ry` & `I`; `47 00 Rx Ry I. __ __ __`
    @"bit_and8c" = 0x0047,
    /// `0048`
    /// 16-bit `Rx` = `Ry` & `I`; `48 00 Rx Ry I. .. __ __`
    @"bit_and16c" = 0x0048,
    /// `0049`
    /// 32-bit `Rx` = `Ry` & `I`; `49 00 Rx Ry I. .. .. ..`
    @"bit_and32c" = 0x0049,
    /// `004a`
    /// 64-bit `Rx` = `Ry` & `I`; `4a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_and64c" = 0x004a,
    /// `004b`
    /// 8-bit `Rx` = `Ry` \| `Rz`; `4b 00 Rx Ry Rz __ __ __`
    @"bit_or8" = 0x004b,
    /// `004c`
    /// 16-bit `Rx` = `Ry` \| `Rz`; `4c 00 Rx Ry Rz __ __ __`
    @"bit_or16" = 0x004c,
    /// `004d`
    /// 32-bit `Rx` = `Ry` \| `Rz`; `4d 00 Rx Ry Rz __ __ __`
    @"bit_or32" = 0x004d,
    /// `004e`
    /// 64-bit `Rx` = `Ry` \| `Rz`; `4e 00 Rx Ry Rz __ __ __`
    @"bit_or64" = 0x004e,
    /// `004f`
    /// 8-bit `Rx` = `Ry` \| `I`; `4f 00 Rx Ry I. __ __ __`
    @"bit_or8c" = 0x004f,
    /// `0050`
    /// 16-bit `Rx` = `Ry` \| `I`; `50 00 Rx Ry I. .. __ __`
    @"bit_or16c" = 0x0050,
    /// `0051`
    /// 32-bit `Rx` = `Ry` \| `I`; `51 00 Rx Ry I. .. .. ..`
    @"bit_or32c" = 0x0051,
    /// `0052`
    /// 64-bit `Rx` = `Ry` \| `I`; `52 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_or64c" = 0x0052,
    /// `0053`
    /// 8-bit `Rx` = `Ry` ^ `Rz`; `53 00 Rx Ry Rz __ __ __`
    @"bit_xor8" = 0x0053,
    /// `0054`
    /// 16-bit `Rx` = `Ry` ^ `Rz`; `54 00 Rx Ry Rz __ __ __`
    @"bit_xor16" = 0x0054,
    /// `0055`
    /// 32-bit `Rx` = `Ry` ^ `Rz`; `55 00 Rx Ry Rz __ __ __`
    @"bit_xor32" = 0x0055,
    /// `0056`
    /// 64-bit `Rx` = `Ry` ^ `Rz`; `56 00 Rx Ry Rz __ __ __`
    @"bit_xor64" = 0x0056,
    /// `0057`
    /// 8-bit `Rx` = `Ry` ^ `I`; `57 00 Rx Ry I. __ __ __`
    @"bit_xor8c" = 0x0057,
    /// `0058`
    /// 16-bit `Rx` = `Ry` ^ `I`; `58 00 Rx Ry I. .. __ __`
    @"bit_xor16c" = 0x0058,
    /// `0059`
    /// 32-bit `Rx` = `Ry` ^ `I`; `59 00 Rx Ry I. .. .. ..`
    @"bit_xor32c" = 0x0059,
    /// `005a`
    /// 64-bit `Rx` = `Ry` ^ `I`; `5a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_xor64c" = 0x005a,
    /// `005b`
    /// 8-bit `Rx` = `Ry` << `Rz`; `5b 00 Rx Ry Rz __ __ __`
    @"bit_lshift8" = 0x005b,
    /// `005c`
    /// 16-bit `Rx` = `Ry` << `Rz`; `5c 00 Rx Ry Rz __ __ __`
    @"bit_lshift16" = 0x005c,
    /// `005d`
    /// 32-bit `Rx` = `Ry` << `Rz`; `5d 00 Rx Ry Rz __ __ __`
    @"bit_lshift32" = 0x005d,
    /// `005e`
    /// 64-bit `Rx` = `Ry` << `Rz`; `5e 00 Rx Ry Rz __ __ __`
    @"bit_lshift64" = 0x005e,
    /// `005f`
    /// 8-bit `Rx` = `I` << `Ry`; `5f 00 Rx Ry I. __ __ __`
    @"bit_lshift8a" = 0x005f,
    /// `0060`
    /// 16-bit `Rx` = `I` << `Ry`; `60 00 Rx Ry I. .. __ __`
    @"bit_lshift16a" = 0x0060,
    /// `0061`
    /// 32-bit `Rx` = `I` << `Ry`; `61 00 Rx Ry I. .. .. ..`
    @"bit_lshift32a" = 0x0061,
    /// `0062`
    /// 64-bit `Rx` = `I` << `Ry`; `62 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_lshift64a" = 0x0062,
    /// `0063`
    /// 8-bit `Rx` = `Ry` << `I`; `63 00 Rx Ry I. __ __ __`
    @"bit_lshift8b" = 0x0063,
    /// `0064`
    /// 16-bit `Rx` = `Ry` << `I`; `64 00 Rx Ry I. __ __ __`
    @"bit_lshift16b" = 0x0064,
    /// `0065`
    /// 32-bit `Rx` = `Ry` << `I`; `65 00 Rx Ry I. __ __ __`
    @"bit_lshift32b" = 0x0065,
    /// `0066`
    /// 64-bit `Rx` = `Ry` << `I`; `66 00 Rx Ry I. __ __ __`
    @"bit_lshift64b" = 0x0066,
    /// `0067`
    /// 8-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `67 00 Rx Ry Rz __ __ __`
    @"u_rshift8" = 0x0067,
    /// `0068`
    /// 16-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `68 00 Rx Ry Rz __ __ __`
    @"u_rshift16" = 0x0068,
    /// `0069`
    /// 32-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `69 00 Rx Ry Rz __ __ __`
    @"u_rshift32" = 0x0069,
    /// `006a`
    /// 64-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `6a 00 Rx Ry Rz __ __ __`
    @"u_rshift64" = 0x006a,
    /// `006b`
    /// 8-bit unsigned/logical `Rx` = `I` >> `Ry`; `6b 00 Rx Ry I. __ __ __`
    @"u_rshift8a" = 0x006b,
    /// `006c`
    /// 16-bit unsigned/logical `Rx` = `I` >> `Ry`; `6c 00 Rx Ry I. .. __ __`
    @"u_rshift16a" = 0x006c,
    /// `006d`
    /// 32-bit unsigned/logical `Rx` = `I` >> `Ry`; `6d 00 Rx Ry I. .. .. ..`
    @"u_rshift32a" = 0x006d,
    /// `006e`
    /// 64-bit unsigned/logical `Rx` = `I` >> `Ry`; `6e 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_rshift64a" = 0x006e,
    /// `006f`
    /// 8-bit unsigned/logical `Rx` = `Ry` >> `I`; `6f 00 Rx Ry I. __ __ __`
    @"u_rshift8b" = 0x006f,
    /// `0070`
    /// 16-bit unsigned/logical `Rx` = `Ry` >> `I`; `70 00 Rx Ry I. __ __ __`
    @"u_rshift16b" = 0x0070,
    /// `0071`
    /// 32-bit unsigned/logical `Rx` = `Ry` >> `I`; `71 00 Rx Ry I. __ __ __`
    @"u_rshift32b" = 0x0071,
    /// `0072`
    /// 64-bit unsigned/logical `Rx` = `Ry` >> `I`; `72 00 Rx Ry I. __ __ __`
    @"u_rshift64b" = 0x0072,
    /// `0073`
    /// 8-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `73 00 Rx Ry Rz __ __ __`
    @"s_rshift8" = 0x0073,
    /// `0074`
    /// 16-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `74 00 Rx Ry Rz __ __ __`
    @"s_rshift16" = 0x0074,
    /// `0075`
    /// 32-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `75 00 Rx Ry Rz __ __ __`
    @"s_rshift32" = 0x0075,
    /// `0076`
    /// 64-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `76 00 Rx Ry Rz __ __ __`
    @"s_rshift64" = 0x0076,
    /// `0077`
    /// 8-bit signed/arithmetic `Rx` = `I` >> `Ry`; `77 00 Rx Ry I. __ __ __`
    @"s_rshift8a" = 0x0077,
    /// `0078`
    /// 16-bit signed/arithmetic `Rx` = `I` >> `Ry`; `78 00 Rx Ry I. .. __ __`
    @"s_rshift16a" = 0x0078,
    /// `0079`
    /// 32-bit signed/arithmetic `Rx` = `I` >> `Ry`; `79 00 Rx Ry I. .. .. ..`
    @"s_rshift32a" = 0x0079,
    /// `007a`
    /// 64-bit signed/arithmetic `Rx` = `I` >> `Ry`; `7a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_rshift64a" = 0x007a,
    /// `007b`
    /// 8-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7b 00 Rx Ry I. __ __ __`
    @"s_rshift8b" = 0x007b,
    /// `007c`
    /// 16-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7c 00 Rx Ry I. __ __ __`
    @"s_rshift16b" = 0x007c,
    /// `007d`
    /// 32-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7d 00 Rx Ry I. __ __ __`
    @"s_rshift32b" = 0x007d,
    /// `007e`
    /// 64-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7e 00 Rx Ry I. __ __ __`
    @"s_rshift64b" = 0x007e,
    /// `007f`
    /// 8-bit integer `Rx` = `Ry` == `Rz`; `7f 00 Rx Ry Rz __ __ __`
    @"i_eq8" = 0x007f,
    /// `0080`
    /// 16-bit integer `Rx` = `Ry` == `Rz`; `80 00 Rx Ry Rz __ __ __`
    @"i_eq16" = 0x0080,
    /// `0081`
    /// 32-bit integer `Rx` = `Ry` == `Rz`; `81 00 Rx Ry Rz __ __ __`
    @"i_eq32" = 0x0081,
    /// `0082`
    /// 64-bit integer `Rx` = `Ry` == `Rz`; `82 00 Rx Ry Rz __ __ __`
    @"i_eq64" = 0x0082,
    /// `0083`
    /// 8-bit integer `Rx` = `Ry` == `I`; `83 00 Rx Ry I. __ __ __`
    @"i_eq8c" = 0x0083,
    /// `0084`
    /// 16-bit integer `Rx` = `Ry` == `I`; `84 00 Rx Ry I. .. __ __`
    @"i_eq16c" = 0x0084,
    /// `0085`
    /// 32-bit integer `Rx` = `Ry` == `I`; `85 00 Rx Ry I. .. .. ..`
    @"i_eq32c" = 0x0085,
    /// `0086`
    /// 64-bit integer `Rx` = `Ry` == `I`; `86 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_eq64c" = 0x0086,
    /// `0087`
    /// 32-bit floating point `Rx` = `Ry` == `Rz`; `87 00 Rx Ry Rz __ __ __`
    @"f_eq32" = 0x0087,
    /// `0088`
    /// 64-bit floating point `Rx` = `Ry` == `Rz`; `88 00 Rx Ry Rz __ __ __`
    @"f_eq64" = 0x0088,
    /// `0089`
    /// 32-bit floating point `Rx` = `Ry` == `I`; `89 00 Rx Ry I. .. .. ..`
    @"f_eq32c" = 0x0089,
    /// `008a`
    /// 64-bit floating point `Rx` = `Ry` == `I`; `8a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_eq64c" = 0x008a,
    /// `008b`
    /// 8-bit integer `Rx` = `Ry` != `Rz`; `8b 00 Rx Ry Rz __ __ __`
    @"i_ne8" = 0x008b,
    /// `008c`
    /// 16-bit integer `Rx` = `Ry` != `Rz`; `8c 00 Rx Ry Rz __ __ __`
    @"i_ne16" = 0x008c,
    /// `008d`
    /// 32-bit integer `Rx` = `Ry` != `Rz`; `8d 00 Rx Ry Rz __ __ __`
    @"i_ne32" = 0x008d,
    /// `008e`
    /// 64-bit integer `Rx` = `Ry` != `Rz`; `8e 00 Rx Ry Rz __ __ __`
    @"i_ne64" = 0x008e,
    /// `008f`
    /// 8-bit integer `Rx` = `Ry` != `I`; `8f 00 Rx Ry I. __ __ __`
    @"i_ne8c" = 0x008f,
    /// `0090`
    /// 16-bit integer `Rx` = `Ry` != `I`; `90 00 Rx Ry I. .. __ __`
    @"i_ne16c" = 0x0090,
    /// `0091`
    /// 32-bit integer `Rx` = `Ry` != `I`; `91 00 Rx Ry I. .. .. ..`
    @"i_ne32c" = 0x0091,
    /// `0092`
    /// 64-bit integer `Rx` = `Ry` != `I`; `92 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_ne64c" = 0x0092,
    /// `0093`
    /// 32-bit floating point `Rx` = `Ry` != `Rz`; `93 00 Rx Ry Rz __ __ __`
    @"f_ne32" = 0x0093,
    /// `0094`
    /// 64-bit floating point `Rx` = `Ry` != `Rz`; `94 00 Rx Ry Rz __ __ __`
    @"f_ne64" = 0x0094,
    /// `0095`
    /// 32-bit floating point `Rx` = `Ry` != `I`; `95 00 Rx Ry I. .. .. ..`
    @"f_ne32c" = 0x0095,
    /// `0096`
    /// 64-bit floating point `Rx` = `Ry` != `I`; `96 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_ne64c" = 0x0096,
    /// `0097`
    /// 8-bit unsigned integer `Rx` = `Ry` < `Rz`; `97 00 Rx Ry Rz __ __ __`
    @"u_lt8" = 0x0097,
    /// `0098`
    /// 16-bit unsigned integer `Rx` = `Ry` < `Rz`; `98 00 Rx Ry Rz __ __ __`
    @"u_lt16" = 0x0098,
    /// `0099`
    /// 32-bit unsigned integer `Rx` = `Ry` < `Rz`; `99 00 Rx Ry Rz __ __ __`
    @"u_lt32" = 0x0099,
    /// `009a`
    /// 64-bit unsigned integer `Rx` = `Ry` < `Rz`; `9a 00 Rx Ry Rz __ __ __`
    @"u_lt64" = 0x009a,
    /// `009b`
    /// 8-bit unsigned integer `Rx` = `I` < `Ry`; `9b 00 Rx Ry I. __ __ __`
    @"u_lt8a" = 0x009b,
    /// `009c`
    /// 16-bit unsigned integer `Rx` = `I` < `Ry`; `9c 00 Rx Ry I. .. __ __`
    @"u_lt16a" = 0x009c,
    /// `009d`
    /// 32-bit unsigned integer `Rx` = `I` < `Ry`; `9d 00 Rx Ry I. .. .. ..`
    @"u_lt32a" = 0x009d,
    /// `009e`
    /// 64-bit unsigned integer `Rx` = `I` < `Ry`; `9e 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_lt64a" = 0x009e,
    /// `009f`
    /// 8-bit unsigned integer `Rx` = `Ry` < `I`; `9f 00 Rx Ry I. __ __ __`
    @"u_lt8b" = 0x009f,
    /// `00a0`
    /// 16-bit unsigned integer `Rx` = `Ry` < `I`; `a0 00 Rx Ry I. .. __ __`
    @"u_lt16b" = 0x00a0,
    /// `00a1`
    /// 32-bit unsigned integer `Rx` = `Ry` < `I`; `a1 00 Rx Ry I. .. .. ..`
    @"u_lt32b" = 0x00a1,
    /// `00a2`
    /// 64-bit unsigned integer `Rx` = `Ry` < `I`; `a2 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_lt64b" = 0x00a2,
    /// `00a3`
    /// 8-bit signed integer `Rx` = `Ry` < `Rz`; `a3 00 Rx Ry Rz __ __ __`
    @"s_lt8" = 0x00a3,
    /// `00a4`
    /// 16-bit signed integer `Rx` = `Ry` < `Rz`; `a4 00 Rx Ry Rz __ __ __`
    @"s_lt16" = 0x00a4,
    /// `00a5`
    /// 32-bit signed integer `Rx` = `Ry` < `Rz`; `a5 00 Rx Ry Rz __ __ __`
    @"s_lt32" = 0x00a5,
    /// `00a6`
    /// 64-bit signed integer `Rx` = `Ry` < `Rz`; `a6 00 Rx Ry Rz __ __ __`
    @"s_lt64" = 0x00a6,
    /// `00a7`
    /// 8-bit signed integer `Rx` = `I` < `Ry`; `a7 00 Rx Ry I. __ __ __`
    @"s_lt8a" = 0x00a7,
    /// `00a8`
    /// 16-bit signed integer `Rx` = `I` < `Ry`; `a8 00 Rx Ry I. .. __ __`
    @"s_lt16a" = 0x00a8,
    /// `00a9`
    /// 32-bit signed integer `Rx` = `I` < `Ry`; `a9 00 Rx Ry I. .. .. ..`
    @"s_lt32a" = 0x00a9,
    /// `00aa`
    /// 64-bit signed integer `Rx` = `I` < `Ry`; `aa 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_lt64a" = 0x00aa,
    /// `00ab`
    /// 8-bit signed integer `Rx` = `Ry` < `I`; `ab 00 Rx Ry I. __ __ __`
    @"s_lt8b" = 0x00ab,
    /// `00ac`
    /// 16-bit signed integer `Rx` = `Ry` < `I`; `ac 00 Rx Ry I. .. __ __`
    @"s_lt16b" = 0x00ac,
    /// `00ad`
    /// 32-bit signed integer `Rx` = `Ry` < `I`; `ad 00 Rx Ry I. .. .. ..`
    @"s_lt32b" = 0x00ad,
    /// `00ae`
    /// 64-bit signed integer `Rx` = `Ry` < `I`; `ae 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_lt64b" = 0x00ae,
    /// `00af`
    /// 32-bit floating point `Rx` = `Ry` < `Rz`; `af 00 Rx Ry Rz __ __ __`
    @"f_lt32" = 0x00af,
    /// `00b0`
    /// 32-bit floating point `Rx` = `I` < `Ry`; `b0 00 Rx Ry I. .. .. ..`
    @"f_lt32a" = 0x00b0,
    /// `00b1`
    /// 32-bit floating point `Rx` = `Ry` < `I`; `b1 00 Rx Ry I. .. .. ..`
    @"f_lt32b" = 0x00b1,
    /// `00b2`
    /// 64-bit floating point `Rx` = `Ry` < `Rz`; `b2 00 Rx Ry Rz __ __ __`
    @"f_lt64" = 0x00b2,
    /// `00b3`
    /// 64-bit floating point `Rx` = `I` < `Ry`; `b3 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_lt64a" = 0x00b3,
    /// `00b4`
    /// 64-bit floating point `Rx` = `Ry` < `I`; `b4 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_lt64b" = 0x00b4,
    /// `00b5`
    /// 8-bit unsigned integer `Rx` = `Ry` > `Rz`; `b5 00 Rx Ry Rz __ __ __`
    @"u_gt8" = 0x00b5,
    /// `00b6`
    /// 16-bit unsigned integer `Rx` = `Ry` > `Rz`; `b6 00 Rx Ry Rz __ __ __`
    @"u_gt16" = 0x00b6,
    /// `00b7`
    /// 32-bit unsigned integer `Rx` = `Ry` > `Rz`; `b7 00 Rx Ry Rz __ __ __`
    @"u_gt32" = 0x00b7,
    /// `00b8`
    /// 64-bit unsigned integer `Rx` = `Ry` > `Rz`; `b8 00 Rx Ry Rz __ __ __`
    @"u_gt64" = 0x00b8,
    /// `00b9`
    /// 8-bit unsigned integer `Rx` = `I` > `Ry`; `b9 00 Rx Ry I. __ __ __`
    @"u_gt8a" = 0x00b9,
    /// `00ba`
    /// 16-bit unsigned integer `Rx` = `I` > `Ry`; `ba 00 Rx Ry I. .. __ __`
    @"u_gt16a" = 0x00ba,
    /// `00bb`
    /// 32-bit unsigned integer `Rx` = `I` > `Ry`; `bb 00 Rx Ry I. .. .. ..`
    @"u_gt32a" = 0x00bb,
    /// `00bc`
    /// 64-bit unsigned integer `Rx` = `I` > `Ry`; `bc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_gt64a" = 0x00bc,
    /// `00bd`
    /// 8-bit unsigned integer `Rx` = `Ry` > `I`; `bd 00 Rx Ry I. __ __ __`
    @"u_gt8b" = 0x00bd,
    /// `00be`
    /// 16-bit unsigned integer `Rx` = `Ry` > `I`; `be 00 Rx Ry I. .. __ __`
    @"u_gt16b" = 0x00be,
    /// `00bf`
    /// 32-bit unsigned integer `Rx` = `Ry` > `I`; `bf 00 Rx Ry I. .. .. ..`
    @"u_gt32b" = 0x00bf,
    /// `00c0`
    /// 64-bit unsigned integer `Rx` = `Ry` > `I`; `c0 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_gt64b" = 0x00c0,
    /// `00c1`
    /// 8-bit signed integer `Rx` = `Ry` > `Rz`; `c1 00 Rx Ry Rz __ __ __`
    @"s_gt8" = 0x00c1,
    /// `00c2`
    /// 16-bit signed integer `Rx` = `Ry` > `Rz`; `c2 00 Rx Ry Rz __ __ __`
    @"s_gt16" = 0x00c2,
    /// `00c3`
    /// 32-bit signed integer `Rx` = `Ry` > `Rz`; `c3 00 Rx Ry Rz __ __ __`
    @"s_gt32" = 0x00c3,
    /// `00c4`
    /// 64-bit signed integer `Rx` = `Ry` > `Rz`; `c4 00 Rx Ry Rz __ __ __`
    @"s_gt64" = 0x00c4,
    /// `00c5`
    /// 8-bit signed integer `Rx` = `I` > `Ry`; `c5 00 Rx Ry I. __ __ __`
    @"s_gt8a" = 0x00c5,
    /// `00c6`
    /// 16-bit signed integer `Rx` = `I` > `Ry`; `c6 00 Rx Ry I. .. __ __`
    @"s_gt16a" = 0x00c6,
    /// `00c7`
    /// 32-bit signed integer `Rx` = `I` > `Ry`; `c7 00 Rx Ry I. .. .. ..`
    @"s_gt32a" = 0x00c7,
    /// `00c8`
    /// 64-bit signed integer `Rx` = `I` > `Ry`; `c8 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_gt64a" = 0x00c8,
    /// `00c9`
    /// 8-bit signed integer `Rx` = `Ry` > `I`; `c9 00 Rx Ry I. __ __ __`
    @"s_gt8b" = 0x00c9,
    /// `00ca`
    /// 16-bit signed integer `Rx` = `Ry` > `I`; `ca 00 Rx Ry I. .. __ __`
    @"s_gt16b" = 0x00ca,
    /// `00cb`
    /// 32-bit signed integer `Rx` = `Ry` > `I`; `cb 00 Rx Ry I. .. .. ..`
    @"s_gt32b" = 0x00cb,
    /// `00cc`
    /// 64-bit signed integer `Rx` = `Ry` > `I`; `cc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_gt64b" = 0x00cc,
    /// `00cd`
    /// 32-bit floating point `Rx` = `Ry` > `Rz`; `cd 00 Rx Ry Rz __ __ __`
    @"f_gt32" = 0x00cd,
    /// `00ce`
    /// 32-bit floating point `Rx` = `I` > `Ry`; `ce 00 Rx Ry I. .. .. ..`
    @"f_gt32a" = 0x00ce,
    /// `00cf`
    /// 32-bit floating point `Rx` = `Ry` > `I`; `cf 00 Rx Ry I. .. .. ..`
    @"f_gt32b" = 0x00cf,
    /// `00d0`
    /// 64-bit floating point `Rx` = `Ry` > `Rz`; `d0 00 Rx Ry Rz __ __ __`
    @"f_gt64" = 0x00d0,
    /// `00d1`
    /// 64-bit floating point `Rx` = `I` > `Ry`; `d1 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_gt64a" = 0x00d1,
    /// `00d2`
    /// 64-bit floating point `Rx` = `Ry` > `I`; `d2 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_gt64b" = 0x00d2,
    /// `00d3`
    /// 8-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d3 00 Rx Ry Rz __ __ __`
    @"u_le8" = 0x00d3,
    /// `00d4`
    /// 16-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d4 00 Rx Ry Rz __ __ __`
    @"u_le16" = 0x00d4,
    /// `00d5`
    /// 32-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d5 00 Rx Ry Rz __ __ __`
    @"u_le32" = 0x00d5,
    /// `00d6`
    /// 64-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d6 00 Rx Ry Rz __ __ __`
    @"u_le64" = 0x00d6,
    /// `00d7`
    /// 8-bit unsigned integer `Rx` = `I` <= `Ry`; `d7 00 Rx Ry I. __ __ __`
    @"u_le8a" = 0x00d7,
    /// `00d8`
    /// 16-bit unsigned integer `Rx` = `I` <= `Ry`; `d8 00 Rx Ry I. .. __ __`
    @"u_le16a" = 0x00d8,
    /// `00d9`
    /// 32-bit unsigned integer `Rx` = `I` <= `Ry`; `d9 00 Rx Ry I. .. .. ..`
    @"u_le32a" = 0x00d9,
    /// `00da`
    /// 64-bit unsigned integer `Rx` = `I` <= `Ry`; `da 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_le64a" = 0x00da,
    /// `00db`
    /// 8-bit unsigned integer `Rx` = `Ry` <= `I`; `db 00 Rx Ry I. __ __ __`
    @"u_le8b" = 0x00db,
    /// `00dc`
    /// 16-bit unsigned integer `Rx` = `Ry` <= `I`; `dc 00 Rx Ry I. .. __ __`
    @"u_le16b" = 0x00dc,
    /// `00dd`
    /// 32-bit unsigned integer `Rx` = `Ry` <= `I`; `dd 00 Rx Ry I. .. .. ..`
    @"u_le32b" = 0x00dd,
    /// `00de`
    /// 64-bit unsigned integer `Rx` = `Ry` <= `I`; `de 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_le64b" = 0x00de,
    /// `00df`
    /// 8-bit signed integer `Rx` = `Ry` <= `Rz`; `df 00 Rx Ry Rz __ __ __`
    @"s_le8" = 0x00df,
    /// `00e0`
    /// 16-bit signed integer `Rx` = `Ry` <= `Rz`; `e0 00 Rx Ry Rz __ __ __`
    @"s_le16" = 0x00e0,
    /// `00e1`
    /// 32-bit signed integer `Rx` = `Ry` <= `Rz`; `e1 00 Rx Ry Rz __ __ __`
    @"s_le32" = 0x00e1,
    /// `00e2`
    /// 64-bit signed integer `Rx` = `Ry` <= `Rz`; `e2 00 Rx Ry Rz __ __ __`
    @"s_le64" = 0x00e2,
    /// `00e3`
    /// 8-bit signed integer `Rx` = `I` <= `Ry`; `e3 00 Rx Ry I. __ __ __`
    @"s_le8a" = 0x00e3,
    /// `00e4`
    /// 16-bit signed integer `Rx` = `I` <= `Ry`; `e4 00 Rx Ry I. .. __ __`
    @"s_le16a" = 0x00e4,
    /// `00e5`
    /// 32-bit signed integer `Rx` = `I` <= `Ry`; `e5 00 Rx Ry I. .. .. ..`
    @"s_le32a" = 0x00e5,
    /// `00e6`
    /// 64-bit signed integer `Rx` = `I` <= `Ry`; `e6 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_le64a" = 0x00e6,
    /// `00e7`
    /// 8-bit signed integer `Rx` = `Ry` <= `I`; `e7 00 Rx Ry I. __ __ __`
    @"s_le8b" = 0x00e7,
    /// `00e8`
    /// 16-bit signed integer `Rx` = `Ry` <= `I`; `e8 00 Rx Ry I. .. __ __`
    @"s_le16b" = 0x00e8,
    /// `00e9`
    /// 32-bit signed integer `Rx` = `Ry` <= `I`; `e9 00 Rx Ry I. .. .. ..`
    @"s_le32b" = 0x00e9,
    /// `00ea`
    /// 64-bit signed integer `Rx` = `Ry` <= `I`; `ea 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_le64b" = 0x00ea,
    /// `00eb`
    /// 32-bit floating point `Rx` = `Ry` <= `Rz`; `eb 00 Rx Ry Rz __ __ __`
    @"f_le32" = 0x00eb,
    /// `00ec`
    /// 32-bit floating point `Rx` = `I` <= `Ry`; `ec 00 Rx Ry I. .. .. ..`
    @"f_le32a" = 0x00ec,
    /// `00ed`
    /// 32-bit floating point `Rx` = `Ry` <= `I`; `ed 00 Rx Ry I. .. .. ..`
    @"f_le32b" = 0x00ed,
    /// `00ee`
    /// 64-bit floating point `Rx` = `Ry` <= `Rz`; `ee 00 Rx Ry Rz __ __ __`
    @"f_le64" = 0x00ee,
    /// `00ef`
    /// 64-bit floating point `Rx` = `I` <= `Ry`; `ef 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_le64a" = 0x00ef,
    /// `00f0`
    /// 64-bit floating point `Rx` = `Ry` <= `I`; `f0 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_le64b" = 0x00f0,
    /// `00f1`
    /// 8-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f1 00 Rx Ry Rz __ __ __`
    @"u_ge8" = 0x00f1,
    /// `00f2`
    /// 16-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f2 00 Rx Ry Rz __ __ __`
    @"u_ge16" = 0x00f2,
    /// `00f3`
    /// 32-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f3 00 Rx Ry Rz __ __ __`
    @"u_ge32" = 0x00f3,
    /// `00f4`
    /// 64-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f4 00 Rx Ry Rz __ __ __`
    @"u_ge64" = 0x00f4,
    /// `00f5`
    /// 8-bit unsigned integer `Rx` = `I` >= `Ry`; `f5 00 Rx Ry I. __ __ __`
    @"u_ge8a" = 0x00f5,
    /// `00f6`
    /// 16-bit unsigned integer `Rx` = `I` >= `Ry`; `f6 00 Rx Ry I. .. __ __`
    @"u_ge16a" = 0x00f6,
    /// `00f7`
    /// 32-bit unsigned integer `Rx` = `I` >= `Ry`; `f7 00 Rx Ry I. .. .. ..`
    @"u_ge32a" = 0x00f7,
    /// `00f8`
    /// 64-bit unsigned integer `Rx` = `I` >= `Ry`; `f8 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_ge64a" = 0x00f8,
    /// `00f9`
    /// 8-bit unsigned integer `Rx` = `Ry` >= `I`; `f9 00 Rx Ry I. __ __ __`
    @"u_ge8b" = 0x00f9,
    /// `00fa`
    /// 16-bit unsigned integer `Rx` = `Ry` >= `I`; `fa 00 Rx Ry I. .. __ __`
    @"u_ge16b" = 0x00fa,
    /// `00fb`
    /// 32-bit unsigned integer `Rx` = `Ry` >= `I`; `fb 00 Rx Ry I. .. .. ..`
    @"u_ge32b" = 0x00fb,
    /// `00fc`
    /// 64-bit unsigned integer `Rx` = `Ry` >= `I`; `fc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_ge64b" = 0x00fc,
    /// `00fd`
    /// 8-bit signed integer `Rx` = `Ry` >= `Rz`; `fd 00 Rx Ry Rz __ __ __`
    @"s_ge8" = 0x00fd,
    /// `00fe`
    /// 16-bit signed integer `Rx` = `Ry` >= `Rz`; `fe 00 Rx Ry Rz __ __ __`
    @"s_ge16" = 0x00fe,
    /// `00ff`
    /// 32-bit signed integer `Rx` = `Ry` >= `Rz`; `ff 00 Rx Ry Rz __ __ __`
    @"s_ge32" = 0x00ff,
    /// `0100`
    /// 64-bit signed integer `Rx` = `Ry` >= `Rz`; `00 01 Rx Ry Rz __ __ __`
    @"s_ge64" = 0x0100,
    /// `0101`
    /// 8-bit signed integer `Rx` = `I` >= `Ry`; `01 01 Rx Ry I. __ __ __`
    @"s_ge8a" = 0x0101,
    /// `0102`
    /// 16-bit signed integer `Rx` = `I` >= `Ry`; `02 01 Rx Ry I. .. __ __`
    @"s_ge16a" = 0x0102,
    /// `0103`
    /// 32-bit signed integer `Rx` = `I` >= `Ry`; `03 01 Rx Ry I. .. .. ..`
    @"s_ge32a" = 0x0103,
    /// `0104`
    /// 64-bit signed integer `Rx` = `I` >= `Ry`; `04 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_ge64a" = 0x0104,
    /// `0105`
    /// 8-bit signed integer `Rx` = `Ry` >= `I`; `05 01 Rx Ry I. __ __ __`
    @"s_ge8b" = 0x0105,
    /// `0106`
    /// 16-bit signed integer `Rx` = `Ry` >= `I`; `06 01 Rx Ry I. .. __ __`
    @"s_ge16b" = 0x0106,
    /// `0107`
    /// 32-bit signed integer `Rx` = `Ry` >= `I`; `07 01 Rx Ry I. .. .. ..`
    @"s_ge32b" = 0x0107,
    /// `0108`
    /// 64-bit signed integer `Rx` = `Ry` >= `I`; `08 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_ge64b" = 0x0108,
    /// `0109`
    /// 32-bit floating point `Rx` = `Ry` >= `Rz`; `09 01 Rx Ry Rz __ __ __`
    @"f_ge32" = 0x0109,
    /// `010a`
    /// 32-bit floating point `Rx` = `I` >= `Ry`; `0a 01 Rx Ry I. .. .. ..`
    @"f_ge32a" = 0x010a,
    /// `010b`
    /// 32-bit floating point `Rx` = `Ry` >= `I`; `0b 01 Rx Ry I. .. .. ..`
    @"f_ge32b" = 0x010b,
    /// `010c`
    /// 64-bit floating point `Rx` = `Ry` >= `Rz`; `0c 01 Rx Ry Rz __ __ __`
    @"f_ge64" = 0x010c,
    /// `010d`
    /// 64-bit floating point `Rx` = `I` >= `Ry`; `0d 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_ge64a" = 0x010d,
    /// `010e`
    /// 64-bit floating point `Rx` = `Ry` >= `I`; `0e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_ge64b" = 0x010e,
    /// `010f`
    /// 8-bit `Rx` = -`Ry`; `0f 01 Rx Ry __ __ __ __`
    @"s_neg8" = 0x010f,
    /// `0110`
    /// 16-bit `Rx` = -`Ry`; `10 01 Rx Ry __ __ __ __`
    @"s_neg16" = 0x0110,
    /// `0111`
    /// 32-bit `Rx` = -`Ry`; `11 01 Rx Ry __ __ __ __`
    @"s_neg32" = 0x0111,
    /// `0112`
    /// 64-bit `Rx` = -`Ry`; `12 01 Rx Ry __ __ __ __`
    @"s_neg64" = 0x0112,
    /// `0113`
    /// 8-bit `Rx` = \|`Ry`\|; `13 01 Rx Ry __ __ __ __`
    @"s_abs8" = 0x0113,
    /// `0114`
    /// 16-bit `Rx` = \|`Ry`\|; `14 01 Rx Ry __ __ __ __`
    @"s_abs16" = 0x0114,
    /// `0115`
    /// 32-bit `Rx` = \|`Ry`\|; `15 01 Rx Ry __ __ __ __`
    @"s_abs32" = 0x0115,
    /// `0116`
    /// 64-bit `Rx` = \|`Ry`\|; `16 01 Rx Ry __ __ __ __`
    @"s_abs64" = 0x0116,
    /// `0117`
    /// 8-bit `Rx` = `Ry` + `Rz`; `17 01 Rx Ry Rz __ __ __`
    @"i_add8" = 0x0117,
    /// `0118`
    /// 16-bit `Rx` = `Ry` + `Rz`; `18 01 Rx Ry Rz __ __ __`
    @"i_add16" = 0x0118,
    /// `0119`
    /// 32-bit `Rx` = `Ry` + `Rz`; `19 01 Rx Ry Rz __ __ __`
    @"i_add32" = 0x0119,
    /// `011a`
    /// 64-bit `Rx` = `Ry` + `Rz`; `1a 01 Rx Ry Rz __ __ __`
    @"i_add64" = 0x011a,
    /// `011b`
    /// 8-bit `Rx` = `Ry` + `I`; `1b 01 Rx Ry I. __ __ __`
    @"i_add8c" = 0x011b,
    /// `011c`
    /// 16-bit `Rx` = `Ry` + `I`; `1c 01 Rx Ry I. .. __ __`
    @"i_add16c" = 0x011c,
    /// `011d`
    /// 32-bit `Rx` = `Ry` + `I`; `1d 01 Rx Ry I. .. .. ..`
    @"i_add32c" = 0x011d,
    /// `011e`
    /// 64-bit `Rx` = `Ry` + `I`; `1e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_add64c" = 0x011e,
    /// `011f`
    /// 8-bit `Rx` = `Ry` - `Rz`; `1f 01 Rx Ry Rz __ __ __`
    @"i_sub8" = 0x011f,
    /// `0120`
    /// 16-bit `Rx` = `Ry` - `Rz`; `20 01 Rx Ry Rz __ __ __`
    @"i_sub16" = 0x0120,
    /// `0121`
    /// 32-bit `Rx` = `Ry` - `Rz`; `21 01 Rx Ry Rz __ __ __`
    @"i_sub32" = 0x0121,
    /// `0122`
    /// 64-bit `Rx` = `Ry` - `Rz`; `22 01 Rx Ry Rz __ __ __`
    @"i_sub64" = 0x0122,
    /// `0123`
    /// 8-bit `Rx` = `I` - `Ry`; `23 01 Rx Ry I. __ __ __`
    @"i_sub8a" = 0x0123,
    /// `0124`
    /// 16-bit `Rx` = `I` - `Ry`; `24 01 Rx Ry I. .. __ __`
    @"i_sub16a" = 0x0124,
    /// `0125`
    /// 32-bit `Rx` = `I` - `Ry`; `25 01 Rx Ry I. .. .. ..`
    @"i_sub32a" = 0x0125,
    /// `0126`
    /// 64-bit `Rx` = `I` - `Ry`; `26 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_sub64a" = 0x0126,
    /// `0127`
    /// 8-bit `Rx` = `Ry` - `I`; `27 01 Rx Ry I. __ __ __`
    @"i_sub8b" = 0x0127,
    /// `0128`
    /// 16-bit `Rx` = `Ry` - `I`; `28 01 Rx Ry I. .. __ __`
    @"i_sub16b" = 0x0128,
    /// `0129`
    /// 32-bit `Rx` = `Ry` - `I`; `29 01 Rx Ry I. .. .. ..`
    @"i_sub32b" = 0x0129,
    /// `012a`
    /// 64-bit `Rx` = `Ry` - `I`; `2a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_sub64b" = 0x012a,
    /// `012b`
    /// 8-bit `Rx` = `Ry` * `Rz`; `2b 01 Rx Ry Rz __ __ __`
    @"i_mul8" = 0x012b,
    /// `012c`
    /// 16-bit `Rx` = `Ry` * `Rz`; `2c 01 Rx Ry Rz __ __ __`
    @"i_mul16" = 0x012c,
    /// `012d`
    /// 32-bit `Rx` = `Ry` * `Rz`; `2d 01 Rx Ry Rz __ __ __`
    @"i_mul32" = 0x012d,
    /// `012e`
    /// 64-bit `Rx` = `Ry` * `Rz`; `2e 01 Rx Ry Rz __ __ __`
    @"i_mul64" = 0x012e,
    /// `012f`
    /// 8-bit `Rx` = `Ry` * `I`; `2f 01 Rx Ry I. __ __ __`
    @"i_mul8c" = 0x012f,
    /// `0130`
    /// 16-bit `Rx` = `Ry` * `I`; `30 01 Rx Ry I. .. __ __`
    @"i_mul16c" = 0x0130,
    /// `0131`
    /// 32-bit `Rx` = `Ry` * `I`; `31 01 Rx Ry I. .. .. ..`
    @"i_mul32c" = 0x0131,
    /// `0132`
    /// 64-bit `Rx` = `Ry` * `I`; `32 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_mul64c" = 0x0132,
    /// `0133`
    /// 8-bit unsigned `Rx` = `Ry` / `Rz`; `33 01 Rx Ry Rz __ __ __`
    @"u_div8" = 0x0133,
    /// `0134`
    /// 16-bit unsigned `Rx` = `Ry` / `Rz`; `34 01 Rx Ry Rz __ __ __`
    @"u_div16" = 0x0134,
    /// `0135`
    /// 32-bit unsigned `Rx` = `Ry` / `Rz`; `35 01 Rx Ry Rz __ __ __`
    @"u_div32" = 0x0135,
    /// `0136`
    /// 64-bit unsigned `Rx` = `Ry` / `Rz`; `36 01 Rx Ry Rz __ __ __`
    @"u_div64" = 0x0136,
    /// `0137`
    /// 8-bit unsigned `Rx` = `I` / `Ry`; `37 01 Rx Ry I. __ __ __`
    @"u_div8a" = 0x0137,
    /// `0138`
    /// 16-bit unsigned `Rx` = `I` / `Ry`; `38 01 Rx Ry I. .. __ __`
    @"u_div16a" = 0x0138,
    /// `0139`
    /// 32-bit unsigned `Rx` = `I` / `Ry`; `39 01 Rx Ry I. .. .. ..`
    @"u_div32a" = 0x0139,
    /// `013a`
    /// 64-bit unsigned `Rx` = `I` / `Ry`; `3a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_div64a" = 0x013a,
    /// `013b`
    /// 8-bit unsigned `Rx` = `Ry` / `I`; `3b 01 Rx Ry I. __ __ __`
    @"u_div8b" = 0x013b,
    /// `013c`
    /// 16-bit unsigned `Rx` = `Ry` / `I`; `3c 01 Rx Ry I. .. __ __`
    @"u_div16b" = 0x013c,
    /// `013d`
    /// 32-bit unsigned `Rx` = `Ry` / `I`; `3d 01 Rx Ry I. .. .. ..`
    @"u_div32b" = 0x013d,
    /// `013e`
    /// 64-bit unsigned `Rx` = `Ry` / `I`; `3e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_div64b" = 0x013e,
    /// `013f`
    /// 8-bit signed `Rx` = `Ry` / `Rz`; `3f 01 Rx Ry Rz __ __ __`
    @"s_div8" = 0x013f,
    /// `0140`
    /// 16-bit signed `Rx` = `Ry` / `Rz`; `40 01 Rx Ry Rz __ __ __`
    @"s_div16" = 0x0140,
    /// `0141`
    /// 32-bit signed `Rx` = `Ry` / `Rz`; `41 01 Rx Ry Rz __ __ __`
    @"s_div32" = 0x0141,
    /// `0142`
    /// 64-bit signed `Rx` = `Ry` / `Rz`; `42 01 Rx Ry Rz __ __ __`
    @"s_div64" = 0x0142,
    /// `0143`
    /// 8-bit signed `Rx` = `I` / `Ry`; `43 01 Rx Ry I. __ __ __`
    @"s_div8a" = 0x0143,
    /// `0144`
    /// 16-bit signed `Rx` = `I` / `Ry`; `44 01 Rx Ry I. .. __ __`
    @"s_div16a" = 0x0144,
    /// `0145`
    /// 32-bit signed `Rx` = `I` / `Ry`; `45 01 Rx Ry I. .. .. ..`
    @"s_div32a" = 0x0145,
    /// `0146`
    /// 64-bit signed `Rx` = `I` / `Ry`; `46 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_div64a" = 0x0146,
    /// `0147`
    /// 8-bit signed `Rx` = `Ry` / `I`; `47 01 Rx Ry I. __ __ __`
    @"s_div8b" = 0x0147,
    /// `0148`
    /// 16-bit signed `Rx` = `Ry` / `I`; `48 01 Rx Ry I. .. __ __`
    @"s_div16b" = 0x0148,
    /// `0149`
    /// 32-bit signed `Rx` = `Ry` / `I`; `49 01 Rx Ry I. .. .. ..`
    @"s_div32b" = 0x0149,
    /// `014a`
    /// 64-bit signed `Rx` = `Ry` / `I`; `4a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_div64b" = 0x014a,
    /// `014b`
    /// 8-bit unsigned `Rx` = `Ry` % `Rz`; `4b 01 Rx Ry Rz __ __ __`
    @"u_rem8" = 0x014b,
    /// `014c`
    /// 16-bit unsigned `Rx` = `Ry` % `Rz`; `4c 01 Rx Ry Rz __ __ __`
    @"u_rem16" = 0x014c,
    /// `014d`
    /// 32-bit unsigned `Rx` = `Ry` % `Rz`; `4d 01 Rx Ry Rz __ __ __`
    @"u_rem32" = 0x014d,
    /// `014e`
    /// 64-bit unsigned `Rx` = `Ry` % `Rz`; `4e 01 Rx Ry Rz __ __ __`
    @"u_rem64" = 0x014e,
    /// `014f`
    /// 8-bit unsigned `Rx` = `I` % `Ry`; `4f 01 Rx Ry I. __ __ __`
    @"u_rem8a" = 0x014f,
    /// `0150`
    /// 16-bit unsigned `Rx` = `I` % `Ry`; `50 01 Rx Ry I. .. __ __`
    @"u_rem16a" = 0x0150,
    /// `0151`
    /// 32-bit unsigned `Rx` = `I` % `Ry`; `51 01 Rx Ry I. .. .. ..`
    @"u_rem32a" = 0x0151,
    /// `0152`
    /// 64-bit unsigned `Rx` = `I` % `Ry`; `52 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_rem64a" = 0x0152,
    /// `0153`
    /// 8-bit unsigned `Rx` = `Ry` % `I`; `53 01 Rx Ry I. __ __ __`
    @"u_rem8b" = 0x0153,
    /// `0154`
    /// 16-bit unsigned `Rx` = `Ry` % `I`; `54 01 Rx Ry I. .. __ __`
    @"u_rem16b" = 0x0154,
    /// `0155`
    /// 32-bit unsigned `Rx` = `Ry` % `I`; `55 01 Rx Ry I. .. .. ..`
    @"u_rem32b" = 0x0155,
    /// `0156`
    /// 64-bit unsigned `Rx` = `Ry` % `I`; `56 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_rem64b" = 0x0156,
    /// `0157`
    /// 8-bit signed `Rx` = `Ry` % `Rz`; `57 01 Rx Ry Rz __ __ __`
    @"s_rem8" = 0x0157,
    /// `0158`
    /// 16-bit signed `Rx` = `Ry` % `Rz`; `58 01 Rx Ry Rz __ __ __`
    @"s_rem16" = 0x0158,
    /// `0159`
    /// 32-bit signed `Rx` = `Ry` % `Rz`; `59 01 Rx Ry Rz __ __ __`
    @"s_rem32" = 0x0159,
    /// `015a`
    /// 64-bit signed `Rx` = `Ry` % `Rz`; `5a 01 Rx Ry Rz __ __ __`
    @"s_rem64" = 0x015a,
    /// `015b`
    /// 8-bit signed `Rx` = `I` % `Ry`; `5b 01 Rx Ry I. __ __ __`
    @"s_rem8a" = 0x015b,
    /// `015c`
    /// 16-bit signed `Rx` = `I` % `Ry`; `5c 01 Rx Ry I. .. __ __`
    @"s_rem16a" = 0x015c,
    /// `015d`
    /// 32-bit signed `Rx` = `I` % `Ry`; `5d 01 Rx Ry I. .. .. ..`
    @"s_rem32a" = 0x015d,
    /// `015e`
    /// 64-bit signed `Rx` = `I` % `Ry`; `5e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_rem64a" = 0x015e,
    /// `015f`
    /// 8-bit signed `Rx` = `Ry` % `I`; `5f 01 Rx Ry I. __ __ __`
    @"s_rem8b" = 0x015f,
    /// `0160`
    /// 16-bit signed `Rx` = `Ry` % `I`; `60 01 Rx Ry I. .. __ __`
    @"s_rem16b" = 0x0160,
    /// `0161`
    /// 32-bit signed `Rx` = `Ry` % `I`; `61 01 Rx Ry I. .. .. ..`
    @"s_rem32b" = 0x0161,
    /// `0162`
    /// 64-bit signed `Rx` = `Ry` % `I`; `62 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_rem64b" = 0x0162,
    /// `0163`
    /// 8-bit `Rx` = `Ry` ** `Rz`; `63 01 Rx Ry Rz __ __ __`
    @"i_pow8" = 0x0163,
    /// `0164`
    /// 16-bit `Rx` = `Ry` ** `Rz`; `64 01 Rx Ry Rz __ __ __`
    @"i_pow16" = 0x0164,
    /// `0165`
    /// 32-bit `Rx` = `Ry` ** `Rz`; `65 01 Rx Ry Rz __ __ __`
    @"i_pow32" = 0x0165,
    /// `0166`
    /// 64-bit `Rx` = `Ry` ** `Rz`; `66 01 Rx Ry Rz __ __ __`
    @"i_pow64" = 0x0166,
    /// `0167`
    /// 8-bit `Rx` = `I` ** `Ry`; `67 01 Rx Ry I. __ __ __`
    @"i_pow8a" = 0x0167,
    /// `0168`
    /// 16-bit `Rx` = `I` ** `Ry`; `68 01 Rx Ry I. .. __ __`
    @"i_pow16a" = 0x0168,
    /// `0169`
    /// 32-bit `Rx` = `I` ** `Ry`; `69 01 Rx Ry I. .. .. ..`
    @"i_pow32a" = 0x0169,
    /// `016a`
    /// 64-bit `Rx` = `I` ** `Ry`; `6a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_pow64a" = 0x016a,
    /// `016b`
    /// 8-bit `Rx` = `Ry` ** `I`; `6b 01 Rx Ry I. __ __ __`
    @"i_pow8b" = 0x016b,
    /// `016c`
    /// 16-bit `Rx` = `Ry` ** `I`; `6c 01 Rx Ry I. .. __ __`
    @"i_pow16b" = 0x016c,
    /// `016d`
    /// 32-bit `Rx` = `Ry` ** `I`; `6d 01 Rx Ry I. .. .. ..`
    @"i_pow32b" = 0x016d,
    /// `016e`
    /// 64-bit `Rx` = `Ry` ** `I`; `6e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_pow64b" = 0x016e,
    /// `016f`
    /// 32-bit `Rx` = -`Ry`; `6f 01 Rx Ry __ __ __ __`
    @"f_neg32" = 0x016f,
    /// `0170`
    /// 64-bit `Rx` = -`Ry`; `70 01 Rx Ry __ __ __ __`
    @"f_neg64" = 0x0170,
    /// `0171`
    /// 32-bit `Rx` = \|`Ry`\|; `71 01 Rx Ry __ __ __ __`
    @"f_abs32" = 0x0171,
    /// `0172`
    /// 64-bit `Rx` = \|`Ry`\|; `72 01 Rx Ry __ __ __ __`
    @"f_abs64" = 0x0172,
    /// `0173`
    /// 32-bit `Rx` = sqrt(`Ry`); `73 01 Rx Ry __ __ __ __`
    @"f_sqrt32" = 0x0173,
    /// `0174`
    /// 64-bit `Rx` = sqrt(`Ry`); `74 01 Rx Ry __ __ __ __`
    @"f_sqrt64" = 0x0174,
    /// `0175`
    /// 32-bit `Rx` = floor(`Ry`); `75 01 Rx Ry __ __ __ __`
    @"f_floor32" = 0x0175,
    /// `0176`
    /// 64-bit `Rx` = floor(`Ry`); `76 01 Rx Ry __ __ __ __`
    @"f_floor64" = 0x0176,
    /// `0177`
    /// 32-bit `Rx` = ceil(`Ry`); `77 01 Rx Ry __ __ __ __`
    @"f_ceil32" = 0x0177,
    /// `0178`
    /// 64-bit `Rx` = ceil(`Ry`); `78 01 Rx Ry __ __ __ __`
    @"f_ceil64" = 0x0178,
    /// `0179`
    /// 32-bit `Rx` = round(`Ry`); `79 01 Rx Ry __ __ __ __`
    @"f_round32" = 0x0179,
    /// `017a`
    /// 64-bit `Rx` = round(`Ry`); `7a 01 Rx Ry __ __ __ __`
    @"f_round64" = 0x017a,
    /// `017b`
    /// 32-bit `Rx` = truncate(`Ry`); `7b 01 Rx Ry __ __ __ __`
    @"f_trunc32" = 0x017b,
    /// `017c`
    /// 64-bit `Rx` = truncate(`Ry`); `7c 01 Rx Ry __ __ __ __`
    @"f_trunc64" = 0x017c,
    /// `017d`
    /// 32-bit `Rx` = whole(`Ry`); `7d 01 Rx Ry __ __ __ __`
    @"f_whole32" = 0x017d,
    /// `017e`
    /// 64-bit `Rx` = whole(`Ry`); `7e 01 Rx Ry __ __ __ __`
    @"f_whole64" = 0x017e,
    /// `017f`
    /// 32-bit `Rx` = frac(`Ry`); `7f 01 Rx Ry __ __ __ __`
    @"f_frac32" = 0x017f,
    /// `0180`
    /// 64-bit `Rx` = frac(`Ry`); `80 01 Rx Ry __ __ __ __`
    @"f_frac64" = 0x0180,
    /// `0181`
    /// 32-bit `Rx` = `Ry` + `Rz`; `81 01 Rx Ry Rz __ __ __`
    @"f_add32" = 0x0181,
    /// `0182`
    /// 32-bit `Rx` = `Ry` + `I`; `82 01 Rx Ry I. .. .. ..`
    @"f_add32c" = 0x0182,
    /// `0183`
    /// 64-bit `Rx` = `Ry` + `Rz`; `83 01 Rx Ry Rz __ __ __`
    @"f_add64" = 0x0183,
    /// `0184`
    /// 64-bit `Rx` = `Ry` + `I`; `84 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_add64c" = 0x0184,
    /// `0185`
    /// 32-bit `Rx` = `Ry` - `Rz`; `85 01 Rx Ry Rz __ __ __`
    @"f_sub32" = 0x0185,
    /// `0186`
    /// 32-bit `Rx` = `I` - `Ry`; `86 01 Rx Ry I. .. .. ..`
    @"f_sub32a" = 0x0186,
    /// `0187`
    /// 32-bit `Rx` = `Ry` - `I`; `87 01 Rx Ry I. .. .. ..`
    @"f_sub32b" = 0x0187,
    /// `0188`
    /// 64-bit `Rx` = `Ry` - `Rz`; `88 01 Rx Ry Rz __ __ __`
    @"f_sub64" = 0x0188,
    /// `0189`
    /// 64-bit `Rx` = `I` - `Ry`; `89 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_sub64a" = 0x0189,
    /// `018a`
    /// 64-bit `Rx` = `Ry` - `I`; `8a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_sub64b" = 0x018a,
    /// `018b`
    /// 32-bit `Rx` = `Ry` * `Rz`; `8b 01 Rx Ry Rz __ __ __`
    @"f_mul32" = 0x018b,
    /// `018c`
    /// 32-bit `Rx` = `Ry` * `I`; `8c 01 Rx Ry I. .. .. ..`
    @"f_mul32c" = 0x018c,
    /// `018d`
    /// 64-bit `Rx` = `Ry` * `Rz`; `8d 01 Rx Ry Rz __ __ __`
    @"f_mul64" = 0x018d,
    /// `018e`
    /// 64-bit `Rx` = `Ry` * `I`; `8e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_mul64c" = 0x018e,
    /// `018f`
    /// 32-bit `Rx` = `Ry` / `Rz`; `8f 01 Rx Ry Rz __ __ __`
    @"f_div32" = 0x018f,
    /// `0190`
    /// 32-bit `Rx` = `I` / `Ry`; `90 01 Rx Ry I. .. .. ..`
    @"f_div32a" = 0x0190,
    /// `0191`
    /// 32-bit `Rx` = `Ry` / `I`; `91 01 Rx Ry I. .. .. ..`
    @"f_div32b" = 0x0191,
    /// `0192`
    /// 64-bit `Rx` = `Ry` / `Rz`; `92 01 Rx Ry Rz __ __ __`
    @"f_div64" = 0x0192,
    /// `0193`
    /// 64-bit `Rx` = `I` / `Ry`; `93 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_div64a" = 0x0193,
    /// `0194`
    /// 64-bit `Rx` = `Ry` / `I`; `94 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_div64b" = 0x0194,
    /// `0195`
    /// 32-bit `Rx` = `Ry` % `Rz`; `95 01 Rx Ry Rz __ __ __`
    @"f_rem32" = 0x0195,
    /// `0196`
    /// 32-bit `Rx` = `I` % `Ry`; `96 01 Rx Ry I. .. .. ..`
    @"f_rem32a" = 0x0196,
    /// `0197`
    /// 32-bit `Rx` = `Ry` % `I`; `97 01 Rx Ry I. .. .. ..`
    @"f_rem32b" = 0x0197,
    /// `0198`
    /// 64-bit `Rx` = `Ry` % `Rz`; `98 01 Rx Ry Rz __ __ __`
    @"f_rem64" = 0x0198,
    /// `0199`
    /// 64-bit `Rx` = `I` % `Ry`; `99 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_rem64a" = 0x0199,
    /// `019a`
    /// 64-bit `Rx` = `Ry` % `I`; `9a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_rem64b" = 0x019a,
    /// `019b`
    /// 32-bit `Rx` = `Ry` ** `Rz`; `9b 01 Rx Ry Rz __ __ __`
    @"f_pow32" = 0x019b,
    /// `019c`
    /// 32-bit `Rx` = `I` ** `Ry`; `9c 01 Rx Ry I. .. .. ..`
    @"f_pow32a" = 0x019c,
    /// `019d`
    /// 32-bit `Rx` = `Ry` ** `I`; `9d 01 Rx Ry I. .. .. ..`
    @"f_pow32b" = 0x019d,
    /// `019e`
    /// 64-bit `Rx` = `Ry` ** `Rz`; `9e 01 Rx Ry Rz __ __ __`
    @"f_pow64" = 0x019e,
    /// `019f`
    /// 64-bit `Rx` = `I` ** `Ry`; `9f 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_pow64a" = 0x019f,
    /// `01a0`
    /// 64-bit `Rx` = `Ry` ** `I`; `a0 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_pow64b" = 0x01a0,
    /// `01a1`
    /// Sign extend 8-bits of `Ry` to 16-bits, placing the result in `Rx`; `a1 01 Rx Ry __ __ __ __`
    @"s_ext8_16" = 0x01a1,
    /// `01a2`
    /// Sign extend 8-bits of `Ry` to 32-bits, placing the result in `Rx`; `a2 01 Rx Ry __ __ __ __`
    @"s_ext8_32" = 0x01a2,
    /// `01a3`
    /// Sign extend 8-bits of `Ry` to 64-bits, placing the result in `Rx`; `a3 01 Rx Ry __ __ __ __`
    @"s_ext8_64" = 0x01a3,
    /// `01a4`
    /// Sign extend 16-bits of `Ry` to 32-bits, placing the result in `Rx`; `a4 01 Rx Ry __ __ __ __`
    @"s_ext16_32" = 0x01a4,
    /// `01a5`
    /// Sign extend 16-bits of `Ry` to 64-bits, placing the result in `Rx`; `a5 01 Rx Ry __ __ __ __`
    @"s_ext16_64" = 0x01a5,
    /// `01a6`
    /// Sign extend 32-bits of `Ry` to 64-bits, placing the result in `Rx`; `a6 01 Rx Ry __ __ __ __`
    @"s_ext32_64" = 0x01a6,
    /// `01a7`
    /// Convert of 32-bit float in `Ry` to 8-bit integer; discards sign, places the result in `Rx`; `a7 01 Rx Ry __ __ __ __`
    @"f32_to_u8" = 0x01a7,
    /// `01a8`
    /// Convert of 32-bit float in `Ry` to 16-bit integer; discards sign, places the result in `Rx`; `a8 01 Rx Ry __ __ __ __`
    @"f32_to_u16" = 0x01a8,
    /// `01a9`
    /// Convert of 32-bit float in `Ry` to 32-bit integer; discards sign, places the result in `Rx`; `a9 01 Rx Ry __ __ __ __`
    @"f32_to_u32" = 0x01a9,
    /// `01aa`
    /// Convert of 32-bit float in `Ry` to 64-bit integer; discards sign, places the result in `Rx`; `aa 01 Rx Ry __ __ __ __`
    @"f32_to_u64" = 0x01aa,
    /// `01ab`
    /// Convert of 32-bit float in `Ry` to 8-bit integer; keeps sign, places the result in `Rx`; `ab 01 Rx Ry __ __ __ __`
    @"f32_to_s8" = 0x01ab,
    /// `01ac`
    /// Convert of 32-bit float in `Ry` to 16-bit integer; keeps sign, places the result in `Rx`; `ac 01 Rx Ry __ __ __ __`
    @"f32_to_s16" = 0x01ac,
    /// `01ad`
    /// Convert of 32-bit float in `Ry` to 32-bit integer; keeps sign, places the result in `Rx`; `ad 01 Rx Ry __ __ __ __`
    @"f32_to_s32" = 0x01ad,
    /// `01ae`
    /// Convert of 32-bit float in `Ry` to 64-bit integer; keeps sign, places the result in `Rx`; `ae 01 Rx Ry __ __ __ __`
    @"f32_to_s64" = 0x01ae,
    /// `01af`
    /// Convert 8-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `af 01 Rx Ry __ __ __ __`
    @"u8_to_f32" = 0x01af,
    /// `01b0`
    /// Convert 16-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b0 01 Rx Ry __ __ __ __`
    @"u16_to_f32" = 0x01b0,
    /// `01b1`
    /// Convert 32-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b1 01 Rx Ry __ __ __ __`
    @"u32_to_f32" = 0x01b1,
    /// `01b2`
    /// Convert 64-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b2 01 Rx Ry __ __ __ __`
    @"u64_to_f32" = 0x01b2,
    /// `01b3`
    /// Convert 8-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b3 01 Rx Ry __ __ __ __`
    @"s8_to_f32" = 0x01b3,
    /// `01b4`
    /// Convert 16-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b4 01 Rx Ry __ __ __ __`
    @"s16_to_f32" = 0x01b4,
    /// `01b5`
    /// Convert 32-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b5 01 Rx Ry __ __ __ __`
    @"s32_to_f32" = 0x01b5,
    /// `01b6`
    /// Convert 64-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b6 01 Rx Ry __ __ __ __`
    @"s64_to_f32" = 0x01b6,
    /// `01b7`
    /// Convert 8-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b7 01 Rx Ry __ __ __ __`
    @"u8_to_f64" = 0x01b7,
    /// `01b8`
    /// Convert 16-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b8 01 Rx Ry __ __ __ __`
    @"u16_to_f64" = 0x01b8,
    /// `01b9`
    /// Convert 32-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b9 01 Rx Ry __ __ __ __`
    @"u32_to_f64" = 0x01b9,
    /// `01ba`
    /// Convert 64-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `ba 01 Rx Ry __ __ __ __`
    @"u64_to_f64" = 0x01ba,
    /// `01bb`
    /// Convert 8-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bb 01 Rx Ry __ __ __ __`
    @"s8_to_f64" = 0x01bb,
    /// `01bc`
    /// Convert 16-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bc 01 Rx Ry __ __ __ __`
    @"s16_to_f64" = 0x01bc,
    /// `01bd`
    /// Convert 32-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bd 01 Rx Ry __ __ __ __`
    @"s32_to_f64" = 0x01bd,
    /// `01be`
    /// Convert 64-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `be 01 Rx Ry __ __ __ __`
    @"s64_to_f64" = 0x01be,
    /// `01bf`
    /// Convert 32-bit float in `Ry` to 64-bit float; places the result in `Rx`; `bf 01 Rx Ry __ __ __ __`
    @"f32_to_f64" = 0x01bf,
    /// `01c0`
    /// Convert 64-bit float in `Ry` to 32-bit float; places the result in `Rx`; `c0 01 Rx Ry __ __ __ __`
    @"f64_to_f32" = 0x01c0,
};

/// Untagged union of all `operand_sets` types.
pub const OpData = packed union {
    /// Extract the operand set for a given opcode.
    pub fn extractSet(self: OpData, comptime code: OpCode) SetType(code) {
        inline for (comptime std.meta.fieldNames(OpCode)) |fieldName| {
            if (code == comptime @field(OpCode, fieldName).upcast()) {
                return @field(self, fieldName);
            }
        }

        unreachable;
    }

    /// Create an operand data union from the bits of one of its variants
    pub fn fromBits(set: anytype) OpData {
        return @bitCast(@as(std.meta.Int(.unsigned, @bitSizeOf(OpData)), @as(std.meta.Int(.unsigned, @bitSizeOf(@TypeOf(set))), @bitCast(set))));
    }

    /// Create a 48-bit integer from an `OpData` value.
    /// * **NOTE**: Previously, this was done with a bitcast.
    /// However, that can sometimes lead to undefined bytes in encoded bytecode streams;
    /// So now, this uses compile-time reflection to extract the fields of the union,
    /// and copies them into a 48-bit integer.
    /// This new process requires an `OpCode` to discriminate the union.
    pub fn toBits(self: OpData, code: OpCode) u48 {
        var i: usize = 0;
        var out: u48 = 0;
        const bytes = std.mem.asBytes(&out);

        const opcodes = comptime std.meta.fieldNames(Instruction.OpCode);
        @setEvalBranchQuota(opcodes.len * 32);

        inline for (opcodes) |instrName| {
            if (code == comptime @field(Instruction.OpCode, instrName)) {
                const T = @FieldType(Instruction.OpData, instrName);
                const set = @field(self, instrName);

                inline for (comptime std.meta.fieldNames(T)) |opName| {
                    const operand = @field(set, opName);
                    const size = @sizeOf(@FieldType(T, opName));
                    @memcpy(bytes[i..i + size], std.mem.asBytes(&operand));
                    i += size;
                }

                return out;
            }
        } else unreachable;
    }
    /// `0000`
    /// No operation; `00 00 __ __ __ __ __ __`
    @"nop": operand_sets.@"nop",
    /// `0001`
    /// Triggers a breakpoint in debuggers; does nothing otherwise; `01 00 __ __ __ __ __ __`
    @"breakpoint": operand_sets.@"breakpoint",
    /// `0002`
    /// Halts execution at this instruction offset; `02 00 __ __ __ __ __ __`
    @"halt": operand_sets.@"halt",
    /// `0003`
    /// Traps execution of the `Rvm.Fiber` at this instruction offset
    /// Unlike `unreachable`, this indicates expected behavior; optimizing compilers should *not* assume it is never reached; `03 00 __ __ __ __ __ __`
    @"trap": operand_sets.@"trap",
    /// `0004`
    /// Marks a point in the code as unreachable; if executed in Rvm, it is the same as `trap`
    /// Unlike `trap`, however, this indicates undefined behavior; optimizing compilers should assume it is never reached; `04 00 __ __ __ __ __ __`
    @"unreachable": operand_sets.@"unreachable",
    /// `0005`
    /// Pushes `H` onto the stack.
    /// The handlers in this set will be first in line for their effects' prompts until a corresponding `pop` operation.; `05 00 H. .. .. .. __ __`
    @"push_set": operand_sets.@"push_set",
    /// `0006`
    /// Pops the top most `HandlerSetId` from the stack, restoring the previous if present; `06 00 __ __ __ __ __ __`
    @"pop_set": operand_sets.@"pop_set",
    /// `0007`
    /// Applies a signed integer offset `I` to the instruction pointer; `07 00 I. .. .. .. __ __`
    @"br": operand_sets.@"br",
    /// `0008`
    /// Applies a signed integer offset `I` to the instruction pointer, if the value stored in `R` is non-zero; `08 00 R. I. .. .. .. __`
    @"br_if": operand_sets.@"br_if",
    /// `0009`
    /// Calls the bytecode or builtin function in `Ry` using `I` argument registers, placing the result in `Rx`; `09 00 Rx Ry I. __ __ __ + ...`
    @"call": operand_sets.@"call",
    /// `000a`
    /// Calls the bytecode or builtin function at `F` using `I` argument registers, placing the result in `R`; `0a 00 R. F. .. .. .. I. + ...`
    @"call_c": operand_sets.@"call_c",
    /// `000b`
    /// Calls the foreign function in `Ry` using `I` argument registers, placing the result in `Rx`; `0b 00 Rx Ry I. __ __ __ + ...`
    @"f_call": operand_sets.@"f_call",
    /// `000c`
    /// Calls the foreign function at `X` using `I` argument registers, placing the result in `R`; `0c 00 R. X. .. .. .. I. + ...`
    @"f_call_c": operand_sets.@"f_call_c",
    /// `000d`
    /// Calls the bytecode or builtin effect handler designated by `E` using `I` argument registers, placing the result in `R`.; `0d 00 R. E. .. .. .. I. + ...`
    @"prompt": operand_sets.@"prompt",
    /// `000e`
    /// Returns flow control to the caller of current function, yielding `R` to the caller; `0e 00 R. __ __ __ __ __`
    @"return": operand_sets.@"return",
    /// `000f`
    /// Returns flow control to the offset associated with the current effect handler's `HandlerSetId`, yielding `R` as the cancellation value; `0f 00 R. __ __ __ __ __`
    @"cancel": operand_sets.@"cancel",
    /// `0010`
    /// Each byte, starting from the address in `Rx`, up to an offset of `Rz`, is set to the least significant byte of `Ry`; `10 00 Rx Ry Rz __ __ __`
    @"mem_set": operand_sets.@"mem_set",
    /// `0011`
    /// Each byte, starting from the address in `Rx`, up to an offset of `I`, is set to `Ry`; `11 00 Rx Ry I. .. .. ..`
    @"mem_set_a": operand_sets.@"mem_set_a",
    /// `0012`
    /// Each byte, starting from the address in `Rx`, up to an offset of `Ry`, is set to `I`; `12 00 Rx Ry I. __ __ __`
    @"mem_set_b": operand_sets.@"mem_set_b",
    /// `0013`
    /// Each byte, starting from the address in `Ry`, up to an offset of `Rz`, is copied to the same offset of the address in `Rx`; `13 00 Rx Ry Rz __ __ __`
    @"mem_copy": operand_sets.@"mem_copy",
    /// `0014`
    /// Each byte, starting from the address in `Ry`, up to an offset of `I`, is copied to the same offset from the address in `Rx`; `14 00 Rx Ry I. .. .. ..`
    @"mem_copy_a": operand_sets.@"mem_copy_a",
    /// `0015`
    /// Each byte, starting from the address of `C`, up to an offset of `Ry`, is copied to the same offset from the address in `Rx`; `15 00 Rx Ry C. .. .. ..`
    @"mem_copy_b": operand_sets.@"mem_copy_b",
    /// `0016`
    /// Each byte, starting from the addresses in `Rx` and `Ry`, up to an offset of `Rz`, are swapped with each-other; `16 00 Rx Ry Rz __ __ __`
    @"mem_swap": operand_sets.@"mem_swap",
    /// `0017`
    /// Each byte, starting from the addresses in `Rx` and `Ry`, up to an offset of `I`, are swapped with each-other; `17 00 Rx Ry I. .. .. ..`
    @"mem_swap_c": operand_sets.@"mem_swap_c",
    /// `0018`
    /// Get the address of a signed integer frame-relative operand stack offset `I`, placing it in `R`.
    /// 
    /// An operand stack offset of 1 is equivalent to 8 bytes down from the base of the stack frame; `18 00 R. I. .. .. .. __`
    @"addr_l": operand_sets.@"addr_l",
    /// `0019`
    /// Get the address of `U`, placing it in `R`; `19 00 R. U. __ __ __ __`
    @"addr_u": operand_sets.@"addr_u",
    /// `001a`
    /// Get the address of `G`, placing it in `R`; `1a 00 R. G. .. .. .. __`
    @"addr_g": operand_sets.@"addr_g",
    /// `001b`
    /// Get the address of `F`, placing it in `R`; `1b 00 R. F. .. .. .. __`
    @"addr_f": operand_sets.@"addr_f",
    /// `001c`
    /// Get the address of `B`, placing it in `R`; `1c 00 R. B. .. .. .. __`
    @"addr_b": operand_sets.@"addr_b",
    /// `001d`
    /// Get the address of `X`, placing it in `R`; `1d 00 R. X. .. .. .. __`
    @"addr_x": operand_sets.@"addr_x",
    /// `001e`
    /// Get the address of `C`, placing it in `R`; `1e 00 R. C. .. .. .. __`
    @"addr_c": operand_sets.@"addr_c",
    /// `001f`
    /// Loads an 8-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `1f 00 Rx Ry I. .. .. ..`
    @"load8": operand_sets.@"load8",
    /// `0020`
    /// Loads a 16-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `20 00 Rx Ry I. .. .. ..`
    @"load16": operand_sets.@"load16",
    /// `0021`
    /// Loads a 32-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `21 00 Rx Ry I. .. .. ..`
    @"load32": operand_sets.@"load32",
    /// `0022`
    /// Loads a 64-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `22 00 Rx Ry I. .. .. ..`
    @"load64": operand_sets.@"load64",
    /// `0023`
    /// Stores an 8-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `23 00 Rx Ry I. .. .. ..`
    @"store8": operand_sets.@"store8",
    /// `0024`
    /// Stores a 16-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `24 00 Rx Ry I. .. .. ..`
    @"store16": operand_sets.@"store16",
    /// `0025`
    /// Stores a 32-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `25 00 Rx Ry I. .. .. ..`
    @"store32": operand_sets.@"store32",
    /// `0026`
    /// Stores a 64-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `26 00 Rx Ry I. .. .. ..`
    @"store64": operand_sets.@"store64",
    /// `0027`
    /// Stores an 8-bit value to memory at the address in `R` offset by `Iy`; `27 00 R. Ix Iy .. .. ..`
    @"store8c": operand_sets.@"store8c",
    /// `0028`
    /// Stores a 16-bit value to memory at the address in `R` offset by `Iy`; `28 00 R. __ __ __ __ __ + Ix .. Iy .. .. .. __ __`
    @"store16c": operand_sets.@"store16c",
    /// `0029`
    /// Stores a 32-bit value to memory at the address in `R` offset by `Iy`; `29 00 R. __ __ __ __ __ + Ix .. .. .. Iy .. .. ..`
    @"store32c": operand_sets.@"store32c",
    /// `002a`
    /// Stores a 64-bit value (encoded as `Iy`) to memory at the address in `R` offset by `Ix`; `2a 00 R. Ix .. .. .. __ + Iy .. .. .. .. .. .. ..`
    @"store64c": operand_sets.@"store64c",
    /// `002b`
    /// 8-bit `Rx` ⇔ `Ry`; `2b 00 Rx Ry __ __ __ __`
    @"bit_swap8": operand_sets.@"bit_swap8",
    /// `002c`
    /// 16-bit `Rx` ⇔ `Ry`; `2c 00 Rx Ry __ __ __ __`
    @"bit_swap16": operand_sets.@"bit_swap16",
    /// `002d`
    /// 32-bit `Rx` ⇔ `Ry`; `2d 00 Rx Ry __ __ __ __`
    @"bit_swap32": operand_sets.@"bit_swap32",
    /// `002e`
    /// 64-bit `Rx` ⇔ `Ry`; `2e 00 Rx Ry __ __ __ __`
    @"bit_swap64": operand_sets.@"bit_swap64",
    /// `002f`
    /// 8-bit `Rx` = `Ry`; `2f 00 Rx Ry __ __ __ __`
    @"bit_copy8": operand_sets.@"bit_copy8",
    /// `0030`
    /// 16-bit `Rx` = `Ry`; `30 00 Rx Ry __ __ __ __`
    @"bit_copy16": operand_sets.@"bit_copy16",
    /// `0031`
    /// 32-bit `Rx` = `Ry`; `31 00 Rx Ry __ __ __ __`
    @"bit_copy32": operand_sets.@"bit_copy32",
    /// `0032`
    /// 64-bit `Rx` = `Ry`; `32 00 Rx Ry __ __ __ __`
    @"bit_copy64": operand_sets.@"bit_copy64",
    /// `0033`
    /// Copies an 8-bit `I` value into `R`; `33 00 R. I. __ __ __ __`
    @"bit_copy8c": operand_sets.@"bit_copy8c",
    /// `0034`
    /// Copies a 16-bit `I` value into `R`; `34 00 R. I. .. __ __ __`
    @"bit_copy16c": operand_sets.@"bit_copy16c",
    /// `0035`
    /// Copies a 32-bit `I` value into `R`; `35 00 R. I. .. .. .. __`
    @"bit_copy32c": operand_sets.@"bit_copy32c",
    /// `0036`
    /// Copies a 64-bit `I` value into `R`; `36 00 R. __ __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_copy64c": operand_sets.@"bit_copy64c",
    /// `0037`
    /// Counts the leading zeroes in 8-bits of `Ry`, placing the result in `Rx`; `37 00 Rx Ry __ __ __ __`
    @"bit_clz8": operand_sets.@"bit_clz8",
    /// `0038`
    /// Counts the leading zeroes in 16-bits of `Ry`, placing the result in `Rx`; `38 00 Rx Ry __ __ __ __`
    @"bit_clz16": operand_sets.@"bit_clz16",
    /// `0039`
    /// Counts the leading zeroes in 32-bits of `Ry`, placing the result in `Rx`; `39 00 Rx Ry __ __ __ __`
    @"bit_clz32": operand_sets.@"bit_clz32",
    /// `003a`
    /// Counts the leading zeroes in 64-bits of `Ry`, placing the result in `Rx`; `3a 00 Rx Ry __ __ __ __`
    @"bit_clz64": operand_sets.@"bit_clz64",
    /// `003b`
    /// Counts the set bits in 8-bits of `Ry`, placing the result in `Rx`; `3b 00 Rx Ry __ __ __ __`
    @"bit_pop8": operand_sets.@"bit_pop8",
    /// `003c`
    /// Counts the set bits in 16-bits of `Ry`, placing the result in `Rx`; `3c 00 Rx Ry __ __ __ __`
    @"bit_pop16": operand_sets.@"bit_pop16",
    /// `003d`
    /// Counts the set bits in 32-bits of `Ry`, placing the result in `Rx`; `3d 00 Rx Ry __ __ __ __`
    @"bit_pop32": operand_sets.@"bit_pop32",
    /// `003e`
    /// Counts the set bits in 64-bits of `Ry`, placing the result in `Rx`; `3e 00 Rx Ry __ __ __ __`
    @"bit_pop64": operand_sets.@"bit_pop64",
    /// `003f`
    /// 8-bit `Rx` = ~`Ry`; `3f 00 Rx Ry __ __ __ __`
    @"bit_not8": operand_sets.@"bit_not8",
    /// `0040`
    /// 16-bit `Rx` = ~`Ry`; `40 00 Rx Ry __ __ __ __`
    @"bit_not16": operand_sets.@"bit_not16",
    /// `0041`
    /// 32-bit `Rx` = ~`Ry`; `41 00 Rx Ry __ __ __ __`
    @"bit_not32": operand_sets.@"bit_not32",
    /// `0042`
    /// 64-bit `Rx` = ~`Ry`; `42 00 Rx Ry __ __ __ __`
    @"bit_not64": operand_sets.@"bit_not64",
    /// `0043`
    /// 8-bit `Rx` = `Ry` & `Rz`; `43 00 Rx Ry Rz __ __ __`
    @"bit_and8": operand_sets.@"bit_and8",
    /// `0044`
    /// 16-bit `Rx` = `Ry` & `Rz`; `44 00 Rx Ry Rz __ __ __`
    @"bit_and16": operand_sets.@"bit_and16",
    /// `0045`
    /// 32-bit `Rx` = `Ry` & `Rz`; `45 00 Rx Ry Rz __ __ __`
    @"bit_and32": operand_sets.@"bit_and32",
    /// `0046`
    /// 64-bit `Rx` = `Ry` & `Rz`; `46 00 Rx Ry Rz __ __ __`
    @"bit_and64": operand_sets.@"bit_and64",
    /// `0047`
    /// 8-bit `Rx` = `Ry` & `I`; `47 00 Rx Ry I. __ __ __`
    @"bit_and8c": operand_sets.@"bit_and8c",
    /// `0048`
    /// 16-bit `Rx` = `Ry` & `I`; `48 00 Rx Ry I. .. __ __`
    @"bit_and16c": operand_sets.@"bit_and16c",
    /// `0049`
    /// 32-bit `Rx` = `Ry` & `I`; `49 00 Rx Ry I. .. .. ..`
    @"bit_and32c": operand_sets.@"bit_and32c",
    /// `004a`
    /// 64-bit `Rx` = `Ry` & `I`; `4a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_and64c": operand_sets.@"bit_and64c",
    /// `004b`
    /// 8-bit `Rx` = `Ry` \| `Rz`; `4b 00 Rx Ry Rz __ __ __`
    @"bit_or8": operand_sets.@"bit_or8",
    /// `004c`
    /// 16-bit `Rx` = `Ry` \| `Rz`; `4c 00 Rx Ry Rz __ __ __`
    @"bit_or16": operand_sets.@"bit_or16",
    /// `004d`
    /// 32-bit `Rx` = `Ry` \| `Rz`; `4d 00 Rx Ry Rz __ __ __`
    @"bit_or32": operand_sets.@"bit_or32",
    /// `004e`
    /// 64-bit `Rx` = `Ry` \| `Rz`; `4e 00 Rx Ry Rz __ __ __`
    @"bit_or64": operand_sets.@"bit_or64",
    /// `004f`
    /// 8-bit `Rx` = `Ry` \| `I`; `4f 00 Rx Ry I. __ __ __`
    @"bit_or8c": operand_sets.@"bit_or8c",
    /// `0050`
    /// 16-bit `Rx` = `Ry` \| `I`; `50 00 Rx Ry I. .. __ __`
    @"bit_or16c": operand_sets.@"bit_or16c",
    /// `0051`
    /// 32-bit `Rx` = `Ry` \| `I`; `51 00 Rx Ry I. .. .. ..`
    @"bit_or32c": operand_sets.@"bit_or32c",
    /// `0052`
    /// 64-bit `Rx` = `Ry` \| `I`; `52 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_or64c": operand_sets.@"bit_or64c",
    /// `0053`
    /// 8-bit `Rx` = `Ry` ^ `Rz`; `53 00 Rx Ry Rz __ __ __`
    @"bit_xor8": operand_sets.@"bit_xor8",
    /// `0054`
    /// 16-bit `Rx` = `Ry` ^ `Rz`; `54 00 Rx Ry Rz __ __ __`
    @"bit_xor16": operand_sets.@"bit_xor16",
    /// `0055`
    /// 32-bit `Rx` = `Ry` ^ `Rz`; `55 00 Rx Ry Rz __ __ __`
    @"bit_xor32": operand_sets.@"bit_xor32",
    /// `0056`
    /// 64-bit `Rx` = `Ry` ^ `Rz`; `56 00 Rx Ry Rz __ __ __`
    @"bit_xor64": operand_sets.@"bit_xor64",
    /// `0057`
    /// 8-bit `Rx` = `Ry` ^ `I`; `57 00 Rx Ry I. __ __ __`
    @"bit_xor8c": operand_sets.@"bit_xor8c",
    /// `0058`
    /// 16-bit `Rx` = `Ry` ^ `I`; `58 00 Rx Ry I. .. __ __`
    @"bit_xor16c": operand_sets.@"bit_xor16c",
    /// `0059`
    /// 32-bit `Rx` = `Ry` ^ `I`; `59 00 Rx Ry I. .. .. ..`
    @"bit_xor32c": operand_sets.@"bit_xor32c",
    /// `005a`
    /// 64-bit `Rx` = `Ry` ^ `I`; `5a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_xor64c": operand_sets.@"bit_xor64c",
    /// `005b`
    /// 8-bit `Rx` = `Ry` << `Rz`; `5b 00 Rx Ry Rz __ __ __`
    @"bit_lshift8": operand_sets.@"bit_lshift8",
    /// `005c`
    /// 16-bit `Rx` = `Ry` << `Rz`; `5c 00 Rx Ry Rz __ __ __`
    @"bit_lshift16": operand_sets.@"bit_lshift16",
    /// `005d`
    /// 32-bit `Rx` = `Ry` << `Rz`; `5d 00 Rx Ry Rz __ __ __`
    @"bit_lshift32": operand_sets.@"bit_lshift32",
    /// `005e`
    /// 64-bit `Rx` = `Ry` << `Rz`; `5e 00 Rx Ry Rz __ __ __`
    @"bit_lshift64": operand_sets.@"bit_lshift64",
    /// `005f`
    /// 8-bit `Rx` = `I` << `Ry`; `5f 00 Rx Ry I. __ __ __`
    @"bit_lshift8a": operand_sets.@"bit_lshift8a",
    /// `0060`
    /// 16-bit `Rx` = `I` << `Ry`; `60 00 Rx Ry I. .. __ __`
    @"bit_lshift16a": operand_sets.@"bit_lshift16a",
    /// `0061`
    /// 32-bit `Rx` = `I` << `Ry`; `61 00 Rx Ry I. .. .. ..`
    @"bit_lshift32a": operand_sets.@"bit_lshift32a",
    /// `0062`
    /// 64-bit `Rx` = `I` << `Ry`; `62 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"bit_lshift64a": operand_sets.@"bit_lshift64a",
    /// `0063`
    /// 8-bit `Rx` = `Ry` << `I`; `63 00 Rx Ry I. __ __ __`
    @"bit_lshift8b": operand_sets.@"bit_lshift8b",
    /// `0064`
    /// 16-bit `Rx` = `Ry` << `I`; `64 00 Rx Ry I. __ __ __`
    @"bit_lshift16b": operand_sets.@"bit_lshift16b",
    /// `0065`
    /// 32-bit `Rx` = `Ry` << `I`; `65 00 Rx Ry I. __ __ __`
    @"bit_lshift32b": operand_sets.@"bit_lshift32b",
    /// `0066`
    /// 64-bit `Rx` = `Ry` << `I`; `66 00 Rx Ry I. __ __ __`
    @"bit_lshift64b": operand_sets.@"bit_lshift64b",
    /// `0067`
    /// 8-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `67 00 Rx Ry Rz __ __ __`
    @"u_rshift8": operand_sets.@"u_rshift8",
    /// `0068`
    /// 16-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `68 00 Rx Ry Rz __ __ __`
    @"u_rshift16": operand_sets.@"u_rshift16",
    /// `0069`
    /// 32-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `69 00 Rx Ry Rz __ __ __`
    @"u_rshift32": operand_sets.@"u_rshift32",
    /// `006a`
    /// 64-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `6a 00 Rx Ry Rz __ __ __`
    @"u_rshift64": operand_sets.@"u_rshift64",
    /// `006b`
    /// 8-bit unsigned/logical `Rx` = `I` >> `Ry`; `6b 00 Rx Ry I. __ __ __`
    @"u_rshift8a": operand_sets.@"u_rshift8a",
    /// `006c`
    /// 16-bit unsigned/logical `Rx` = `I` >> `Ry`; `6c 00 Rx Ry I. .. __ __`
    @"u_rshift16a": operand_sets.@"u_rshift16a",
    /// `006d`
    /// 32-bit unsigned/logical `Rx` = `I` >> `Ry`; `6d 00 Rx Ry I. .. .. ..`
    @"u_rshift32a": operand_sets.@"u_rshift32a",
    /// `006e`
    /// 64-bit unsigned/logical `Rx` = `I` >> `Ry`; `6e 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_rshift64a": operand_sets.@"u_rshift64a",
    /// `006f`
    /// 8-bit unsigned/logical `Rx` = `Ry` >> `I`; `6f 00 Rx Ry I. __ __ __`
    @"u_rshift8b": operand_sets.@"u_rshift8b",
    /// `0070`
    /// 16-bit unsigned/logical `Rx` = `Ry` >> `I`; `70 00 Rx Ry I. __ __ __`
    @"u_rshift16b": operand_sets.@"u_rshift16b",
    /// `0071`
    /// 32-bit unsigned/logical `Rx` = `Ry` >> `I`; `71 00 Rx Ry I. __ __ __`
    @"u_rshift32b": operand_sets.@"u_rshift32b",
    /// `0072`
    /// 64-bit unsigned/logical `Rx` = `Ry` >> `I`; `72 00 Rx Ry I. __ __ __`
    @"u_rshift64b": operand_sets.@"u_rshift64b",
    /// `0073`
    /// 8-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `73 00 Rx Ry Rz __ __ __`
    @"s_rshift8": operand_sets.@"s_rshift8",
    /// `0074`
    /// 16-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `74 00 Rx Ry Rz __ __ __`
    @"s_rshift16": operand_sets.@"s_rshift16",
    /// `0075`
    /// 32-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `75 00 Rx Ry Rz __ __ __`
    @"s_rshift32": operand_sets.@"s_rshift32",
    /// `0076`
    /// 64-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `76 00 Rx Ry Rz __ __ __`
    @"s_rshift64": operand_sets.@"s_rshift64",
    /// `0077`
    /// 8-bit signed/arithmetic `Rx` = `I` >> `Ry`; `77 00 Rx Ry I. __ __ __`
    @"s_rshift8a": operand_sets.@"s_rshift8a",
    /// `0078`
    /// 16-bit signed/arithmetic `Rx` = `I` >> `Ry`; `78 00 Rx Ry I. .. __ __`
    @"s_rshift16a": operand_sets.@"s_rshift16a",
    /// `0079`
    /// 32-bit signed/arithmetic `Rx` = `I` >> `Ry`; `79 00 Rx Ry I. .. .. ..`
    @"s_rshift32a": operand_sets.@"s_rshift32a",
    /// `007a`
    /// 64-bit signed/arithmetic `Rx` = `I` >> `Ry`; `7a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_rshift64a": operand_sets.@"s_rshift64a",
    /// `007b`
    /// 8-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7b 00 Rx Ry I. __ __ __`
    @"s_rshift8b": operand_sets.@"s_rshift8b",
    /// `007c`
    /// 16-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7c 00 Rx Ry I. __ __ __`
    @"s_rshift16b": operand_sets.@"s_rshift16b",
    /// `007d`
    /// 32-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7d 00 Rx Ry I. __ __ __`
    @"s_rshift32b": operand_sets.@"s_rshift32b",
    /// `007e`
    /// 64-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7e 00 Rx Ry I. __ __ __`
    @"s_rshift64b": operand_sets.@"s_rshift64b",
    /// `007f`
    /// 8-bit integer `Rx` = `Ry` == `Rz`; `7f 00 Rx Ry Rz __ __ __`
    @"i_eq8": operand_sets.@"i_eq8",
    /// `0080`
    /// 16-bit integer `Rx` = `Ry` == `Rz`; `80 00 Rx Ry Rz __ __ __`
    @"i_eq16": operand_sets.@"i_eq16",
    /// `0081`
    /// 32-bit integer `Rx` = `Ry` == `Rz`; `81 00 Rx Ry Rz __ __ __`
    @"i_eq32": operand_sets.@"i_eq32",
    /// `0082`
    /// 64-bit integer `Rx` = `Ry` == `Rz`; `82 00 Rx Ry Rz __ __ __`
    @"i_eq64": operand_sets.@"i_eq64",
    /// `0083`
    /// 8-bit integer `Rx` = `Ry` == `I`; `83 00 Rx Ry I. __ __ __`
    @"i_eq8c": operand_sets.@"i_eq8c",
    /// `0084`
    /// 16-bit integer `Rx` = `Ry` == `I`; `84 00 Rx Ry I. .. __ __`
    @"i_eq16c": operand_sets.@"i_eq16c",
    /// `0085`
    /// 32-bit integer `Rx` = `Ry` == `I`; `85 00 Rx Ry I. .. .. ..`
    @"i_eq32c": operand_sets.@"i_eq32c",
    /// `0086`
    /// 64-bit integer `Rx` = `Ry` == `I`; `86 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_eq64c": operand_sets.@"i_eq64c",
    /// `0087`
    /// 32-bit floating point `Rx` = `Ry` == `Rz`; `87 00 Rx Ry Rz __ __ __`
    @"f_eq32": operand_sets.@"f_eq32",
    /// `0088`
    /// 64-bit floating point `Rx` = `Ry` == `Rz`; `88 00 Rx Ry Rz __ __ __`
    @"f_eq64": operand_sets.@"f_eq64",
    /// `0089`
    /// 32-bit floating point `Rx` = `Ry` == `I`; `89 00 Rx Ry I. .. .. ..`
    @"f_eq32c": operand_sets.@"f_eq32c",
    /// `008a`
    /// 64-bit floating point `Rx` = `Ry` == `I`; `8a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_eq64c": operand_sets.@"f_eq64c",
    /// `008b`
    /// 8-bit integer `Rx` = `Ry` != `Rz`; `8b 00 Rx Ry Rz __ __ __`
    @"i_ne8": operand_sets.@"i_ne8",
    /// `008c`
    /// 16-bit integer `Rx` = `Ry` != `Rz`; `8c 00 Rx Ry Rz __ __ __`
    @"i_ne16": operand_sets.@"i_ne16",
    /// `008d`
    /// 32-bit integer `Rx` = `Ry` != `Rz`; `8d 00 Rx Ry Rz __ __ __`
    @"i_ne32": operand_sets.@"i_ne32",
    /// `008e`
    /// 64-bit integer `Rx` = `Ry` != `Rz`; `8e 00 Rx Ry Rz __ __ __`
    @"i_ne64": operand_sets.@"i_ne64",
    /// `008f`
    /// 8-bit integer `Rx` = `Ry` != `I`; `8f 00 Rx Ry I. __ __ __`
    @"i_ne8c": operand_sets.@"i_ne8c",
    /// `0090`
    /// 16-bit integer `Rx` = `Ry` != `I`; `90 00 Rx Ry I. .. __ __`
    @"i_ne16c": operand_sets.@"i_ne16c",
    /// `0091`
    /// 32-bit integer `Rx` = `Ry` != `I`; `91 00 Rx Ry I. .. .. ..`
    @"i_ne32c": operand_sets.@"i_ne32c",
    /// `0092`
    /// 64-bit integer `Rx` = `Ry` != `I`; `92 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_ne64c": operand_sets.@"i_ne64c",
    /// `0093`
    /// 32-bit floating point `Rx` = `Ry` != `Rz`; `93 00 Rx Ry Rz __ __ __`
    @"f_ne32": operand_sets.@"f_ne32",
    /// `0094`
    /// 64-bit floating point `Rx` = `Ry` != `Rz`; `94 00 Rx Ry Rz __ __ __`
    @"f_ne64": operand_sets.@"f_ne64",
    /// `0095`
    /// 32-bit floating point `Rx` = `Ry` != `I`; `95 00 Rx Ry I. .. .. ..`
    @"f_ne32c": operand_sets.@"f_ne32c",
    /// `0096`
    /// 64-bit floating point `Rx` = `Ry` != `I`; `96 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_ne64c": operand_sets.@"f_ne64c",
    /// `0097`
    /// 8-bit unsigned integer `Rx` = `Ry` < `Rz`; `97 00 Rx Ry Rz __ __ __`
    @"u_lt8": operand_sets.@"u_lt8",
    /// `0098`
    /// 16-bit unsigned integer `Rx` = `Ry` < `Rz`; `98 00 Rx Ry Rz __ __ __`
    @"u_lt16": operand_sets.@"u_lt16",
    /// `0099`
    /// 32-bit unsigned integer `Rx` = `Ry` < `Rz`; `99 00 Rx Ry Rz __ __ __`
    @"u_lt32": operand_sets.@"u_lt32",
    /// `009a`
    /// 64-bit unsigned integer `Rx` = `Ry` < `Rz`; `9a 00 Rx Ry Rz __ __ __`
    @"u_lt64": operand_sets.@"u_lt64",
    /// `009b`
    /// 8-bit unsigned integer `Rx` = `I` < `Ry`; `9b 00 Rx Ry I. __ __ __`
    @"u_lt8a": operand_sets.@"u_lt8a",
    /// `009c`
    /// 16-bit unsigned integer `Rx` = `I` < `Ry`; `9c 00 Rx Ry I. .. __ __`
    @"u_lt16a": operand_sets.@"u_lt16a",
    /// `009d`
    /// 32-bit unsigned integer `Rx` = `I` < `Ry`; `9d 00 Rx Ry I. .. .. ..`
    @"u_lt32a": operand_sets.@"u_lt32a",
    /// `009e`
    /// 64-bit unsigned integer `Rx` = `I` < `Ry`; `9e 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_lt64a": operand_sets.@"u_lt64a",
    /// `009f`
    /// 8-bit unsigned integer `Rx` = `Ry` < `I`; `9f 00 Rx Ry I. __ __ __`
    @"u_lt8b": operand_sets.@"u_lt8b",
    /// `00a0`
    /// 16-bit unsigned integer `Rx` = `Ry` < `I`; `a0 00 Rx Ry I. .. __ __`
    @"u_lt16b": operand_sets.@"u_lt16b",
    /// `00a1`
    /// 32-bit unsigned integer `Rx` = `Ry` < `I`; `a1 00 Rx Ry I. .. .. ..`
    @"u_lt32b": operand_sets.@"u_lt32b",
    /// `00a2`
    /// 64-bit unsigned integer `Rx` = `Ry` < `I`; `a2 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_lt64b": operand_sets.@"u_lt64b",
    /// `00a3`
    /// 8-bit signed integer `Rx` = `Ry` < `Rz`; `a3 00 Rx Ry Rz __ __ __`
    @"s_lt8": operand_sets.@"s_lt8",
    /// `00a4`
    /// 16-bit signed integer `Rx` = `Ry` < `Rz`; `a4 00 Rx Ry Rz __ __ __`
    @"s_lt16": operand_sets.@"s_lt16",
    /// `00a5`
    /// 32-bit signed integer `Rx` = `Ry` < `Rz`; `a5 00 Rx Ry Rz __ __ __`
    @"s_lt32": operand_sets.@"s_lt32",
    /// `00a6`
    /// 64-bit signed integer `Rx` = `Ry` < `Rz`; `a6 00 Rx Ry Rz __ __ __`
    @"s_lt64": operand_sets.@"s_lt64",
    /// `00a7`
    /// 8-bit signed integer `Rx` = `I` < `Ry`; `a7 00 Rx Ry I. __ __ __`
    @"s_lt8a": operand_sets.@"s_lt8a",
    /// `00a8`
    /// 16-bit signed integer `Rx` = `I` < `Ry`; `a8 00 Rx Ry I. .. __ __`
    @"s_lt16a": operand_sets.@"s_lt16a",
    /// `00a9`
    /// 32-bit signed integer `Rx` = `I` < `Ry`; `a9 00 Rx Ry I. .. .. ..`
    @"s_lt32a": operand_sets.@"s_lt32a",
    /// `00aa`
    /// 64-bit signed integer `Rx` = `I` < `Ry`; `aa 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_lt64a": operand_sets.@"s_lt64a",
    /// `00ab`
    /// 8-bit signed integer `Rx` = `Ry` < `I`; `ab 00 Rx Ry I. __ __ __`
    @"s_lt8b": operand_sets.@"s_lt8b",
    /// `00ac`
    /// 16-bit signed integer `Rx` = `Ry` < `I`; `ac 00 Rx Ry I. .. __ __`
    @"s_lt16b": operand_sets.@"s_lt16b",
    /// `00ad`
    /// 32-bit signed integer `Rx` = `Ry` < `I`; `ad 00 Rx Ry I. .. .. ..`
    @"s_lt32b": operand_sets.@"s_lt32b",
    /// `00ae`
    /// 64-bit signed integer `Rx` = `Ry` < `I`; `ae 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_lt64b": operand_sets.@"s_lt64b",
    /// `00af`
    /// 32-bit floating point `Rx` = `Ry` < `Rz`; `af 00 Rx Ry Rz __ __ __`
    @"f_lt32": operand_sets.@"f_lt32",
    /// `00b0`
    /// 32-bit floating point `Rx` = `I` < `Ry`; `b0 00 Rx Ry I. .. .. ..`
    @"f_lt32a": operand_sets.@"f_lt32a",
    /// `00b1`
    /// 32-bit floating point `Rx` = `Ry` < `I`; `b1 00 Rx Ry I. .. .. ..`
    @"f_lt32b": operand_sets.@"f_lt32b",
    /// `00b2`
    /// 64-bit floating point `Rx` = `Ry` < `Rz`; `b2 00 Rx Ry Rz __ __ __`
    @"f_lt64": operand_sets.@"f_lt64",
    /// `00b3`
    /// 64-bit floating point `Rx` = `I` < `Ry`; `b3 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_lt64a": operand_sets.@"f_lt64a",
    /// `00b4`
    /// 64-bit floating point `Rx` = `Ry` < `I`; `b4 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_lt64b": operand_sets.@"f_lt64b",
    /// `00b5`
    /// 8-bit unsigned integer `Rx` = `Ry` > `Rz`; `b5 00 Rx Ry Rz __ __ __`
    @"u_gt8": operand_sets.@"u_gt8",
    /// `00b6`
    /// 16-bit unsigned integer `Rx` = `Ry` > `Rz`; `b6 00 Rx Ry Rz __ __ __`
    @"u_gt16": operand_sets.@"u_gt16",
    /// `00b7`
    /// 32-bit unsigned integer `Rx` = `Ry` > `Rz`; `b7 00 Rx Ry Rz __ __ __`
    @"u_gt32": operand_sets.@"u_gt32",
    /// `00b8`
    /// 64-bit unsigned integer `Rx` = `Ry` > `Rz`; `b8 00 Rx Ry Rz __ __ __`
    @"u_gt64": operand_sets.@"u_gt64",
    /// `00b9`
    /// 8-bit unsigned integer `Rx` = `I` > `Ry`; `b9 00 Rx Ry I. __ __ __`
    @"u_gt8a": operand_sets.@"u_gt8a",
    /// `00ba`
    /// 16-bit unsigned integer `Rx` = `I` > `Ry`; `ba 00 Rx Ry I. .. __ __`
    @"u_gt16a": operand_sets.@"u_gt16a",
    /// `00bb`
    /// 32-bit unsigned integer `Rx` = `I` > `Ry`; `bb 00 Rx Ry I. .. .. ..`
    @"u_gt32a": operand_sets.@"u_gt32a",
    /// `00bc`
    /// 64-bit unsigned integer `Rx` = `I` > `Ry`; `bc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_gt64a": operand_sets.@"u_gt64a",
    /// `00bd`
    /// 8-bit unsigned integer `Rx` = `Ry` > `I`; `bd 00 Rx Ry I. __ __ __`
    @"u_gt8b": operand_sets.@"u_gt8b",
    /// `00be`
    /// 16-bit unsigned integer `Rx` = `Ry` > `I`; `be 00 Rx Ry I. .. __ __`
    @"u_gt16b": operand_sets.@"u_gt16b",
    /// `00bf`
    /// 32-bit unsigned integer `Rx` = `Ry` > `I`; `bf 00 Rx Ry I. .. .. ..`
    @"u_gt32b": operand_sets.@"u_gt32b",
    /// `00c0`
    /// 64-bit unsigned integer `Rx` = `Ry` > `I`; `c0 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_gt64b": operand_sets.@"u_gt64b",
    /// `00c1`
    /// 8-bit signed integer `Rx` = `Ry` > `Rz`; `c1 00 Rx Ry Rz __ __ __`
    @"s_gt8": operand_sets.@"s_gt8",
    /// `00c2`
    /// 16-bit signed integer `Rx` = `Ry` > `Rz`; `c2 00 Rx Ry Rz __ __ __`
    @"s_gt16": operand_sets.@"s_gt16",
    /// `00c3`
    /// 32-bit signed integer `Rx` = `Ry` > `Rz`; `c3 00 Rx Ry Rz __ __ __`
    @"s_gt32": operand_sets.@"s_gt32",
    /// `00c4`
    /// 64-bit signed integer `Rx` = `Ry` > `Rz`; `c4 00 Rx Ry Rz __ __ __`
    @"s_gt64": operand_sets.@"s_gt64",
    /// `00c5`
    /// 8-bit signed integer `Rx` = `I` > `Ry`; `c5 00 Rx Ry I. __ __ __`
    @"s_gt8a": operand_sets.@"s_gt8a",
    /// `00c6`
    /// 16-bit signed integer `Rx` = `I` > `Ry`; `c6 00 Rx Ry I. .. __ __`
    @"s_gt16a": operand_sets.@"s_gt16a",
    /// `00c7`
    /// 32-bit signed integer `Rx` = `I` > `Ry`; `c7 00 Rx Ry I. .. .. ..`
    @"s_gt32a": operand_sets.@"s_gt32a",
    /// `00c8`
    /// 64-bit signed integer `Rx` = `I` > `Ry`; `c8 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_gt64a": operand_sets.@"s_gt64a",
    /// `00c9`
    /// 8-bit signed integer `Rx` = `Ry` > `I`; `c9 00 Rx Ry I. __ __ __`
    @"s_gt8b": operand_sets.@"s_gt8b",
    /// `00ca`
    /// 16-bit signed integer `Rx` = `Ry` > `I`; `ca 00 Rx Ry I. .. __ __`
    @"s_gt16b": operand_sets.@"s_gt16b",
    /// `00cb`
    /// 32-bit signed integer `Rx` = `Ry` > `I`; `cb 00 Rx Ry I. .. .. ..`
    @"s_gt32b": operand_sets.@"s_gt32b",
    /// `00cc`
    /// 64-bit signed integer `Rx` = `Ry` > `I`; `cc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_gt64b": operand_sets.@"s_gt64b",
    /// `00cd`
    /// 32-bit floating point `Rx` = `Ry` > `Rz`; `cd 00 Rx Ry Rz __ __ __`
    @"f_gt32": operand_sets.@"f_gt32",
    /// `00ce`
    /// 32-bit floating point `Rx` = `I` > `Ry`; `ce 00 Rx Ry I. .. .. ..`
    @"f_gt32a": operand_sets.@"f_gt32a",
    /// `00cf`
    /// 32-bit floating point `Rx` = `Ry` > `I`; `cf 00 Rx Ry I. .. .. ..`
    @"f_gt32b": operand_sets.@"f_gt32b",
    /// `00d0`
    /// 64-bit floating point `Rx` = `Ry` > `Rz`; `d0 00 Rx Ry Rz __ __ __`
    @"f_gt64": operand_sets.@"f_gt64",
    /// `00d1`
    /// 64-bit floating point `Rx` = `I` > `Ry`; `d1 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_gt64a": operand_sets.@"f_gt64a",
    /// `00d2`
    /// 64-bit floating point `Rx` = `Ry` > `I`; `d2 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_gt64b": operand_sets.@"f_gt64b",
    /// `00d3`
    /// 8-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d3 00 Rx Ry Rz __ __ __`
    @"u_le8": operand_sets.@"u_le8",
    /// `00d4`
    /// 16-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d4 00 Rx Ry Rz __ __ __`
    @"u_le16": operand_sets.@"u_le16",
    /// `00d5`
    /// 32-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d5 00 Rx Ry Rz __ __ __`
    @"u_le32": operand_sets.@"u_le32",
    /// `00d6`
    /// 64-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d6 00 Rx Ry Rz __ __ __`
    @"u_le64": operand_sets.@"u_le64",
    /// `00d7`
    /// 8-bit unsigned integer `Rx` = `I` <= `Ry`; `d7 00 Rx Ry I. __ __ __`
    @"u_le8a": operand_sets.@"u_le8a",
    /// `00d8`
    /// 16-bit unsigned integer `Rx` = `I` <= `Ry`; `d8 00 Rx Ry I. .. __ __`
    @"u_le16a": operand_sets.@"u_le16a",
    /// `00d9`
    /// 32-bit unsigned integer `Rx` = `I` <= `Ry`; `d9 00 Rx Ry I. .. .. ..`
    @"u_le32a": operand_sets.@"u_le32a",
    /// `00da`
    /// 64-bit unsigned integer `Rx` = `I` <= `Ry`; `da 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_le64a": operand_sets.@"u_le64a",
    /// `00db`
    /// 8-bit unsigned integer `Rx` = `Ry` <= `I`; `db 00 Rx Ry I. __ __ __`
    @"u_le8b": operand_sets.@"u_le8b",
    /// `00dc`
    /// 16-bit unsigned integer `Rx` = `Ry` <= `I`; `dc 00 Rx Ry I. .. __ __`
    @"u_le16b": operand_sets.@"u_le16b",
    /// `00dd`
    /// 32-bit unsigned integer `Rx` = `Ry` <= `I`; `dd 00 Rx Ry I. .. .. ..`
    @"u_le32b": operand_sets.@"u_le32b",
    /// `00de`
    /// 64-bit unsigned integer `Rx` = `Ry` <= `I`; `de 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_le64b": operand_sets.@"u_le64b",
    /// `00df`
    /// 8-bit signed integer `Rx` = `Ry` <= `Rz`; `df 00 Rx Ry Rz __ __ __`
    @"s_le8": operand_sets.@"s_le8",
    /// `00e0`
    /// 16-bit signed integer `Rx` = `Ry` <= `Rz`; `e0 00 Rx Ry Rz __ __ __`
    @"s_le16": operand_sets.@"s_le16",
    /// `00e1`
    /// 32-bit signed integer `Rx` = `Ry` <= `Rz`; `e1 00 Rx Ry Rz __ __ __`
    @"s_le32": operand_sets.@"s_le32",
    /// `00e2`
    /// 64-bit signed integer `Rx` = `Ry` <= `Rz`; `e2 00 Rx Ry Rz __ __ __`
    @"s_le64": operand_sets.@"s_le64",
    /// `00e3`
    /// 8-bit signed integer `Rx` = `I` <= `Ry`; `e3 00 Rx Ry I. __ __ __`
    @"s_le8a": operand_sets.@"s_le8a",
    /// `00e4`
    /// 16-bit signed integer `Rx` = `I` <= `Ry`; `e4 00 Rx Ry I. .. __ __`
    @"s_le16a": operand_sets.@"s_le16a",
    /// `00e5`
    /// 32-bit signed integer `Rx` = `I` <= `Ry`; `e5 00 Rx Ry I. .. .. ..`
    @"s_le32a": operand_sets.@"s_le32a",
    /// `00e6`
    /// 64-bit signed integer `Rx` = `I` <= `Ry`; `e6 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_le64a": operand_sets.@"s_le64a",
    /// `00e7`
    /// 8-bit signed integer `Rx` = `Ry` <= `I`; `e7 00 Rx Ry I. __ __ __`
    @"s_le8b": operand_sets.@"s_le8b",
    /// `00e8`
    /// 16-bit signed integer `Rx` = `Ry` <= `I`; `e8 00 Rx Ry I. .. __ __`
    @"s_le16b": operand_sets.@"s_le16b",
    /// `00e9`
    /// 32-bit signed integer `Rx` = `Ry` <= `I`; `e9 00 Rx Ry I. .. .. ..`
    @"s_le32b": operand_sets.@"s_le32b",
    /// `00ea`
    /// 64-bit signed integer `Rx` = `Ry` <= `I`; `ea 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_le64b": operand_sets.@"s_le64b",
    /// `00eb`
    /// 32-bit floating point `Rx` = `Ry` <= `Rz`; `eb 00 Rx Ry Rz __ __ __`
    @"f_le32": operand_sets.@"f_le32",
    /// `00ec`
    /// 32-bit floating point `Rx` = `I` <= `Ry`; `ec 00 Rx Ry I. .. .. ..`
    @"f_le32a": operand_sets.@"f_le32a",
    /// `00ed`
    /// 32-bit floating point `Rx` = `Ry` <= `I`; `ed 00 Rx Ry I. .. .. ..`
    @"f_le32b": operand_sets.@"f_le32b",
    /// `00ee`
    /// 64-bit floating point `Rx` = `Ry` <= `Rz`; `ee 00 Rx Ry Rz __ __ __`
    @"f_le64": operand_sets.@"f_le64",
    /// `00ef`
    /// 64-bit floating point `Rx` = `I` <= `Ry`; `ef 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_le64a": operand_sets.@"f_le64a",
    /// `00f0`
    /// 64-bit floating point `Rx` = `Ry` <= `I`; `f0 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_le64b": operand_sets.@"f_le64b",
    /// `00f1`
    /// 8-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f1 00 Rx Ry Rz __ __ __`
    @"u_ge8": operand_sets.@"u_ge8",
    /// `00f2`
    /// 16-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f2 00 Rx Ry Rz __ __ __`
    @"u_ge16": operand_sets.@"u_ge16",
    /// `00f3`
    /// 32-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f3 00 Rx Ry Rz __ __ __`
    @"u_ge32": operand_sets.@"u_ge32",
    /// `00f4`
    /// 64-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f4 00 Rx Ry Rz __ __ __`
    @"u_ge64": operand_sets.@"u_ge64",
    /// `00f5`
    /// 8-bit unsigned integer `Rx` = `I` >= `Ry`; `f5 00 Rx Ry I. __ __ __`
    @"u_ge8a": operand_sets.@"u_ge8a",
    /// `00f6`
    /// 16-bit unsigned integer `Rx` = `I` >= `Ry`; `f6 00 Rx Ry I. .. __ __`
    @"u_ge16a": operand_sets.@"u_ge16a",
    /// `00f7`
    /// 32-bit unsigned integer `Rx` = `I` >= `Ry`; `f7 00 Rx Ry I. .. .. ..`
    @"u_ge32a": operand_sets.@"u_ge32a",
    /// `00f8`
    /// 64-bit unsigned integer `Rx` = `I` >= `Ry`; `f8 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_ge64a": operand_sets.@"u_ge64a",
    /// `00f9`
    /// 8-bit unsigned integer `Rx` = `Ry` >= `I`; `f9 00 Rx Ry I. __ __ __`
    @"u_ge8b": operand_sets.@"u_ge8b",
    /// `00fa`
    /// 16-bit unsigned integer `Rx` = `Ry` >= `I`; `fa 00 Rx Ry I. .. __ __`
    @"u_ge16b": operand_sets.@"u_ge16b",
    /// `00fb`
    /// 32-bit unsigned integer `Rx` = `Ry` >= `I`; `fb 00 Rx Ry I. .. .. ..`
    @"u_ge32b": operand_sets.@"u_ge32b",
    /// `00fc`
    /// 64-bit unsigned integer `Rx` = `Ry` >= `I`; `fc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_ge64b": operand_sets.@"u_ge64b",
    /// `00fd`
    /// 8-bit signed integer `Rx` = `Ry` >= `Rz`; `fd 00 Rx Ry Rz __ __ __`
    @"s_ge8": operand_sets.@"s_ge8",
    /// `00fe`
    /// 16-bit signed integer `Rx` = `Ry` >= `Rz`; `fe 00 Rx Ry Rz __ __ __`
    @"s_ge16": operand_sets.@"s_ge16",
    /// `00ff`
    /// 32-bit signed integer `Rx` = `Ry` >= `Rz`; `ff 00 Rx Ry Rz __ __ __`
    @"s_ge32": operand_sets.@"s_ge32",
    /// `0100`
    /// 64-bit signed integer `Rx` = `Ry` >= `Rz`; `00 01 Rx Ry Rz __ __ __`
    @"s_ge64": operand_sets.@"s_ge64",
    /// `0101`
    /// 8-bit signed integer `Rx` = `I` >= `Ry`; `01 01 Rx Ry I. __ __ __`
    @"s_ge8a": operand_sets.@"s_ge8a",
    /// `0102`
    /// 16-bit signed integer `Rx` = `I` >= `Ry`; `02 01 Rx Ry I. .. __ __`
    @"s_ge16a": operand_sets.@"s_ge16a",
    /// `0103`
    /// 32-bit signed integer `Rx` = `I` >= `Ry`; `03 01 Rx Ry I. .. .. ..`
    @"s_ge32a": operand_sets.@"s_ge32a",
    /// `0104`
    /// 64-bit signed integer `Rx` = `I` >= `Ry`; `04 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_ge64a": operand_sets.@"s_ge64a",
    /// `0105`
    /// 8-bit signed integer `Rx` = `Ry` >= `I`; `05 01 Rx Ry I. __ __ __`
    @"s_ge8b": operand_sets.@"s_ge8b",
    /// `0106`
    /// 16-bit signed integer `Rx` = `Ry` >= `I`; `06 01 Rx Ry I. .. __ __`
    @"s_ge16b": operand_sets.@"s_ge16b",
    /// `0107`
    /// 32-bit signed integer `Rx` = `Ry` >= `I`; `07 01 Rx Ry I. .. .. ..`
    @"s_ge32b": operand_sets.@"s_ge32b",
    /// `0108`
    /// 64-bit signed integer `Rx` = `Ry` >= `I`; `08 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_ge64b": operand_sets.@"s_ge64b",
    /// `0109`
    /// 32-bit floating point `Rx` = `Ry` >= `Rz`; `09 01 Rx Ry Rz __ __ __`
    @"f_ge32": operand_sets.@"f_ge32",
    /// `010a`
    /// 32-bit floating point `Rx` = `I` >= `Ry`; `0a 01 Rx Ry I. .. .. ..`
    @"f_ge32a": operand_sets.@"f_ge32a",
    /// `010b`
    /// 32-bit floating point `Rx` = `Ry` >= `I`; `0b 01 Rx Ry I. .. .. ..`
    @"f_ge32b": operand_sets.@"f_ge32b",
    /// `010c`
    /// 64-bit floating point `Rx` = `Ry` >= `Rz`; `0c 01 Rx Ry Rz __ __ __`
    @"f_ge64": operand_sets.@"f_ge64",
    /// `010d`
    /// 64-bit floating point `Rx` = `I` >= `Ry`; `0d 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_ge64a": operand_sets.@"f_ge64a",
    /// `010e`
    /// 64-bit floating point `Rx` = `Ry` >= `I`; `0e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_ge64b": operand_sets.@"f_ge64b",
    /// `010f`
    /// 8-bit `Rx` = -`Ry`; `0f 01 Rx Ry __ __ __ __`
    @"s_neg8": operand_sets.@"s_neg8",
    /// `0110`
    /// 16-bit `Rx` = -`Ry`; `10 01 Rx Ry __ __ __ __`
    @"s_neg16": operand_sets.@"s_neg16",
    /// `0111`
    /// 32-bit `Rx` = -`Ry`; `11 01 Rx Ry __ __ __ __`
    @"s_neg32": operand_sets.@"s_neg32",
    /// `0112`
    /// 64-bit `Rx` = -`Ry`; `12 01 Rx Ry __ __ __ __`
    @"s_neg64": operand_sets.@"s_neg64",
    /// `0113`
    /// 8-bit `Rx` = \|`Ry`\|; `13 01 Rx Ry __ __ __ __`
    @"s_abs8": operand_sets.@"s_abs8",
    /// `0114`
    /// 16-bit `Rx` = \|`Ry`\|; `14 01 Rx Ry __ __ __ __`
    @"s_abs16": operand_sets.@"s_abs16",
    /// `0115`
    /// 32-bit `Rx` = \|`Ry`\|; `15 01 Rx Ry __ __ __ __`
    @"s_abs32": operand_sets.@"s_abs32",
    /// `0116`
    /// 64-bit `Rx` = \|`Ry`\|; `16 01 Rx Ry __ __ __ __`
    @"s_abs64": operand_sets.@"s_abs64",
    /// `0117`
    /// 8-bit `Rx` = `Ry` + `Rz`; `17 01 Rx Ry Rz __ __ __`
    @"i_add8": operand_sets.@"i_add8",
    /// `0118`
    /// 16-bit `Rx` = `Ry` + `Rz`; `18 01 Rx Ry Rz __ __ __`
    @"i_add16": operand_sets.@"i_add16",
    /// `0119`
    /// 32-bit `Rx` = `Ry` + `Rz`; `19 01 Rx Ry Rz __ __ __`
    @"i_add32": operand_sets.@"i_add32",
    /// `011a`
    /// 64-bit `Rx` = `Ry` + `Rz`; `1a 01 Rx Ry Rz __ __ __`
    @"i_add64": operand_sets.@"i_add64",
    /// `011b`
    /// 8-bit `Rx` = `Ry` + `I`; `1b 01 Rx Ry I. __ __ __`
    @"i_add8c": operand_sets.@"i_add8c",
    /// `011c`
    /// 16-bit `Rx` = `Ry` + `I`; `1c 01 Rx Ry I. .. __ __`
    @"i_add16c": operand_sets.@"i_add16c",
    /// `011d`
    /// 32-bit `Rx` = `Ry` + `I`; `1d 01 Rx Ry I. .. .. ..`
    @"i_add32c": operand_sets.@"i_add32c",
    /// `011e`
    /// 64-bit `Rx` = `Ry` + `I`; `1e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_add64c": operand_sets.@"i_add64c",
    /// `011f`
    /// 8-bit `Rx` = `Ry` - `Rz`; `1f 01 Rx Ry Rz __ __ __`
    @"i_sub8": operand_sets.@"i_sub8",
    /// `0120`
    /// 16-bit `Rx` = `Ry` - `Rz`; `20 01 Rx Ry Rz __ __ __`
    @"i_sub16": operand_sets.@"i_sub16",
    /// `0121`
    /// 32-bit `Rx` = `Ry` - `Rz`; `21 01 Rx Ry Rz __ __ __`
    @"i_sub32": operand_sets.@"i_sub32",
    /// `0122`
    /// 64-bit `Rx` = `Ry` - `Rz`; `22 01 Rx Ry Rz __ __ __`
    @"i_sub64": operand_sets.@"i_sub64",
    /// `0123`
    /// 8-bit `Rx` = `I` - `Ry`; `23 01 Rx Ry I. __ __ __`
    @"i_sub8a": operand_sets.@"i_sub8a",
    /// `0124`
    /// 16-bit `Rx` = `I` - `Ry`; `24 01 Rx Ry I. .. __ __`
    @"i_sub16a": operand_sets.@"i_sub16a",
    /// `0125`
    /// 32-bit `Rx` = `I` - `Ry`; `25 01 Rx Ry I. .. .. ..`
    @"i_sub32a": operand_sets.@"i_sub32a",
    /// `0126`
    /// 64-bit `Rx` = `I` - `Ry`; `26 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_sub64a": operand_sets.@"i_sub64a",
    /// `0127`
    /// 8-bit `Rx` = `Ry` - `I`; `27 01 Rx Ry I. __ __ __`
    @"i_sub8b": operand_sets.@"i_sub8b",
    /// `0128`
    /// 16-bit `Rx` = `Ry` - `I`; `28 01 Rx Ry I. .. __ __`
    @"i_sub16b": operand_sets.@"i_sub16b",
    /// `0129`
    /// 32-bit `Rx` = `Ry` - `I`; `29 01 Rx Ry I. .. .. ..`
    @"i_sub32b": operand_sets.@"i_sub32b",
    /// `012a`
    /// 64-bit `Rx` = `Ry` - `I`; `2a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_sub64b": operand_sets.@"i_sub64b",
    /// `012b`
    /// 8-bit `Rx` = `Ry` * `Rz`; `2b 01 Rx Ry Rz __ __ __`
    @"i_mul8": operand_sets.@"i_mul8",
    /// `012c`
    /// 16-bit `Rx` = `Ry` * `Rz`; `2c 01 Rx Ry Rz __ __ __`
    @"i_mul16": operand_sets.@"i_mul16",
    /// `012d`
    /// 32-bit `Rx` = `Ry` * `Rz`; `2d 01 Rx Ry Rz __ __ __`
    @"i_mul32": operand_sets.@"i_mul32",
    /// `012e`
    /// 64-bit `Rx` = `Ry` * `Rz`; `2e 01 Rx Ry Rz __ __ __`
    @"i_mul64": operand_sets.@"i_mul64",
    /// `012f`
    /// 8-bit `Rx` = `Ry` * `I`; `2f 01 Rx Ry I. __ __ __`
    @"i_mul8c": operand_sets.@"i_mul8c",
    /// `0130`
    /// 16-bit `Rx` = `Ry` * `I`; `30 01 Rx Ry I. .. __ __`
    @"i_mul16c": operand_sets.@"i_mul16c",
    /// `0131`
    /// 32-bit `Rx` = `Ry` * `I`; `31 01 Rx Ry I. .. .. ..`
    @"i_mul32c": operand_sets.@"i_mul32c",
    /// `0132`
    /// 64-bit `Rx` = `Ry` * `I`; `32 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_mul64c": operand_sets.@"i_mul64c",
    /// `0133`
    /// 8-bit unsigned `Rx` = `Ry` / `Rz`; `33 01 Rx Ry Rz __ __ __`
    @"u_div8": operand_sets.@"u_div8",
    /// `0134`
    /// 16-bit unsigned `Rx` = `Ry` / `Rz`; `34 01 Rx Ry Rz __ __ __`
    @"u_div16": operand_sets.@"u_div16",
    /// `0135`
    /// 32-bit unsigned `Rx` = `Ry` / `Rz`; `35 01 Rx Ry Rz __ __ __`
    @"u_div32": operand_sets.@"u_div32",
    /// `0136`
    /// 64-bit unsigned `Rx` = `Ry` / `Rz`; `36 01 Rx Ry Rz __ __ __`
    @"u_div64": operand_sets.@"u_div64",
    /// `0137`
    /// 8-bit unsigned `Rx` = `I` / `Ry`; `37 01 Rx Ry I. __ __ __`
    @"u_div8a": operand_sets.@"u_div8a",
    /// `0138`
    /// 16-bit unsigned `Rx` = `I` / `Ry`; `38 01 Rx Ry I. .. __ __`
    @"u_div16a": operand_sets.@"u_div16a",
    /// `0139`
    /// 32-bit unsigned `Rx` = `I` / `Ry`; `39 01 Rx Ry I. .. .. ..`
    @"u_div32a": operand_sets.@"u_div32a",
    /// `013a`
    /// 64-bit unsigned `Rx` = `I` / `Ry`; `3a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_div64a": operand_sets.@"u_div64a",
    /// `013b`
    /// 8-bit unsigned `Rx` = `Ry` / `I`; `3b 01 Rx Ry I. __ __ __`
    @"u_div8b": operand_sets.@"u_div8b",
    /// `013c`
    /// 16-bit unsigned `Rx` = `Ry` / `I`; `3c 01 Rx Ry I. .. __ __`
    @"u_div16b": operand_sets.@"u_div16b",
    /// `013d`
    /// 32-bit unsigned `Rx` = `Ry` / `I`; `3d 01 Rx Ry I. .. .. ..`
    @"u_div32b": operand_sets.@"u_div32b",
    /// `013e`
    /// 64-bit unsigned `Rx` = `Ry` / `I`; `3e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_div64b": operand_sets.@"u_div64b",
    /// `013f`
    /// 8-bit signed `Rx` = `Ry` / `Rz`; `3f 01 Rx Ry Rz __ __ __`
    @"s_div8": operand_sets.@"s_div8",
    /// `0140`
    /// 16-bit signed `Rx` = `Ry` / `Rz`; `40 01 Rx Ry Rz __ __ __`
    @"s_div16": operand_sets.@"s_div16",
    /// `0141`
    /// 32-bit signed `Rx` = `Ry` / `Rz`; `41 01 Rx Ry Rz __ __ __`
    @"s_div32": operand_sets.@"s_div32",
    /// `0142`
    /// 64-bit signed `Rx` = `Ry` / `Rz`; `42 01 Rx Ry Rz __ __ __`
    @"s_div64": operand_sets.@"s_div64",
    /// `0143`
    /// 8-bit signed `Rx` = `I` / `Ry`; `43 01 Rx Ry I. __ __ __`
    @"s_div8a": operand_sets.@"s_div8a",
    /// `0144`
    /// 16-bit signed `Rx` = `I` / `Ry`; `44 01 Rx Ry I. .. __ __`
    @"s_div16a": operand_sets.@"s_div16a",
    /// `0145`
    /// 32-bit signed `Rx` = `I` / `Ry`; `45 01 Rx Ry I. .. .. ..`
    @"s_div32a": operand_sets.@"s_div32a",
    /// `0146`
    /// 64-bit signed `Rx` = `I` / `Ry`; `46 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_div64a": operand_sets.@"s_div64a",
    /// `0147`
    /// 8-bit signed `Rx` = `Ry` / `I`; `47 01 Rx Ry I. __ __ __`
    @"s_div8b": operand_sets.@"s_div8b",
    /// `0148`
    /// 16-bit signed `Rx` = `Ry` / `I`; `48 01 Rx Ry I. .. __ __`
    @"s_div16b": operand_sets.@"s_div16b",
    /// `0149`
    /// 32-bit signed `Rx` = `Ry` / `I`; `49 01 Rx Ry I. .. .. ..`
    @"s_div32b": operand_sets.@"s_div32b",
    /// `014a`
    /// 64-bit signed `Rx` = `Ry` / `I`; `4a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_div64b": operand_sets.@"s_div64b",
    /// `014b`
    /// 8-bit unsigned `Rx` = `Ry` % `Rz`; `4b 01 Rx Ry Rz __ __ __`
    @"u_rem8": operand_sets.@"u_rem8",
    /// `014c`
    /// 16-bit unsigned `Rx` = `Ry` % `Rz`; `4c 01 Rx Ry Rz __ __ __`
    @"u_rem16": operand_sets.@"u_rem16",
    /// `014d`
    /// 32-bit unsigned `Rx` = `Ry` % `Rz`; `4d 01 Rx Ry Rz __ __ __`
    @"u_rem32": operand_sets.@"u_rem32",
    /// `014e`
    /// 64-bit unsigned `Rx` = `Ry` % `Rz`; `4e 01 Rx Ry Rz __ __ __`
    @"u_rem64": operand_sets.@"u_rem64",
    /// `014f`
    /// 8-bit unsigned `Rx` = `I` % `Ry`; `4f 01 Rx Ry I. __ __ __`
    @"u_rem8a": operand_sets.@"u_rem8a",
    /// `0150`
    /// 16-bit unsigned `Rx` = `I` % `Ry`; `50 01 Rx Ry I. .. __ __`
    @"u_rem16a": operand_sets.@"u_rem16a",
    /// `0151`
    /// 32-bit unsigned `Rx` = `I` % `Ry`; `51 01 Rx Ry I. .. .. ..`
    @"u_rem32a": operand_sets.@"u_rem32a",
    /// `0152`
    /// 64-bit unsigned `Rx` = `I` % `Ry`; `52 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_rem64a": operand_sets.@"u_rem64a",
    /// `0153`
    /// 8-bit unsigned `Rx` = `Ry` % `I`; `53 01 Rx Ry I. __ __ __`
    @"u_rem8b": operand_sets.@"u_rem8b",
    /// `0154`
    /// 16-bit unsigned `Rx` = `Ry` % `I`; `54 01 Rx Ry I. .. __ __`
    @"u_rem16b": operand_sets.@"u_rem16b",
    /// `0155`
    /// 32-bit unsigned `Rx` = `Ry` % `I`; `55 01 Rx Ry I. .. .. ..`
    @"u_rem32b": operand_sets.@"u_rem32b",
    /// `0156`
    /// 64-bit unsigned `Rx` = `Ry` % `I`; `56 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"u_rem64b": operand_sets.@"u_rem64b",
    /// `0157`
    /// 8-bit signed `Rx` = `Ry` % `Rz`; `57 01 Rx Ry Rz __ __ __`
    @"s_rem8": operand_sets.@"s_rem8",
    /// `0158`
    /// 16-bit signed `Rx` = `Ry` % `Rz`; `58 01 Rx Ry Rz __ __ __`
    @"s_rem16": operand_sets.@"s_rem16",
    /// `0159`
    /// 32-bit signed `Rx` = `Ry` % `Rz`; `59 01 Rx Ry Rz __ __ __`
    @"s_rem32": operand_sets.@"s_rem32",
    /// `015a`
    /// 64-bit signed `Rx` = `Ry` % `Rz`; `5a 01 Rx Ry Rz __ __ __`
    @"s_rem64": operand_sets.@"s_rem64",
    /// `015b`
    /// 8-bit signed `Rx` = `I` % `Ry`; `5b 01 Rx Ry I. __ __ __`
    @"s_rem8a": operand_sets.@"s_rem8a",
    /// `015c`
    /// 16-bit signed `Rx` = `I` % `Ry`; `5c 01 Rx Ry I. .. __ __`
    @"s_rem16a": operand_sets.@"s_rem16a",
    /// `015d`
    /// 32-bit signed `Rx` = `I` % `Ry`; `5d 01 Rx Ry I. .. .. ..`
    @"s_rem32a": operand_sets.@"s_rem32a",
    /// `015e`
    /// 64-bit signed `Rx` = `I` % `Ry`; `5e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_rem64a": operand_sets.@"s_rem64a",
    /// `015f`
    /// 8-bit signed `Rx` = `Ry` % `I`; `5f 01 Rx Ry I. __ __ __`
    @"s_rem8b": operand_sets.@"s_rem8b",
    /// `0160`
    /// 16-bit signed `Rx` = `Ry` % `I`; `60 01 Rx Ry I. .. __ __`
    @"s_rem16b": operand_sets.@"s_rem16b",
    /// `0161`
    /// 32-bit signed `Rx` = `Ry` % `I`; `61 01 Rx Ry I. .. .. ..`
    @"s_rem32b": operand_sets.@"s_rem32b",
    /// `0162`
    /// 64-bit signed `Rx` = `Ry` % `I`; `62 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"s_rem64b": operand_sets.@"s_rem64b",
    /// `0163`
    /// 8-bit `Rx` = `Ry` ** `Rz`; `63 01 Rx Ry Rz __ __ __`
    @"i_pow8": operand_sets.@"i_pow8",
    /// `0164`
    /// 16-bit `Rx` = `Ry` ** `Rz`; `64 01 Rx Ry Rz __ __ __`
    @"i_pow16": operand_sets.@"i_pow16",
    /// `0165`
    /// 32-bit `Rx` = `Ry` ** `Rz`; `65 01 Rx Ry Rz __ __ __`
    @"i_pow32": operand_sets.@"i_pow32",
    /// `0166`
    /// 64-bit `Rx` = `Ry` ** `Rz`; `66 01 Rx Ry Rz __ __ __`
    @"i_pow64": operand_sets.@"i_pow64",
    /// `0167`
    /// 8-bit `Rx` = `I` ** `Ry`; `67 01 Rx Ry I. __ __ __`
    @"i_pow8a": operand_sets.@"i_pow8a",
    /// `0168`
    /// 16-bit `Rx` = `I` ** `Ry`; `68 01 Rx Ry I. .. __ __`
    @"i_pow16a": operand_sets.@"i_pow16a",
    /// `0169`
    /// 32-bit `Rx` = `I` ** `Ry`; `69 01 Rx Ry I. .. .. ..`
    @"i_pow32a": operand_sets.@"i_pow32a",
    /// `016a`
    /// 64-bit `Rx` = `I` ** `Ry`; `6a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_pow64a": operand_sets.@"i_pow64a",
    /// `016b`
    /// 8-bit `Rx` = `Ry` ** `I`; `6b 01 Rx Ry I. __ __ __`
    @"i_pow8b": operand_sets.@"i_pow8b",
    /// `016c`
    /// 16-bit `Rx` = `Ry` ** `I`; `6c 01 Rx Ry I. .. __ __`
    @"i_pow16b": operand_sets.@"i_pow16b",
    /// `016d`
    /// 32-bit `Rx` = `Ry` ** `I`; `6d 01 Rx Ry I. .. .. ..`
    @"i_pow32b": operand_sets.@"i_pow32b",
    /// `016e`
    /// 64-bit `Rx` = `Ry` ** `I`; `6e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"i_pow64b": operand_sets.@"i_pow64b",
    /// `016f`
    /// 32-bit `Rx` = -`Ry`; `6f 01 Rx Ry __ __ __ __`
    @"f_neg32": operand_sets.@"f_neg32",
    /// `0170`
    /// 64-bit `Rx` = -`Ry`; `70 01 Rx Ry __ __ __ __`
    @"f_neg64": operand_sets.@"f_neg64",
    /// `0171`
    /// 32-bit `Rx` = \|`Ry`\|; `71 01 Rx Ry __ __ __ __`
    @"f_abs32": operand_sets.@"f_abs32",
    /// `0172`
    /// 64-bit `Rx` = \|`Ry`\|; `72 01 Rx Ry __ __ __ __`
    @"f_abs64": operand_sets.@"f_abs64",
    /// `0173`
    /// 32-bit `Rx` = sqrt(`Ry`); `73 01 Rx Ry __ __ __ __`
    @"f_sqrt32": operand_sets.@"f_sqrt32",
    /// `0174`
    /// 64-bit `Rx` = sqrt(`Ry`); `74 01 Rx Ry __ __ __ __`
    @"f_sqrt64": operand_sets.@"f_sqrt64",
    /// `0175`
    /// 32-bit `Rx` = floor(`Ry`); `75 01 Rx Ry __ __ __ __`
    @"f_floor32": operand_sets.@"f_floor32",
    /// `0176`
    /// 64-bit `Rx` = floor(`Ry`); `76 01 Rx Ry __ __ __ __`
    @"f_floor64": operand_sets.@"f_floor64",
    /// `0177`
    /// 32-bit `Rx` = ceil(`Ry`); `77 01 Rx Ry __ __ __ __`
    @"f_ceil32": operand_sets.@"f_ceil32",
    /// `0178`
    /// 64-bit `Rx` = ceil(`Ry`); `78 01 Rx Ry __ __ __ __`
    @"f_ceil64": operand_sets.@"f_ceil64",
    /// `0179`
    /// 32-bit `Rx` = round(`Ry`); `79 01 Rx Ry __ __ __ __`
    @"f_round32": operand_sets.@"f_round32",
    /// `017a`
    /// 64-bit `Rx` = round(`Ry`); `7a 01 Rx Ry __ __ __ __`
    @"f_round64": operand_sets.@"f_round64",
    /// `017b`
    /// 32-bit `Rx` = truncate(`Ry`); `7b 01 Rx Ry __ __ __ __`
    @"f_trunc32": operand_sets.@"f_trunc32",
    /// `017c`
    /// 64-bit `Rx` = truncate(`Ry`); `7c 01 Rx Ry __ __ __ __`
    @"f_trunc64": operand_sets.@"f_trunc64",
    /// `017d`
    /// 32-bit `Rx` = whole(`Ry`); `7d 01 Rx Ry __ __ __ __`
    @"f_whole32": operand_sets.@"f_whole32",
    /// `017e`
    /// 64-bit `Rx` = whole(`Ry`); `7e 01 Rx Ry __ __ __ __`
    @"f_whole64": operand_sets.@"f_whole64",
    /// `017f`
    /// 32-bit `Rx` = frac(`Ry`); `7f 01 Rx Ry __ __ __ __`
    @"f_frac32": operand_sets.@"f_frac32",
    /// `0180`
    /// 64-bit `Rx` = frac(`Ry`); `80 01 Rx Ry __ __ __ __`
    @"f_frac64": operand_sets.@"f_frac64",
    /// `0181`
    /// 32-bit `Rx` = `Ry` + `Rz`; `81 01 Rx Ry Rz __ __ __`
    @"f_add32": operand_sets.@"f_add32",
    /// `0182`
    /// 32-bit `Rx` = `Ry` + `I`; `82 01 Rx Ry I. .. .. ..`
    @"f_add32c": operand_sets.@"f_add32c",
    /// `0183`
    /// 64-bit `Rx` = `Ry` + `Rz`; `83 01 Rx Ry Rz __ __ __`
    @"f_add64": operand_sets.@"f_add64",
    /// `0184`
    /// 64-bit `Rx` = `Ry` + `I`; `84 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_add64c": operand_sets.@"f_add64c",
    /// `0185`
    /// 32-bit `Rx` = `Ry` - `Rz`; `85 01 Rx Ry Rz __ __ __`
    @"f_sub32": operand_sets.@"f_sub32",
    /// `0186`
    /// 32-bit `Rx` = `I` - `Ry`; `86 01 Rx Ry I. .. .. ..`
    @"f_sub32a": operand_sets.@"f_sub32a",
    /// `0187`
    /// 32-bit `Rx` = `Ry` - `I`; `87 01 Rx Ry I. .. .. ..`
    @"f_sub32b": operand_sets.@"f_sub32b",
    /// `0188`
    /// 64-bit `Rx` = `Ry` - `Rz`; `88 01 Rx Ry Rz __ __ __`
    @"f_sub64": operand_sets.@"f_sub64",
    /// `0189`
    /// 64-bit `Rx` = `I` - `Ry`; `89 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_sub64a": operand_sets.@"f_sub64a",
    /// `018a`
    /// 64-bit `Rx` = `Ry` - `I`; `8a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_sub64b": operand_sets.@"f_sub64b",
    /// `018b`
    /// 32-bit `Rx` = `Ry` * `Rz`; `8b 01 Rx Ry Rz __ __ __`
    @"f_mul32": operand_sets.@"f_mul32",
    /// `018c`
    /// 32-bit `Rx` = `Ry` * `I`; `8c 01 Rx Ry I. .. .. ..`
    @"f_mul32c": operand_sets.@"f_mul32c",
    /// `018d`
    /// 64-bit `Rx` = `Ry` * `Rz`; `8d 01 Rx Ry Rz __ __ __`
    @"f_mul64": operand_sets.@"f_mul64",
    /// `018e`
    /// 64-bit `Rx` = `Ry` * `I`; `8e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_mul64c": operand_sets.@"f_mul64c",
    /// `018f`
    /// 32-bit `Rx` = `Ry` / `Rz`; `8f 01 Rx Ry Rz __ __ __`
    @"f_div32": operand_sets.@"f_div32",
    /// `0190`
    /// 32-bit `Rx` = `I` / `Ry`; `90 01 Rx Ry I. .. .. ..`
    @"f_div32a": operand_sets.@"f_div32a",
    /// `0191`
    /// 32-bit `Rx` = `Ry` / `I`; `91 01 Rx Ry I. .. .. ..`
    @"f_div32b": operand_sets.@"f_div32b",
    /// `0192`
    /// 64-bit `Rx` = `Ry` / `Rz`; `92 01 Rx Ry Rz __ __ __`
    @"f_div64": operand_sets.@"f_div64",
    /// `0193`
    /// 64-bit `Rx` = `I` / `Ry`; `93 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_div64a": operand_sets.@"f_div64a",
    /// `0194`
    /// 64-bit `Rx` = `Ry` / `I`; `94 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_div64b": operand_sets.@"f_div64b",
    /// `0195`
    /// 32-bit `Rx` = `Ry` % `Rz`; `95 01 Rx Ry Rz __ __ __`
    @"f_rem32": operand_sets.@"f_rem32",
    /// `0196`
    /// 32-bit `Rx` = `I` % `Ry`; `96 01 Rx Ry I. .. .. ..`
    @"f_rem32a": operand_sets.@"f_rem32a",
    /// `0197`
    /// 32-bit `Rx` = `Ry` % `I`; `97 01 Rx Ry I. .. .. ..`
    @"f_rem32b": operand_sets.@"f_rem32b",
    /// `0198`
    /// 64-bit `Rx` = `Ry` % `Rz`; `98 01 Rx Ry Rz __ __ __`
    @"f_rem64": operand_sets.@"f_rem64",
    /// `0199`
    /// 64-bit `Rx` = `I` % `Ry`; `99 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_rem64a": operand_sets.@"f_rem64a",
    /// `019a`
    /// 64-bit `Rx` = `Ry` % `I`; `9a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_rem64b": operand_sets.@"f_rem64b",
    /// `019b`
    /// 32-bit `Rx` = `Ry` ** `Rz`; `9b 01 Rx Ry Rz __ __ __`
    @"f_pow32": operand_sets.@"f_pow32",
    /// `019c`
    /// 32-bit `Rx` = `I` ** `Ry`; `9c 01 Rx Ry I. .. .. ..`
    @"f_pow32a": operand_sets.@"f_pow32a",
    /// `019d`
    /// 32-bit `Rx` = `Ry` ** `I`; `9d 01 Rx Ry I. .. .. ..`
    @"f_pow32b": operand_sets.@"f_pow32b",
    /// `019e`
    /// 64-bit `Rx` = `Ry` ** `Rz`; `9e 01 Rx Ry Rz __ __ __`
    @"f_pow64": operand_sets.@"f_pow64",
    /// `019f`
    /// 64-bit `Rx` = `I` ** `Ry`; `9f 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_pow64a": operand_sets.@"f_pow64a",
    /// `01a0`
    /// 64-bit `Rx` = `Ry` ** `I`; `a0 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    @"f_pow64b": operand_sets.@"f_pow64b",
    /// `01a1`
    /// Sign extend 8-bits of `Ry` to 16-bits, placing the result in `Rx`; `a1 01 Rx Ry __ __ __ __`
    @"s_ext8_16": operand_sets.@"s_ext8_16",
    /// `01a2`
    /// Sign extend 8-bits of `Ry` to 32-bits, placing the result in `Rx`; `a2 01 Rx Ry __ __ __ __`
    @"s_ext8_32": operand_sets.@"s_ext8_32",
    /// `01a3`
    /// Sign extend 8-bits of `Ry` to 64-bits, placing the result in `Rx`; `a3 01 Rx Ry __ __ __ __`
    @"s_ext8_64": operand_sets.@"s_ext8_64",
    /// `01a4`
    /// Sign extend 16-bits of `Ry` to 32-bits, placing the result in `Rx`; `a4 01 Rx Ry __ __ __ __`
    @"s_ext16_32": operand_sets.@"s_ext16_32",
    /// `01a5`
    /// Sign extend 16-bits of `Ry` to 64-bits, placing the result in `Rx`; `a5 01 Rx Ry __ __ __ __`
    @"s_ext16_64": operand_sets.@"s_ext16_64",
    /// `01a6`
    /// Sign extend 32-bits of `Ry` to 64-bits, placing the result in `Rx`; `a6 01 Rx Ry __ __ __ __`
    @"s_ext32_64": operand_sets.@"s_ext32_64",
    /// `01a7`
    /// Convert of 32-bit float in `Ry` to 8-bit integer; discards sign, places the result in `Rx`; `a7 01 Rx Ry __ __ __ __`
    @"f32_to_u8": operand_sets.@"f32_to_u8",
    /// `01a8`
    /// Convert of 32-bit float in `Ry` to 16-bit integer; discards sign, places the result in `Rx`; `a8 01 Rx Ry __ __ __ __`
    @"f32_to_u16": operand_sets.@"f32_to_u16",
    /// `01a9`
    /// Convert of 32-bit float in `Ry` to 32-bit integer; discards sign, places the result in `Rx`; `a9 01 Rx Ry __ __ __ __`
    @"f32_to_u32": operand_sets.@"f32_to_u32",
    /// `01aa`
    /// Convert of 32-bit float in `Ry` to 64-bit integer; discards sign, places the result in `Rx`; `aa 01 Rx Ry __ __ __ __`
    @"f32_to_u64": operand_sets.@"f32_to_u64",
    /// `01ab`
    /// Convert of 32-bit float in `Ry` to 8-bit integer; keeps sign, places the result in `Rx`; `ab 01 Rx Ry __ __ __ __`
    @"f32_to_s8": operand_sets.@"f32_to_s8",
    /// `01ac`
    /// Convert of 32-bit float in `Ry` to 16-bit integer; keeps sign, places the result in `Rx`; `ac 01 Rx Ry __ __ __ __`
    @"f32_to_s16": operand_sets.@"f32_to_s16",
    /// `01ad`
    /// Convert of 32-bit float in `Ry` to 32-bit integer; keeps sign, places the result in `Rx`; `ad 01 Rx Ry __ __ __ __`
    @"f32_to_s32": operand_sets.@"f32_to_s32",
    /// `01ae`
    /// Convert of 32-bit float in `Ry` to 64-bit integer; keeps sign, places the result in `Rx`; `ae 01 Rx Ry __ __ __ __`
    @"f32_to_s64": operand_sets.@"f32_to_s64",
    /// `01af`
    /// Convert 8-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `af 01 Rx Ry __ __ __ __`
    @"u8_to_f32": operand_sets.@"u8_to_f32",
    /// `01b0`
    /// Convert 16-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b0 01 Rx Ry __ __ __ __`
    @"u16_to_f32": operand_sets.@"u16_to_f32",
    /// `01b1`
    /// Convert 32-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b1 01 Rx Ry __ __ __ __`
    @"u32_to_f32": operand_sets.@"u32_to_f32",
    /// `01b2`
    /// Convert 64-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b2 01 Rx Ry __ __ __ __`
    @"u64_to_f32": operand_sets.@"u64_to_f32",
    /// `01b3`
    /// Convert 8-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b3 01 Rx Ry __ __ __ __`
    @"s8_to_f32": operand_sets.@"s8_to_f32",
    /// `01b4`
    /// Convert 16-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b4 01 Rx Ry __ __ __ __`
    @"s16_to_f32": operand_sets.@"s16_to_f32",
    /// `01b5`
    /// Convert 32-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b5 01 Rx Ry __ __ __ __`
    @"s32_to_f32": operand_sets.@"s32_to_f32",
    /// `01b6`
    /// Convert 64-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b6 01 Rx Ry __ __ __ __`
    @"s64_to_f32": operand_sets.@"s64_to_f32",
    /// `01b7`
    /// Convert 8-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b7 01 Rx Ry __ __ __ __`
    @"u8_to_f64": operand_sets.@"u8_to_f64",
    /// `01b8`
    /// Convert 16-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b8 01 Rx Ry __ __ __ __`
    @"u16_to_f64": operand_sets.@"u16_to_f64",
    /// `01b9`
    /// Convert 32-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b9 01 Rx Ry __ __ __ __`
    @"u32_to_f64": operand_sets.@"u32_to_f64",
    /// `01ba`
    /// Convert 64-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `ba 01 Rx Ry __ __ __ __`
    @"u64_to_f64": operand_sets.@"u64_to_f64",
    /// `01bb`
    /// Convert 8-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bb 01 Rx Ry __ __ __ __`
    @"s8_to_f64": operand_sets.@"s8_to_f64",
    /// `01bc`
    /// Convert 16-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bc 01 Rx Ry __ __ __ __`
    @"s16_to_f64": operand_sets.@"s16_to_f64",
    /// `01bd`
    /// Convert 32-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bd 01 Rx Ry __ __ __ __`
    @"s32_to_f64": operand_sets.@"s32_to_f64",
    /// `01be`
    /// Convert 64-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `be 01 Rx Ry __ __ __ __`
    @"s64_to_f64": operand_sets.@"s64_to_f64",
    /// `01bf`
    /// Convert 32-bit float in `Ry` to 64-bit float; places the result in `Rx`; `bf 01 Rx Ry __ __ __ __`
    @"f32_to_f64": operand_sets.@"f32_to_f64",
    /// `01c0`
    /// Convert 64-bit float in `Ry` to 32-bit float; places the result in `Rx`; `c0 01 Rx Ry __ __ __ __`
    @"f64_to_f32": operand_sets.@"f64_to_f32",
};

/// Namespace of operand set types for each instruction.
pub const operand_sets = struct {
    /// `0000`
    /// No operation; `00 00 __ __ __ __ __ __`
    pub const @"nop" = packed struct { };

    /// `0001`
    /// Triggers a breakpoint in debuggers; does nothing otherwise; `01 00 __ __ __ __ __ __`
    pub const @"breakpoint" = packed struct { };

    /// `0002`
    /// Halts execution at this instruction offset; `02 00 __ __ __ __ __ __`
    pub const @"halt" = packed struct { };

    /// `0003`
    /// Traps execution of the `Rvm.Fiber` at this instruction offset
    /// Unlike `unreachable`, this indicates expected behavior; optimizing compilers should *not* assume it is never reached; `03 00 __ __ __ __ __ __`
    pub const @"trap" = packed struct { };

    /// `0004`
    /// Marks a point in the code as unreachable; if executed in Rvm, it is the same as `trap`
    /// Unlike `trap`, however, this indicates undefined behavior; optimizing compilers should assume it is never reached; `04 00 __ __ __ __ __ __`
    pub const @"unreachable" = packed struct { };

    /// `0005`
    /// Pushes `H` onto the stack.
    /// The handlers in this set will be first in line for their effects' prompts until a corresponding `pop` operation.; `05 00 H. .. .. .. __ __`
    pub const @"push_set" = packed struct { H: core.HandlerSetId = .null, };

    /// `0006`
    /// Pops the top most `HandlerSetId` from the stack, restoring the previous if present; `06 00 __ __ __ __ __ __`
    pub const @"pop_set" = packed struct { };

    /// `0007`
    /// Applies a signed integer offset `I` to the instruction pointer; `07 00 I. .. .. .. __ __`
    pub const @"br" = packed struct { I: u32 = 0, };

    /// `0008`
    /// Applies a signed integer offset `I` to the instruction pointer, if the value stored in `R` is non-zero; `08 00 R. I. .. .. .. __`
    pub const @"br_if" = packed struct { R: core.Register = .null, I: u32 = 0, };

    /// `0009`
    /// Calls the bytecode or builtin function in `Ry` using `I` argument registers, placing the result in `Rx`; `09 00 Rx Ry I. __ __ __ + ...`
    pub const @"call" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `000a`
    /// Calls the bytecode or builtin function at `F` using `I` argument registers, placing the result in `R`; `0a 00 R. F. .. .. .. I. + ...`
    pub const @"call_c" = packed struct { R: core.Register = .null, F: core.FunctionId = .null, I: u8 = 0, };

    /// `000b`
    /// Calls the foreign function in `Ry` using `I` argument registers, placing the result in `Rx`; `0b 00 Rx Ry I. __ __ __ + ...`
    pub const @"f_call" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `000c`
    /// Calls the foreign function at `X` using `I` argument registers, placing the result in `R`; `0c 00 R. X. .. .. .. I. + ...`
    pub const @"f_call_c" = packed struct { R: core.Register = .null, X: core.ForeignAddressId = .null, I: u8 = 0, };

    /// `000d`
    /// Calls the bytecode or builtin effect handler designated by `E` using `I` argument registers, placing the result in `R`.; `0d 00 R. E. .. .. .. I. + ...`
    pub const @"prompt" = packed struct { R: core.Register = .null, E: core.EffectId = .null, I: u8 = 0, };

    /// `000e`
    /// Returns flow control to the caller of current function, yielding `R` to the caller; `0e 00 R. __ __ __ __ __`
    pub const @"return" = packed struct { R: core.Register = .null, };

    /// `000f`
    /// Returns flow control to the offset associated with the current effect handler's `HandlerSetId`, yielding `R` as the cancellation value; `0f 00 R. __ __ __ __ __`
    pub const @"cancel" = packed struct { R: core.Register = .null, };

    /// `0010`
    /// Each byte, starting from the address in `Rx`, up to an offset of `Rz`, is set to the least significant byte of `Ry`; `10 00 Rx Ry Rz __ __ __`
    pub const @"mem_set" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0011`
    /// Each byte, starting from the address in `Rx`, up to an offset of `I`, is set to `Ry`; `11 00 Rx Ry I. .. .. ..`
    pub const @"mem_set_a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0012`
    /// Each byte, starting from the address in `Rx`, up to an offset of `Ry`, is set to `I`; `12 00 Rx Ry I. __ __ __`
    pub const @"mem_set_b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0013`
    /// Each byte, starting from the address in `Ry`, up to an offset of `Rz`, is copied to the same offset of the address in `Rx`; `13 00 Rx Ry Rz __ __ __`
    pub const @"mem_copy" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0014`
    /// Each byte, starting from the address in `Ry`, up to an offset of `I`, is copied to the same offset from the address in `Rx`; `14 00 Rx Ry I. .. .. ..`
    pub const @"mem_copy_a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0015`
    /// Each byte, starting from the address of `C`, up to an offset of `Ry`, is copied to the same offset from the address in `Rx`; `15 00 Rx Ry C. .. .. ..`
    pub const @"mem_copy_b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, C: core.ConstantId = .null, };

    /// `0016`
    /// Each byte, starting from the addresses in `Rx` and `Ry`, up to an offset of `Rz`, are swapped with each-other; `16 00 Rx Ry Rz __ __ __`
    pub const @"mem_swap" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0017`
    /// Each byte, starting from the addresses in `Rx` and `Ry`, up to an offset of `I`, are swapped with each-other; `17 00 Rx Ry I. .. .. ..`
    pub const @"mem_swap_c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0018`
    /// Get the address of a signed integer frame-relative operand stack offset `I`, placing it in `R`.
    /// 
    /// An operand stack offset of 1 is equivalent to 8 bytes down from the base of the stack frame; `18 00 R. I. .. .. .. __`
    pub const @"addr_l" = packed struct { R: core.Register = .null, I: u32 = 0, };

    /// `0019`
    /// Get the address of `U`, placing it in `R`; `19 00 R. U. __ __ __ __`
    pub const @"addr_u" = packed struct { R: core.Register = .null, U: core.UpvalueId = .null, };

    /// `001a`
    /// Get the address of `G`, placing it in `R`; `1a 00 R. G. .. .. .. __`
    pub const @"addr_g" = packed struct { R: core.Register = .null, G: core.GlobalId = .null, };

    /// `001b`
    /// Get the address of `F`, placing it in `R`; `1b 00 R. F. .. .. .. __`
    pub const @"addr_f" = packed struct { R: core.Register = .null, F: core.FunctionId = .null, };

    /// `001c`
    /// Get the address of `B`, placing it in `R`; `1c 00 R. B. .. .. .. __`
    pub const @"addr_b" = packed struct { R: core.Register = .null, B: core.BuiltinAddressId = .null, };

    /// `001d`
    /// Get the address of `X`, placing it in `R`; `1d 00 R. X. .. .. .. __`
    pub const @"addr_x" = packed struct { R: core.Register = .null, X: core.ForeignAddressId = .null, };

    /// `001e`
    /// Get the address of `C`, placing it in `R`; `1e 00 R. C. .. .. .. __`
    pub const @"addr_c" = packed struct { R: core.Register = .null, C: core.ConstantId = .null, };

    /// `001f`
    /// Loads an 8-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `1f 00 Rx Ry I. .. .. ..`
    pub const @"load8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0020`
    /// Loads a 16-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `20 00 Rx Ry I. .. .. ..`
    pub const @"load16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0021`
    /// Loads a 32-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `21 00 Rx Ry I. .. .. ..`
    pub const @"load32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0022`
    /// Loads a 64-bit value from memory at the address in `Ry` offset by `I`, placing the result in `Rx`; `22 00 Rx Ry I. .. .. ..`
    pub const @"load64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0023`
    /// Stores an 8-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `23 00 Rx Ry I. .. .. ..`
    pub const @"store8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0024`
    /// Stores a 16-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `24 00 Rx Ry I. .. .. ..`
    pub const @"store16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0025`
    /// Stores a 32-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `25 00 Rx Ry I. .. .. ..`
    pub const @"store32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0026`
    /// Stores a 64-bit value from `Ry` to memory at the address in `Rx` offset by `I`; `26 00 Rx Ry I. .. .. ..`
    pub const @"store64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0027`
    /// Stores an 8-bit value to memory at the address in `R` offset by `Iy`; `27 00 R. Ix Iy .. .. ..`
    pub const @"store8c" = packed struct { R: core.Register = .null, Ix: u8 = 0, Iy: u32 = 0, };

    /// `0028`
    /// Stores a 16-bit value to memory at the address in `R` offset by `Iy`; `28 00 R. __ __ __ __ __ + Ix .. Iy .. .. .. __ __`
    pub const @"store16c" = packed struct { R: core.Register = .null, };

    /// `0029`
    /// Stores a 32-bit value to memory at the address in `R` offset by `Iy`; `29 00 R. __ __ __ __ __ + Ix .. .. .. Iy .. .. ..`
    pub const @"store32c" = packed struct { R: core.Register = .null, };

    /// `002a`
    /// Stores a 64-bit value (encoded as `Iy`) to memory at the address in `R` offset by `Ix`; `2a 00 R. Ix .. .. .. __ + Iy .. .. .. .. .. .. ..`
    pub const @"store64c" = packed struct { R: core.Register = .null, Ix: u32 = 0, };

    /// `002b`
    /// 8-bit `Rx` ⇔ `Ry`; `2b 00 Rx Ry __ __ __ __`
    pub const @"bit_swap8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `002c`
    /// 16-bit `Rx` ⇔ `Ry`; `2c 00 Rx Ry __ __ __ __`
    pub const @"bit_swap16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `002d`
    /// 32-bit `Rx` ⇔ `Ry`; `2d 00 Rx Ry __ __ __ __`
    pub const @"bit_swap32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `002e`
    /// 64-bit `Rx` ⇔ `Ry`; `2e 00 Rx Ry __ __ __ __`
    pub const @"bit_swap64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `002f`
    /// 8-bit `Rx` = `Ry`; `2f 00 Rx Ry __ __ __ __`
    pub const @"bit_copy8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0030`
    /// 16-bit `Rx` = `Ry`; `30 00 Rx Ry __ __ __ __`
    pub const @"bit_copy16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0031`
    /// 32-bit `Rx` = `Ry`; `31 00 Rx Ry __ __ __ __`
    pub const @"bit_copy32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0032`
    /// 64-bit `Rx` = `Ry`; `32 00 Rx Ry __ __ __ __`
    pub const @"bit_copy64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0033`
    /// Copies an 8-bit `I` value into `R`; `33 00 R. I. __ __ __ __`
    pub const @"bit_copy8c" = packed struct { R: core.Register = .null, I: u8 = 0, };

    /// `0034`
    /// Copies a 16-bit `I` value into `R`; `34 00 R. I. .. __ __ __`
    pub const @"bit_copy16c" = packed struct { R: core.Register = .null, I: u16 = 0, };

    /// `0035`
    /// Copies a 32-bit `I` value into `R`; `35 00 R. I. .. .. .. __`
    pub const @"bit_copy32c" = packed struct { R: core.Register = .null, I: u32 = 0, };

    /// `0036`
    /// Copies a 64-bit `I` value into `R`; `36 00 R. __ __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"bit_copy64c" = packed struct { R: core.Register = .null, };

    /// `0037`
    /// Counts the leading zeroes in 8-bits of `Ry`, placing the result in `Rx`; `37 00 Rx Ry __ __ __ __`
    pub const @"bit_clz8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0038`
    /// Counts the leading zeroes in 16-bits of `Ry`, placing the result in `Rx`; `38 00 Rx Ry __ __ __ __`
    pub const @"bit_clz16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0039`
    /// Counts the leading zeroes in 32-bits of `Ry`, placing the result in `Rx`; `39 00 Rx Ry __ __ __ __`
    pub const @"bit_clz32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `003a`
    /// Counts the leading zeroes in 64-bits of `Ry`, placing the result in `Rx`; `3a 00 Rx Ry __ __ __ __`
    pub const @"bit_clz64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `003b`
    /// Counts the set bits in 8-bits of `Ry`, placing the result in `Rx`; `3b 00 Rx Ry __ __ __ __`
    pub const @"bit_pop8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `003c`
    /// Counts the set bits in 16-bits of `Ry`, placing the result in `Rx`; `3c 00 Rx Ry __ __ __ __`
    pub const @"bit_pop16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `003d`
    /// Counts the set bits in 32-bits of `Ry`, placing the result in `Rx`; `3d 00 Rx Ry __ __ __ __`
    pub const @"bit_pop32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `003e`
    /// Counts the set bits in 64-bits of `Ry`, placing the result in `Rx`; `3e 00 Rx Ry __ __ __ __`
    pub const @"bit_pop64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `003f`
    /// 8-bit `Rx` = ~`Ry`; `3f 00 Rx Ry __ __ __ __`
    pub const @"bit_not8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0040`
    /// 16-bit `Rx` = ~`Ry`; `40 00 Rx Ry __ __ __ __`
    pub const @"bit_not16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0041`
    /// 32-bit `Rx` = ~`Ry`; `41 00 Rx Ry __ __ __ __`
    pub const @"bit_not32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0042`
    /// 64-bit `Rx` = ~`Ry`; `42 00 Rx Ry __ __ __ __`
    pub const @"bit_not64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0043`
    /// 8-bit `Rx` = `Ry` & `Rz`; `43 00 Rx Ry Rz __ __ __`
    pub const @"bit_and8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0044`
    /// 16-bit `Rx` = `Ry` & `Rz`; `44 00 Rx Ry Rz __ __ __`
    pub const @"bit_and16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0045`
    /// 32-bit `Rx` = `Ry` & `Rz`; `45 00 Rx Ry Rz __ __ __`
    pub const @"bit_and32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0046`
    /// 64-bit `Rx` = `Ry` & `Rz`; `46 00 Rx Ry Rz __ __ __`
    pub const @"bit_and64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0047`
    /// 8-bit `Rx` = `Ry` & `I`; `47 00 Rx Ry I. __ __ __`
    pub const @"bit_and8c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0048`
    /// 16-bit `Rx` = `Ry` & `I`; `48 00 Rx Ry I. .. __ __`
    pub const @"bit_and16c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0049`
    /// 32-bit `Rx` = `Ry` & `I`; `49 00 Rx Ry I. .. .. ..`
    pub const @"bit_and32c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `004a`
    /// 64-bit `Rx` = `Ry` & `I`; `4a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"bit_and64c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `004b`
    /// 8-bit `Rx` = `Ry` \| `Rz`; `4b 00 Rx Ry Rz __ __ __`
    pub const @"bit_or8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `004c`
    /// 16-bit `Rx` = `Ry` \| `Rz`; `4c 00 Rx Ry Rz __ __ __`
    pub const @"bit_or16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `004d`
    /// 32-bit `Rx` = `Ry` \| `Rz`; `4d 00 Rx Ry Rz __ __ __`
    pub const @"bit_or32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `004e`
    /// 64-bit `Rx` = `Ry` \| `Rz`; `4e 00 Rx Ry Rz __ __ __`
    pub const @"bit_or64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `004f`
    /// 8-bit `Rx` = `Ry` \| `I`; `4f 00 Rx Ry I. __ __ __`
    pub const @"bit_or8c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0050`
    /// 16-bit `Rx` = `Ry` \| `I`; `50 00 Rx Ry I. .. __ __`
    pub const @"bit_or16c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0051`
    /// 32-bit `Rx` = `Ry` \| `I`; `51 00 Rx Ry I. .. .. ..`
    pub const @"bit_or32c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0052`
    /// 64-bit `Rx` = `Ry` \| `I`; `52 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"bit_or64c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0053`
    /// 8-bit `Rx` = `Ry` ^ `Rz`; `53 00 Rx Ry Rz __ __ __`
    pub const @"bit_xor8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0054`
    /// 16-bit `Rx` = `Ry` ^ `Rz`; `54 00 Rx Ry Rz __ __ __`
    pub const @"bit_xor16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0055`
    /// 32-bit `Rx` = `Ry` ^ `Rz`; `55 00 Rx Ry Rz __ __ __`
    pub const @"bit_xor32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0056`
    /// 64-bit `Rx` = `Ry` ^ `Rz`; `56 00 Rx Ry Rz __ __ __`
    pub const @"bit_xor64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0057`
    /// 8-bit `Rx` = `Ry` ^ `I`; `57 00 Rx Ry I. __ __ __`
    pub const @"bit_xor8c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0058`
    /// 16-bit `Rx` = `Ry` ^ `I`; `58 00 Rx Ry I. .. __ __`
    pub const @"bit_xor16c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0059`
    /// 32-bit `Rx` = `Ry` ^ `I`; `59 00 Rx Ry I. .. .. ..`
    pub const @"bit_xor32c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `005a`
    /// 64-bit `Rx` = `Ry` ^ `I`; `5a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"bit_xor64c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `005b`
    /// 8-bit `Rx` = `Ry` << `Rz`; `5b 00 Rx Ry Rz __ __ __`
    pub const @"bit_lshift8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `005c`
    /// 16-bit `Rx` = `Ry` << `Rz`; `5c 00 Rx Ry Rz __ __ __`
    pub const @"bit_lshift16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `005d`
    /// 32-bit `Rx` = `Ry` << `Rz`; `5d 00 Rx Ry Rz __ __ __`
    pub const @"bit_lshift32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `005e`
    /// 64-bit `Rx` = `Ry` << `Rz`; `5e 00 Rx Ry Rz __ __ __`
    pub const @"bit_lshift64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `005f`
    /// 8-bit `Rx` = `I` << `Ry`; `5f 00 Rx Ry I. __ __ __`
    pub const @"bit_lshift8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0060`
    /// 16-bit `Rx` = `I` << `Ry`; `60 00 Rx Ry I. .. __ __`
    pub const @"bit_lshift16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0061`
    /// 32-bit `Rx` = `I` << `Ry`; `61 00 Rx Ry I. .. .. ..`
    pub const @"bit_lshift32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0062`
    /// 64-bit `Rx` = `I` << `Ry`; `62 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"bit_lshift64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0063`
    /// 8-bit `Rx` = `Ry` << `I`; `63 00 Rx Ry I. __ __ __`
    pub const @"bit_lshift8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0064`
    /// 16-bit `Rx` = `Ry` << `I`; `64 00 Rx Ry I. __ __ __`
    pub const @"bit_lshift16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0065`
    /// 32-bit `Rx` = `Ry` << `I`; `65 00 Rx Ry I. __ __ __`
    pub const @"bit_lshift32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0066`
    /// 64-bit `Rx` = `Ry` << `I`; `66 00 Rx Ry I. __ __ __`
    pub const @"bit_lshift64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0067`
    /// 8-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `67 00 Rx Ry Rz __ __ __`
    pub const @"u_rshift8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0068`
    /// 16-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `68 00 Rx Ry Rz __ __ __`
    pub const @"u_rshift16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0069`
    /// 32-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `69 00 Rx Ry Rz __ __ __`
    pub const @"u_rshift32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `006a`
    /// 64-bit unsigned/logical `Rx` = `Ry` >> `Rz`; `6a 00 Rx Ry Rz __ __ __`
    pub const @"u_rshift64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `006b`
    /// 8-bit unsigned/logical `Rx` = `I` >> `Ry`; `6b 00 Rx Ry I. __ __ __`
    pub const @"u_rshift8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `006c`
    /// 16-bit unsigned/logical `Rx` = `I` >> `Ry`; `6c 00 Rx Ry I. .. __ __`
    pub const @"u_rshift16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `006d`
    /// 32-bit unsigned/logical `Rx` = `I` >> `Ry`; `6d 00 Rx Ry I. .. .. ..`
    pub const @"u_rshift32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `006e`
    /// 64-bit unsigned/logical `Rx` = `I` >> `Ry`; `6e 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_rshift64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `006f`
    /// 8-bit unsigned/logical `Rx` = `Ry` >> `I`; `6f 00 Rx Ry I. __ __ __`
    pub const @"u_rshift8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0070`
    /// 16-bit unsigned/logical `Rx` = `Ry` >> `I`; `70 00 Rx Ry I. __ __ __`
    pub const @"u_rshift16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0071`
    /// 32-bit unsigned/logical `Rx` = `Ry` >> `I`; `71 00 Rx Ry I. __ __ __`
    pub const @"u_rshift32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0072`
    /// 64-bit unsigned/logical `Rx` = `Ry` >> `I`; `72 00 Rx Ry I. __ __ __`
    pub const @"u_rshift64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0073`
    /// 8-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `73 00 Rx Ry Rz __ __ __`
    pub const @"s_rshift8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0074`
    /// 16-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `74 00 Rx Ry Rz __ __ __`
    pub const @"s_rshift16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0075`
    /// 32-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `75 00 Rx Ry Rz __ __ __`
    pub const @"s_rshift32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0076`
    /// 64-bit signed/arithmetic `Rx` = `Ry` >> `Rz`; `76 00 Rx Ry Rz __ __ __`
    pub const @"s_rshift64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0077`
    /// 8-bit signed/arithmetic `Rx` = `I` >> `Ry`; `77 00 Rx Ry I. __ __ __`
    pub const @"s_rshift8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0078`
    /// 16-bit signed/arithmetic `Rx` = `I` >> `Ry`; `78 00 Rx Ry I. .. __ __`
    pub const @"s_rshift16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0079`
    /// 32-bit signed/arithmetic `Rx` = `I` >> `Ry`; `79 00 Rx Ry I. .. .. ..`
    pub const @"s_rshift32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `007a`
    /// 64-bit signed/arithmetic `Rx` = `I` >> `Ry`; `7a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_rshift64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `007b`
    /// 8-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7b 00 Rx Ry I. __ __ __`
    pub const @"s_rshift8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `007c`
    /// 16-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7c 00 Rx Ry I. __ __ __`
    pub const @"s_rshift16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `007d`
    /// 32-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7d 00 Rx Ry I. __ __ __`
    pub const @"s_rshift32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `007e`
    /// 64-bit signed/arithmetic `Rx` = `Ry` >> `I`; `7e 00 Rx Ry I. __ __ __`
    pub const @"s_rshift64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `007f`
    /// 8-bit integer `Rx` = `Ry` == `Rz`; `7f 00 Rx Ry Rz __ __ __`
    pub const @"i_eq8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0080`
    /// 16-bit integer `Rx` = `Ry` == `Rz`; `80 00 Rx Ry Rz __ __ __`
    pub const @"i_eq16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0081`
    /// 32-bit integer `Rx` = `Ry` == `Rz`; `81 00 Rx Ry Rz __ __ __`
    pub const @"i_eq32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0082`
    /// 64-bit integer `Rx` = `Ry` == `Rz`; `82 00 Rx Ry Rz __ __ __`
    pub const @"i_eq64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0083`
    /// 8-bit integer `Rx` = `Ry` == `I`; `83 00 Rx Ry I. __ __ __`
    pub const @"i_eq8c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0084`
    /// 16-bit integer `Rx` = `Ry` == `I`; `84 00 Rx Ry I. .. __ __`
    pub const @"i_eq16c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0085`
    /// 32-bit integer `Rx` = `Ry` == `I`; `85 00 Rx Ry I. .. .. ..`
    pub const @"i_eq32c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0086`
    /// 64-bit integer `Rx` = `Ry` == `I`; `86 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"i_eq64c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0087`
    /// 32-bit floating point `Rx` = `Ry` == `Rz`; `87 00 Rx Ry Rz __ __ __`
    pub const @"f_eq32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0088`
    /// 64-bit floating point `Rx` = `Ry` == `Rz`; `88 00 Rx Ry Rz __ __ __`
    pub const @"f_eq64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0089`
    /// 32-bit floating point `Rx` = `Ry` == `I`; `89 00 Rx Ry I. .. .. ..`
    pub const @"f_eq32c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `008a`
    /// 64-bit floating point `Rx` = `Ry` == `I`; `8a 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_eq64c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `008b`
    /// 8-bit integer `Rx` = `Ry` != `Rz`; `8b 00 Rx Ry Rz __ __ __`
    pub const @"i_ne8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `008c`
    /// 16-bit integer `Rx` = `Ry` != `Rz`; `8c 00 Rx Ry Rz __ __ __`
    pub const @"i_ne16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `008d`
    /// 32-bit integer `Rx` = `Ry` != `Rz`; `8d 00 Rx Ry Rz __ __ __`
    pub const @"i_ne32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `008e`
    /// 64-bit integer `Rx` = `Ry` != `Rz`; `8e 00 Rx Ry Rz __ __ __`
    pub const @"i_ne64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `008f`
    /// 8-bit integer `Rx` = `Ry` != `I`; `8f 00 Rx Ry I. __ __ __`
    pub const @"i_ne8c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0090`
    /// 16-bit integer `Rx` = `Ry` != `I`; `90 00 Rx Ry I. .. __ __`
    pub const @"i_ne16c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0091`
    /// 32-bit integer `Rx` = `Ry` != `I`; `91 00 Rx Ry I. .. .. ..`
    pub const @"i_ne32c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0092`
    /// 64-bit integer `Rx` = `Ry` != `I`; `92 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"i_ne64c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0093`
    /// 32-bit floating point `Rx` = `Ry` != `Rz`; `93 00 Rx Ry Rz __ __ __`
    pub const @"f_ne32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0094`
    /// 64-bit floating point `Rx` = `Ry` != `Rz`; `94 00 Rx Ry Rz __ __ __`
    pub const @"f_ne64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0095`
    /// 32-bit floating point `Rx` = `Ry` != `I`; `95 00 Rx Ry I. .. .. ..`
    pub const @"f_ne32c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0096`
    /// 64-bit floating point `Rx` = `Ry` != `I`; `96 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_ne64c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0097`
    /// 8-bit unsigned integer `Rx` = `Ry` < `Rz`; `97 00 Rx Ry Rz __ __ __`
    pub const @"u_lt8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0098`
    /// 16-bit unsigned integer `Rx` = `Ry` < `Rz`; `98 00 Rx Ry Rz __ __ __`
    pub const @"u_lt16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0099`
    /// 32-bit unsigned integer `Rx` = `Ry` < `Rz`; `99 00 Rx Ry Rz __ __ __`
    pub const @"u_lt32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `009a`
    /// 64-bit unsigned integer `Rx` = `Ry` < `Rz`; `9a 00 Rx Ry Rz __ __ __`
    pub const @"u_lt64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `009b`
    /// 8-bit unsigned integer `Rx` = `I` < `Ry`; `9b 00 Rx Ry I. __ __ __`
    pub const @"u_lt8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `009c`
    /// 16-bit unsigned integer `Rx` = `I` < `Ry`; `9c 00 Rx Ry I. .. __ __`
    pub const @"u_lt16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `009d`
    /// 32-bit unsigned integer `Rx` = `I` < `Ry`; `9d 00 Rx Ry I. .. .. ..`
    pub const @"u_lt32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `009e`
    /// 64-bit unsigned integer `Rx` = `I` < `Ry`; `9e 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_lt64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `009f`
    /// 8-bit unsigned integer `Rx` = `Ry` < `I`; `9f 00 Rx Ry I. __ __ __`
    pub const @"u_lt8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00a0`
    /// 16-bit unsigned integer `Rx` = `Ry` < `I`; `a0 00 Rx Ry I. .. __ __`
    pub const @"u_lt16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00a1`
    /// 32-bit unsigned integer `Rx` = `Ry` < `I`; `a1 00 Rx Ry I. .. .. ..`
    pub const @"u_lt32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00a2`
    /// 64-bit unsigned integer `Rx` = `Ry` < `I`; `a2 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_lt64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00a3`
    /// 8-bit signed integer `Rx` = `Ry` < `Rz`; `a3 00 Rx Ry Rz __ __ __`
    pub const @"s_lt8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00a4`
    /// 16-bit signed integer `Rx` = `Ry` < `Rz`; `a4 00 Rx Ry Rz __ __ __`
    pub const @"s_lt16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00a5`
    /// 32-bit signed integer `Rx` = `Ry` < `Rz`; `a5 00 Rx Ry Rz __ __ __`
    pub const @"s_lt32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00a6`
    /// 64-bit signed integer `Rx` = `Ry` < `Rz`; `a6 00 Rx Ry Rz __ __ __`
    pub const @"s_lt64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00a7`
    /// 8-bit signed integer `Rx` = `I` < `Ry`; `a7 00 Rx Ry I. __ __ __`
    pub const @"s_lt8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00a8`
    /// 16-bit signed integer `Rx` = `I` < `Ry`; `a8 00 Rx Ry I. .. __ __`
    pub const @"s_lt16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00a9`
    /// 32-bit signed integer `Rx` = `I` < `Ry`; `a9 00 Rx Ry I. .. .. ..`
    pub const @"s_lt32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00aa`
    /// 64-bit signed integer `Rx` = `I` < `Ry`; `aa 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_lt64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00ab`
    /// 8-bit signed integer `Rx` = `Ry` < `I`; `ab 00 Rx Ry I. __ __ __`
    pub const @"s_lt8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00ac`
    /// 16-bit signed integer `Rx` = `Ry` < `I`; `ac 00 Rx Ry I. .. __ __`
    pub const @"s_lt16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00ad`
    /// 32-bit signed integer `Rx` = `Ry` < `I`; `ad 00 Rx Ry I. .. .. ..`
    pub const @"s_lt32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00ae`
    /// 64-bit signed integer `Rx` = `Ry` < `I`; `ae 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_lt64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00af`
    /// 32-bit floating point `Rx` = `Ry` < `Rz`; `af 00 Rx Ry Rz __ __ __`
    pub const @"f_lt32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00b0`
    /// 32-bit floating point `Rx` = `I` < `Ry`; `b0 00 Rx Ry I. .. .. ..`
    pub const @"f_lt32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00b1`
    /// 32-bit floating point `Rx` = `Ry` < `I`; `b1 00 Rx Ry I. .. .. ..`
    pub const @"f_lt32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00b2`
    /// 64-bit floating point `Rx` = `Ry` < `Rz`; `b2 00 Rx Ry Rz __ __ __`
    pub const @"f_lt64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00b3`
    /// 64-bit floating point `Rx` = `I` < `Ry`; `b3 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_lt64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00b4`
    /// 64-bit floating point `Rx` = `Ry` < `I`; `b4 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_lt64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00b5`
    /// 8-bit unsigned integer `Rx` = `Ry` > `Rz`; `b5 00 Rx Ry Rz __ __ __`
    pub const @"u_gt8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00b6`
    /// 16-bit unsigned integer `Rx` = `Ry` > `Rz`; `b6 00 Rx Ry Rz __ __ __`
    pub const @"u_gt16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00b7`
    /// 32-bit unsigned integer `Rx` = `Ry` > `Rz`; `b7 00 Rx Ry Rz __ __ __`
    pub const @"u_gt32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00b8`
    /// 64-bit unsigned integer `Rx` = `Ry` > `Rz`; `b8 00 Rx Ry Rz __ __ __`
    pub const @"u_gt64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00b9`
    /// 8-bit unsigned integer `Rx` = `I` > `Ry`; `b9 00 Rx Ry I. __ __ __`
    pub const @"u_gt8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00ba`
    /// 16-bit unsigned integer `Rx` = `I` > `Ry`; `ba 00 Rx Ry I. .. __ __`
    pub const @"u_gt16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00bb`
    /// 32-bit unsigned integer `Rx` = `I` > `Ry`; `bb 00 Rx Ry I. .. .. ..`
    pub const @"u_gt32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00bc`
    /// 64-bit unsigned integer `Rx` = `I` > `Ry`; `bc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_gt64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00bd`
    /// 8-bit unsigned integer `Rx` = `Ry` > `I`; `bd 00 Rx Ry I. __ __ __`
    pub const @"u_gt8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00be`
    /// 16-bit unsigned integer `Rx` = `Ry` > `I`; `be 00 Rx Ry I. .. __ __`
    pub const @"u_gt16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00bf`
    /// 32-bit unsigned integer `Rx` = `Ry` > `I`; `bf 00 Rx Ry I. .. .. ..`
    pub const @"u_gt32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00c0`
    /// 64-bit unsigned integer `Rx` = `Ry` > `I`; `c0 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_gt64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00c1`
    /// 8-bit signed integer `Rx` = `Ry` > `Rz`; `c1 00 Rx Ry Rz __ __ __`
    pub const @"s_gt8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00c2`
    /// 16-bit signed integer `Rx` = `Ry` > `Rz`; `c2 00 Rx Ry Rz __ __ __`
    pub const @"s_gt16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00c3`
    /// 32-bit signed integer `Rx` = `Ry` > `Rz`; `c3 00 Rx Ry Rz __ __ __`
    pub const @"s_gt32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00c4`
    /// 64-bit signed integer `Rx` = `Ry` > `Rz`; `c4 00 Rx Ry Rz __ __ __`
    pub const @"s_gt64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00c5`
    /// 8-bit signed integer `Rx` = `I` > `Ry`; `c5 00 Rx Ry I. __ __ __`
    pub const @"s_gt8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00c6`
    /// 16-bit signed integer `Rx` = `I` > `Ry`; `c6 00 Rx Ry I. .. __ __`
    pub const @"s_gt16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00c7`
    /// 32-bit signed integer `Rx` = `I` > `Ry`; `c7 00 Rx Ry I. .. .. ..`
    pub const @"s_gt32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00c8`
    /// 64-bit signed integer `Rx` = `I` > `Ry`; `c8 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_gt64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00c9`
    /// 8-bit signed integer `Rx` = `Ry` > `I`; `c9 00 Rx Ry I. __ __ __`
    pub const @"s_gt8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00ca`
    /// 16-bit signed integer `Rx` = `Ry` > `I`; `ca 00 Rx Ry I. .. __ __`
    pub const @"s_gt16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00cb`
    /// 32-bit signed integer `Rx` = `Ry` > `I`; `cb 00 Rx Ry I. .. .. ..`
    pub const @"s_gt32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00cc`
    /// 64-bit signed integer `Rx` = `Ry` > `I`; `cc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_gt64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00cd`
    /// 32-bit floating point `Rx` = `Ry` > `Rz`; `cd 00 Rx Ry Rz __ __ __`
    pub const @"f_gt32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00ce`
    /// 32-bit floating point `Rx` = `I` > `Ry`; `ce 00 Rx Ry I. .. .. ..`
    pub const @"f_gt32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00cf`
    /// 32-bit floating point `Rx` = `Ry` > `I`; `cf 00 Rx Ry I. .. .. ..`
    pub const @"f_gt32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00d0`
    /// 64-bit floating point `Rx` = `Ry` > `Rz`; `d0 00 Rx Ry Rz __ __ __`
    pub const @"f_gt64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00d1`
    /// 64-bit floating point `Rx` = `I` > `Ry`; `d1 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_gt64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00d2`
    /// 64-bit floating point `Rx` = `Ry` > `I`; `d2 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_gt64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00d3`
    /// 8-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d3 00 Rx Ry Rz __ __ __`
    pub const @"u_le8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00d4`
    /// 16-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d4 00 Rx Ry Rz __ __ __`
    pub const @"u_le16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00d5`
    /// 32-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d5 00 Rx Ry Rz __ __ __`
    pub const @"u_le32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00d6`
    /// 64-bit unsigned integer `Rx` = `Ry` <= `Rz`; `d6 00 Rx Ry Rz __ __ __`
    pub const @"u_le64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00d7`
    /// 8-bit unsigned integer `Rx` = `I` <= `Ry`; `d7 00 Rx Ry I. __ __ __`
    pub const @"u_le8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00d8`
    /// 16-bit unsigned integer `Rx` = `I` <= `Ry`; `d8 00 Rx Ry I. .. __ __`
    pub const @"u_le16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00d9`
    /// 32-bit unsigned integer `Rx` = `I` <= `Ry`; `d9 00 Rx Ry I. .. .. ..`
    pub const @"u_le32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00da`
    /// 64-bit unsigned integer `Rx` = `I` <= `Ry`; `da 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_le64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00db`
    /// 8-bit unsigned integer `Rx` = `Ry` <= `I`; `db 00 Rx Ry I. __ __ __`
    pub const @"u_le8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00dc`
    /// 16-bit unsigned integer `Rx` = `Ry` <= `I`; `dc 00 Rx Ry I. .. __ __`
    pub const @"u_le16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00dd`
    /// 32-bit unsigned integer `Rx` = `Ry` <= `I`; `dd 00 Rx Ry I. .. .. ..`
    pub const @"u_le32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00de`
    /// 64-bit unsigned integer `Rx` = `Ry` <= `I`; `de 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_le64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00df`
    /// 8-bit signed integer `Rx` = `Ry` <= `Rz`; `df 00 Rx Ry Rz __ __ __`
    pub const @"s_le8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00e0`
    /// 16-bit signed integer `Rx` = `Ry` <= `Rz`; `e0 00 Rx Ry Rz __ __ __`
    pub const @"s_le16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00e1`
    /// 32-bit signed integer `Rx` = `Ry` <= `Rz`; `e1 00 Rx Ry Rz __ __ __`
    pub const @"s_le32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00e2`
    /// 64-bit signed integer `Rx` = `Ry` <= `Rz`; `e2 00 Rx Ry Rz __ __ __`
    pub const @"s_le64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00e3`
    /// 8-bit signed integer `Rx` = `I` <= `Ry`; `e3 00 Rx Ry I. __ __ __`
    pub const @"s_le8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00e4`
    /// 16-bit signed integer `Rx` = `I` <= `Ry`; `e4 00 Rx Ry I. .. __ __`
    pub const @"s_le16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00e5`
    /// 32-bit signed integer `Rx` = `I` <= `Ry`; `e5 00 Rx Ry I. .. .. ..`
    pub const @"s_le32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00e6`
    /// 64-bit signed integer `Rx` = `I` <= `Ry`; `e6 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_le64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00e7`
    /// 8-bit signed integer `Rx` = `Ry` <= `I`; `e7 00 Rx Ry I. __ __ __`
    pub const @"s_le8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00e8`
    /// 16-bit signed integer `Rx` = `Ry` <= `I`; `e8 00 Rx Ry I. .. __ __`
    pub const @"s_le16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00e9`
    /// 32-bit signed integer `Rx` = `Ry` <= `I`; `e9 00 Rx Ry I. .. .. ..`
    pub const @"s_le32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00ea`
    /// 64-bit signed integer `Rx` = `Ry` <= `I`; `ea 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_le64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00eb`
    /// 32-bit floating point `Rx` = `Ry` <= `Rz`; `eb 00 Rx Ry Rz __ __ __`
    pub const @"f_le32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00ec`
    /// 32-bit floating point `Rx` = `I` <= `Ry`; `ec 00 Rx Ry I. .. .. ..`
    pub const @"f_le32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00ed`
    /// 32-bit floating point `Rx` = `Ry` <= `I`; `ed 00 Rx Ry I. .. .. ..`
    pub const @"f_le32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00ee`
    /// 64-bit floating point `Rx` = `Ry` <= `Rz`; `ee 00 Rx Ry Rz __ __ __`
    pub const @"f_le64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00ef`
    /// 64-bit floating point `Rx` = `I` <= `Ry`; `ef 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_le64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00f0`
    /// 64-bit floating point `Rx` = `Ry` <= `I`; `f0 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_le64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00f1`
    /// 8-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f1 00 Rx Ry Rz __ __ __`
    pub const @"u_ge8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00f2`
    /// 16-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f2 00 Rx Ry Rz __ __ __`
    pub const @"u_ge16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00f3`
    /// 32-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f3 00 Rx Ry Rz __ __ __`
    pub const @"u_ge32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00f4`
    /// 64-bit unsigned integer `Rx` = `Ry` >= `Rz`; `f4 00 Rx Ry Rz __ __ __`
    pub const @"u_ge64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00f5`
    /// 8-bit unsigned integer `Rx` = `I` >= `Ry`; `f5 00 Rx Ry I. __ __ __`
    pub const @"u_ge8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00f6`
    /// 16-bit unsigned integer `Rx` = `I` >= `Ry`; `f6 00 Rx Ry I. .. __ __`
    pub const @"u_ge16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00f7`
    /// 32-bit unsigned integer `Rx` = `I` >= `Ry`; `f7 00 Rx Ry I. .. .. ..`
    pub const @"u_ge32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00f8`
    /// 64-bit unsigned integer `Rx` = `I` >= `Ry`; `f8 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_ge64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00f9`
    /// 8-bit unsigned integer `Rx` = `Ry` >= `I`; `f9 00 Rx Ry I. __ __ __`
    pub const @"u_ge8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `00fa`
    /// 16-bit unsigned integer `Rx` = `Ry` >= `I`; `fa 00 Rx Ry I. .. __ __`
    pub const @"u_ge16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `00fb`
    /// 32-bit unsigned integer `Rx` = `Ry` >= `I`; `fb 00 Rx Ry I. .. .. ..`
    pub const @"u_ge32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `00fc`
    /// 64-bit unsigned integer `Rx` = `Ry` >= `I`; `fc 00 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_ge64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `00fd`
    /// 8-bit signed integer `Rx` = `Ry` >= `Rz`; `fd 00 Rx Ry Rz __ __ __`
    pub const @"s_ge8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00fe`
    /// 16-bit signed integer `Rx` = `Ry` >= `Rz`; `fe 00 Rx Ry Rz __ __ __`
    pub const @"s_ge16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `00ff`
    /// 32-bit signed integer `Rx` = `Ry` >= `Rz`; `ff 00 Rx Ry Rz __ __ __`
    pub const @"s_ge32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0100`
    /// 64-bit signed integer `Rx` = `Ry` >= `Rz`; `00 01 Rx Ry Rz __ __ __`
    pub const @"s_ge64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0101`
    /// 8-bit signed integer `Rx` = `I` >= `Ry`; `01 01 Rx Ry I. __ __ __`
    pub const @"s_ge8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0102`
    /// 16-bit signed integer `Rx` = `I` >= `Ry`; `02 01 Rx Ry I. .. __ __`
    pub const @"s_ge16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0103`
    /// 32-bit signed integer `Rx` = `I` >= `Ry`; `03 01 Rx Ry I. .. .. ..`
    pub const @"s_ge32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0104`
    /// 64-bit signed integer `Rx` = `I` >= `Ry`; `04 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_ge64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0105`
    /// 8-bit signed integer `Rx` = `Ry` >= `I`; `05 01 Rx Ry I. __ __ __`
    pub const @"s_ge8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0106`
    /// 16-bit signed integer `Rx` = `Ry` >= `I`; `06 01 Rx Ry I. .. __ __`
    pub const @"s_ge16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0107`
    /// 32-bit signed integer `Rx` = `Ry` >= `I`; `07 01 Rx Ry I. .. .. ..`
    pub const @"s_ge32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0108`
    /// 64-bit signed integer `Rx` = `Ry` >= `I`; `08 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_ge64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0109`
    /// 32-bit floating point `Rx` = `Ry` >= `Rz`; `09 01 Rx Ry Rz __ __ __`
    pub const @"f_ge32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `010a`
    /// 32-bit floating point `Rx` = `I` >= `Ry`; `0a 01 Rx Ry I. .. .. ..`
    pub const @"f_ge32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `010b`
    /// 32-bit floating point `Rx` = `Ry` >= `I`; `0b 01 Rx Ry I. .. .. ..`
    pub const @"f_ge32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `010c`
    /// 64-bit floating point `Rx` = `Ry` >= `Rz`; `0c 01 Rx Ry Rz __ __ __`
    pub const @"f_ge64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `010d`
    /// 64-bit floating point `Rx` = `I` >= `Ry`; `0d 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_ge64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `010e`
    /// 64-bit floating point `Rx` = `Ry` >= `I`; `0e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_ge64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `010f`
    /// 8-bit `Rx` = -`Ry`; `0f 01 Rx Ry __ __ __ __`
    pub const @"s_neg8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0110`
    /// 16-bit `Rx` = -`Ry`; `10 01 Rx Ry __ __ __ __`
    pub const @"s_neg16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0111`
    /// 32-bit `Rx` = -`Ry`; `11 01 Rx Ry __ __ __ __`
    pub const @"s_neg32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0112`
    /// 64-bit `Rx` = -`Ry`; `12 01 Rx Ry __ __ __ __`
    pub const @"s_neg64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0113`
    /// 8-bit `Rx` = \|`Ry`\|; `13 01 Rx Ry __ __ __ __`
    pub const @"s_abs8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0114`
    /// 16-bit `Rx` = \|`Ry`\|; `14 01 Rx Ry __ __ __ __`
    pub const @"s_abs16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0115`
    /// 32-bit `Rx` = \|`Ry`\|; `15 01 Rx Ry __ __ __ __`
    pub const @"s_abs32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0116`
    /// 64-bit `Rx` = \|`Ry`\|; `16 01 Rx Ry __ __ __ __`
    pub const @"s_abs64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0117`
    /// 8-bit `Rx` = `Ry` + `Rz`; `17 01 Rx Ry Rz __ __ __`
    pub const @"i_add8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0118`
    /// 16-bit `Rx` = `Ry` + `Rz`; `18 01 Rx Ry Rz __ __ __`
    pub const @"i_add16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0119`
    /// 32-bit `Rx` = `Ry` + `Rz`; `19 01 Rx Ry Rz __ __ __`
    pub const @"i_add32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `011a`
    /// 64-bit `Rx` = `Ry` + `Rz`; `1a 01 Rx Ry Rz __ __ __`
    pub const @"i_add64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `011b`
    /// 8-bit `Rx` = `Ry` + `I`; `1b 01 Rx Ry I. __ __ __`
    pub const @"i_add8c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `011c`
    /// 16-bit `Rx` = `Ry` + `I`; `1c 01 Rx Ry I. .. __ __`
    pub const @"i_add16c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `011d`
    /// 32-bit `Rx` = `Ry` + `I`; `1d 01 Rx Ry I. .. .. ..`
    pub const @"i_add32c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `011e`
    /// 64-bit `Rx` = `Ry` + `I`; `1e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"i_add64c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `011f`
    /// 8-bit `Rx` = `Ry` - `Rz`; `1f 01 Rx Ry Rz __ __ __`
    pub const @"i_sub8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0120`
    /// 16-bit `Rx` = `Ry` - `Rz`; `20 01 Rx Ry Rz __ __ __`
    pub const @"i_sub16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0121`
    /// 32-bit `Rx` = `Ry` - `Rz`; `21 01 Rx Ry Rz __ __ __`
    pub const @"i_sub32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0122`
    /// 64-bit `Rx` = `Ry` - `Rz`; `22 01 Rx Ry Rz __ __ __`
    pub const @"i_sub64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0123`
    /// 8-bit `Rx` = `I` - `Ry`; `23 01 Rx Ry I. __ __ __`
    pub const @"i_sub8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0124`
    /// 16-bit `Rx` = `I` - `Ry`; `24 01 Rx Ry I. .. __ __`
    pub const @"i_sub16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0125`
    /// 32-bit `Rx` = `I` - `Ry`; `25 01 Rx Ry I. .. .. ..`
    pub const @"i_sub32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0126`
    /// 64-bit `Rx` = `I` - `Ry`; `26 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"i_sub64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0127`
    /// 8-bit `Rx` = `Ry` - `I`; `27 01 Rx Ry I. __ __ __`
    pub const @"i_sub8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0128`
    /// 16-bit `Rx` = `Ry` - `I`; `28 01 Rx Ry I. .. __ __`
    pub const @"i_sub16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0129`
    /// 32-bit `Rx` = `Ry` - `I`; `29 01 Rx Ry I. .. .. ..`
    pub const @"i_sub32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `012a`
    /// 64-bit `Rx` = `Ry` - `I`; `2a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"i_sub64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `012b`
    /// 8-bit `Rx` = `Ry` * `Rz`; `2b 01 Rx Ry Rz __ __ __`
    pub const @"i_mul8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `012c`
    /// 16-bit `Rx` = `Ry` * `Rz`; `2c 01 Rx Ry Rz __ __ __`
    pub const @"i_mul16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `012d`
    /// 32-bit `Rx` = `Ry` * `Rz`; `2d 01 Rx Ry Rz __ __ __`
    pub const @"i_mul32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `012e`
    /// 64-bit `Rx` = `Ry` * `Rz`; `2e 01 Rx Ry Rz __ __ __`
    pub const @"i_mul64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `012f`
    /// 8-bit `Rx` = `Ry` * `I`; `2f 01 Rx Ry I. __ __ __`
    pub const @"i_mul8c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0130`
    /// 16-bit `Rx` = `Ry` * `I`; `30 01 Rx Ry I. .. __ __`
    pub const @"i_mul16c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0131`
    /// 32-bit `Rx` = `Ry` * `I`; `31 01 Rx Ry I. .. .. ..`
    pub const @"i_mul32c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0132`
    /// 64-bit `Rx` = `Ry` * `I`; `32 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"i_mul64c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0133`
    /// 8-bit unsigned `Rx` = `Ry` / `Rz`; `33 01 Rx Ry Rz __ __ __`
    pub const @"u_div8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0134`
    /// 16-bit unsigned `Rx` = `Ry` / `Rz`; `34 01 Rx Ry Rz __ __ __`
    pub const @"u_div16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0135`
    /// 32-bit unsigned `Rx` = `Ry` / `Rz`; `35 01 Rx Ry Rz __ __ __`
    pub const @"u_div32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0136`
    /// 64-bit unsigned `Rx` = `Ry` / `Rz`; `36 01 Rx Ry Rz __ __ __`
    pub const @"u_div64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0137`
    /// 8-bit unsigned `Rx` = `I` / `Ry`; `37 01 Rx Ry I. __ __ __`
    pub const @"u_div8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0138`
    /// 16-bit unsigned `Rx` = `I` / `Ry`; `38 01 Rx Ry I. .. __ __`
    pub const @"u_div16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0139`
    /// 32-bit unsigned `Rx` = `I` / `Ry`; `39 01 Rx Ry I. .. .. ..`
    pub const @"u_div32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `013a`
    /// 64-bit unsigned `Rx` = `I` / `Ry`; `3a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_div64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `013b`
    /// 8-bit unsigned `Rx` = `Ry` / `I`; `3b 01 Rx Ry I. __ __ __`
    pub const @"u_div8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `013c`
    /// 16-bit unsigned `Rx` = `Ry` / `I`; `3c 01 Rx Ry I. .. __ __`
    pub const @"u_div16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `013d`
    /// 32-bit unsigned `Rx` = `Ry` / `I`; `3d 01 Rx Ry I. .. .. ..`
    pub const @"u_div32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `013e`
    /// 64-bit unsigned `Rx` = `Ry` / `I`; `3e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_div64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `013f`
    /// 8-bit signed `Rx` = `Ry` / `Rz`; `3f 01 Rx Ry Rz __ __ __`
    pub const @"s_div8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0140`
    /// 16-bit signed `Rx` = `Ry` / `Rz`; `40 01 Rx Ry Rz __ __ __`
    pub const @"s_div16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0141`
    /// 32-bit signed `Rx` = `Ry` / `Rz`; `41 01 Rx Ry Rz __ __ __`
    pub const @"s_div32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0142`
    /// 64-bit signed `Rx` = `Ry` / `Rz`; `42 01 Rx Ry Rz __ __ __`
    pub const @"s_div64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0143`
    /// 8-bit signed `Rx` = `I` / `Ry`; `43 01 Rx Ry I. __ __ __`
    pub const @"s_div8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0144`
    /// 16-bit signed `Rx` = `I` / `Ry`; `44 01 Rx Ry I. .. __ __`
    pub const @"s_div16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0145`
    /// 32-bit signed `Rx` = `I` / `Ry`; `45 01 Rx Ry I. .. .. ..`
    pub const @"s_div32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0146`
    /// 64-bit signed `Rx` = `I` / `Ry`; `46 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_div64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0147`
    /// 8-bit signed `Rx` = `Ry` / `I`; `47 01 Rx Ry I. __ __ __`
    pub const @"s_div8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0148`
    /// 16-bit signed `Rx` = `Ry` / `I`; `48 01 Rx Ry I. .. __ __`
    pub const @"s_div16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0149`
    /// 32-bit signed `Rx` = `Ry` / `I`; `49 01 Rx Ry I. .. .. ..`
    pub const @"s_div32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `014a`
    /// 64-bit signed `Rx` = `Ry` / `I`; `4a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_div64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `014b`
    /// 8-bit unsigned `Rx` = `Ry` % `Rz`; `4b 01 Rx Ry Rz __ __ __`
    pub const @"u_rem8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `014c`
    /// 16-bit unsigned `Rx` = `Ry` % `Rz`; `4c 01 Rx Ry Rz __ __ __`
    pub const @"u_rem16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `014d`
    /// 32-bit unsigned `Rx` = `Ry` % `Rz`; `4d 01 Rx Ry Rz __ __ __`
    pub const @"u_rem32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `014e`
    /// 64-bit unsigned `Rx` = `Ry` % `Rz`; `4e 01 Rx Ry Rz __ __ __`
    pub const @"u_rem64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `014f`
    /// 8-bit unsigned `Rx` = `I` % `Ry`; `4f 01 Rx Ry I. __ __ __`
    pub const @"u_rem8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0150`
    /// 16-bit unsigned `Rx` = `I` % `Ry`; `50 01 Rx Ry I. .. __ __`
    pub const @"u_rem16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0151`
    /// 32-bit unsigned `Rx` = `I` % `Ry`; `51 01 Rx Ry I. .. .. ..`
    pub const @"u_rem32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0152`
    /// 64-bit unsigned `Rx` = `I` % `Ry`; `52 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_rem64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0153`
    /// 8-bit unsigned `Rx` = `Ry` % `I`; `53 01 Rx Ry I. __ __ __`
    pub const @"u_rem8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0154`
    /// 16-bit unsigned `Rx` = `Ry` % `I`; `54 01 Rx Ry I. .. __ __`
    pub const @"u_rem16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0155`
    /// 32-bit unsigned `Rx` = `Ry` % `I`; `55 01 Rx Ry I. .. .. ..`
    pub const @"u_rem32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0156`
    /// 64-bit unsigned `Rx` = `Ry` % `I`; `56 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"u_rem64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0157`
    /// 8-bit signed `Rx` = `Ry` % `Rz`; `57 01 Rx Ry Rz __ __ __`
    pub const @"s_rem8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0158`
    /// 16-bit signed `Rx` = `Ry` % `Rz`; `58 01 Rx Ry Rz __ __ __`
    pub const @"s_rem16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0159`
    /// 32-bit signed `Rx` = `Ry` % `Rz`; `59 01 Rx Ry Rz __ __ __`
    pub const @"s_rem32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `015a`
    /// 64-bit signed `Rx` = `Ry` % `Rz`; `5a 01 Rx Ry Rz __ __ __`
    pub const @"s_rem64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `015b`
    /// 8-bit signed `Rx` = `I` % `Ry`; `5b 01 Rx Ry I. __ __ __`
    pub const @"s_rem8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `015c`
    /// 16-bit signed `Rx` = `I` % `Ry`; `5c 01 Rx Ry I. .. __ __`
    pub const @"s_rem16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `015d`
    /// 32-bit signed `Rx` = `I` % `Ry`; `5d 01 Rx Ry I. .. .. ..`
    pub const @"s_rem32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `015e`
    /// 64-bit signed `Rx` = `I` % `Ry`; `5e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_rem64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `015f`
    /// 8-bit signed `Rx` = `Ry` % `I`; `5f 01 Rx Ry I. __ __ __`
    pub const @"s_rem8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0160`
    /// 16-bit signed `Rx` = `Ry` % `I`; `60 01 Rx Ry I. .. __ __`
    pub const @"s_rem16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0161`
    /// 32-bit signed `Rx` = `Ry` % `I`; `61 01 Rx Ry I. .. .. ..`
    pub const @"s_rem32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0162`
    /// 64-bit signed `Rx` = `Ry` % `I`; `62 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"s_rem64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0163`
    /// 8-bit `Rx` = `Ry` ** `Rz`; `63 01 Rx Ry Rz __ __ __`
    pub const @"i_pow8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0164`
    /// 16-bit `Rx` = `Ry` ** `Rz`; `64 01 Rx Ry Rz __ __ __`
    pub const @"i_pow16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0165`
    /// 32-bit `Rx` = `Ry` ** `Rz`; `65 01 Rx Ry Rz __ __ __`
    pub const @"i_pow32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0166`
    /// 64-bit `Rx` = `Ry` ** `Rz`; `66 01 Rx Ry Rz __ __ __`
    pub const @"i_pow64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0167`
    /// 8-bit `Rx` = `I` ** `Ry`; `67 01 Rx Ry I. __ __ __`
    pub const @"i_pow8a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `0168`
    /// 16-bit `Rx` = `I` ** `Ry`; `68 01 Rx Ry I. .. __ __`
    pub const @"i_pow16a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `0169`
    /// 32-bit `Rx` = `I` ** `Ry`; `69 01 Rx Ry I. .. .. ..`
    pub const @"i_pow32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `016a`
    /// 64-bit `Rx` = `I` ** `Ry`; `6a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"i_pow64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `016b`
    /// 8-bit `Rx` = `Ry` ** `I`; `6b 01 Rx Ry I. __ __ __`
    pub const @"i_pow8b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u8 = 0, };

    /// `016c`
    /// 16-bit `Rx` = `Ry` ** `I`; `6c 01 Rx Ry I. .. __ __`
    pub const @"i_pow16b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u16 = 0, };

    /// `016d`
    /// 32-bit `Rx` = `Ry` ** `I`; `6d 01 Rx Ry I. .. .. ..`
    pub const @"i_pow32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `016e`
    /// 64-bit `Rx` = `Ry` ** `I`; `6e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"i_pow64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `016f`
    /// 32-bit `Rx` = -`Ry`; `6f 01 Rx Ry __ __ __ __`
    pub const @"f_neg32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0170`
    /// 64-bit `Rx` = -`Ry`; `70 01 Rx Ry __ __ __ __`
    pub const @"f_neg64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0171`
    /// 32-bit `Rx` = \|`Ry`\|; `71 01 Rx Ry __ __ __ __`
    pub const @"f_abs32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0172`
    /// 64-bit `Rx` = \|`Ry`\|; `72 01 Rx Ry __ __ __ __`
    pub const @"f_abs64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0173`
    /// 32-bit `Rx` = sqrt(`Ry`); `73 01 Rx Ry __ __ __ __`
    pub const @"f_sqrt32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0174`
    /// 64-bit `Rx` = sqrt(`Ry`); `74 01 Rx Ry __ __ __ __`
    pub const @"f_sqrt64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0175`
    /// 32-bit `Rx` = floor(`Ry`); `75 01 Rx Ry __ __ __ __`
    pub const @"f_floor32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0176`
    /// 64-bit `Rx` = floor(`Ry`); `76 01 Rx Ry __ __ __ __`
    pub const @"f_floor64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0177`
    /// 32-bit `Rx` = ceil(`Ry`); `77 01 Rx Ry __ __ __ __`
    pub const @"f_ceil32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0178`
    /// 64-bit `Rx` = ceil(`Ry`); `78 01 Rx Ry __ __ __ __`
    pub const @"f_ceil64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0179`
    /// 32-bit `Rx` = round(`Ry`); `79 01 Rx Ry __ __ __ __`
    pub const @"f_round32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `017a`
    /// 64-bit `Rx` = round(`Ry`); `7a 01 Rx Ry __ __ __ __`
    pub const @"f_round64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `017b`
    /// 32-bit `Rx` = truncate(`Ry`); `7b 01 Rx Ry __ __ __ __`
    pub const @"f_trunc32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `017c`
    /// 64-bit `Rx` = truncate(`Ry`); `7c 01 Rx Ry __ __ __ __`
    pub const @"f_trunc64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `017d`
    /// 32-bit `Rx` = whole(`Ry`); `7d 01 Rx Ry __ __ __ __`
    pub const @"f_whole32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `017e`
    /// 64-bit `Rx` = whole(`Ry`); `7e 01 Rx Ry __ __ __ __`
    pub const @"f_whole64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `017f`
    /// 32-bit `Rx` = frac(`Ry`); `7f 01 Rx Ry __ __ __ __`
    pub const @"f_frac32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0180`
    /// 64-bit `Rx` = frac(`Ry`); `80 01 Rx Ry __ __ __ __`
    pub const @"f_frac64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0181`
    /// 32-bit `Rx` = `Ry` + `Rz`; `81 01 Rx Ry Rz __ __ __`
    pub const @"f_add32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0182`
    /// 32-bit `Rx` = `Ry` + `I`; `82 01 Rx Ry I. .. .. ..`
    pub const @"f_add32c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0183`
    /// 64-bit `Rx` = `Ry` + `Rz`; `83 01 Rx Ry Rz __ __ __`
    pub const @"f_add64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0184`
    /// 64-bit `Rx` = `Ry` + `I`; `84 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_add64c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0185`
    /// 32-bit `Rx` = `Ry` - `Rz`; `85 01 Rx Ry Rz __ __ __`
    pub const @"f_sub32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0186`
    /// 32-bit `Rx` = `I` - `Ry`; `86 01 Rx Ry I. .. .. ..`
    pub const @"f_sub32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0187`
    /// 32-bit `Rx` = `Ry` - `I`; `87 01 Rx Ry I. .. .. ..`
    pub const @"f_sub32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0188`
    /// 64-bit `Rx` = `Ry` - `Rz`; `88 01 Rx Ry Rz __ __ __`
    pub const @"f_sub64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0189`
    /// 64-bit `Rx` = `I` - `Ry`; `89 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_sub64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `018a`
    /// 64-bit `Rx` = `Ry` - `I`; `8a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_sub64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `018b`
    /// 32-bit `Rx` = `Ry` * `Rz`; `8b 01 Rx Ry Rz __ __ __`
    pub const @"f_mul32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `018c`
    /// 32-bit `Rx` = `Ry` * `I`; `8c 01 Rx Ry I. .. .. ..`
    pub const @"f_mul32c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `018d`
    /// 64-bit `Rx` = `Ry` * `Rz`; `8d 01 Rx Ry Rz __ __ __`
    pub const @"f_mul64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `018e`
    /// 64-bit `Rx` = `Ry` * `I`; `8e 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_mul64c" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `018f`
    /// 32-bit `Rx` = `Ry` / `Rz`; `8f 01 Rx Ry Rz __ __ __`
    pub const @"f_div32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0190`
    /// 32-bit `Rx` = `I` / `Ry`; `90 01 Rx Ry I. .. .. ..`
    pub const @"f_div32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0191`
    /// 32-bit `Rx` = `Ry` / `I`; `91 01 Rx Ry I. .. .. ..`
    pub const @"f_div32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0192`
    /// 64-bit `Rx` = `Ry` / `Rz`; `92 01 Rx Ry Rz __ __ __`
    pub const @"f_div64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0193`
    /// 64-bit `Rx` = `I` / `Ry`; `93 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_div64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0194`
    /// 64-bit `Rx` = `Ry` / `I`; `94 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_div64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `0195`
    /// 32-bit `Rx` = `Ry` % `Rz`; `95 01 Rx Ry Rz __ __ __`
    pub const @"f_rem32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0196`
    /// 32-bit `Rx` = `I` % `Ry`; `96 01 Rx Ry I. .. .. ..`
    pub const @"f_rem32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0197`
    /// 32-bit `Rx` = `Ry` % `I`; `97 01 Rx Ry I. .. .. ..`
    pub const @"f_rem32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `0198`
    /// 64-bit `Rx` = `Ry` % `Rz`; `98 01 Rx Ry Rz __ __ __`
    pub const @"f_rem64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `0199`
    /// 64-bit `Rx` = `I` % `Ry`; `99 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_rem64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `019a`
    /// 64-bit `Rx` = `Ry` % `I`; `9a 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_rem64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `019b`
    /// 32-bit `Rx` = `Ry` ** `Rz`; `9b 01 Rx Ry Rz __ __ __`
    pub const @"f_pow32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `019c`
    /// 32-bit `Rx` = `I` ** `Ry`; `9c 01 Rx Ry I. .. .. ..`
    pub const @"f_pow32a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `019d`
    /// 32-bit `Rx` = `Ry` ** `I`; `9d 01 Rx Ry I. .. .. ..`
    pub const @"f_pow32b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, I: u32 = 0, };

    /// `019e`
    /// 64-bit `Rx` = `Ry` ** `Rz`; `9e 01 Rx Ry Rz __ __ __`
    pub const @"f_pow64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, Rz: core.Register = .null, };

    /// `019f`
    /// 64-bit `Rx` = `I` ** `Ry`; `9f 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_pow64a" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01a0`
    /// 64-bit `Rx` = `Ry` ** `I`; `a0 01 Rx Ry __ __ __ __ + I. .. .. .. .. .. .. ..`
    pub const @"f_pow64b" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01a1`
    /// Sign extend 8-bits of `Ry` to 16-bits, placing the result in `Rx`; `a1 01 Rx Ry __ __ __ __`
    pub const @"s_ext8_16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01a2`
    /// Sign extend 8-bits of `Ry` to 32-bits, placing the result in `Rx`; `a2 01 Rx Ry __ __ __ __`
    pub const @"s_ext8_32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01a3`
    /// Sign extend 8-bits of `Ry` to 64-bits, placing the result in `Rx`; `a3 01 Rx Ry __ __ __ __`
    pub const @"s_ext8_64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01a4`
    /// Sign extend 16-bits of `Ry` to 32-bits, placing the result in `Rx`; `a4 01 Rx Ry __ __ __ __`
    pub const @"s_ext16_32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01a5`
    /// Sign extend 16-bits of `Ry` to 64-bits, placing the result in `Rx`; `a5 01 Rx Ry __ __ __ __`
    pub const @"s_ext16_64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01a6`
    /// Sign extend 32-bits of `Ry` to 64-bits, placing the result in `Rx`; `a6 01 Rx Ry __ __ __ __`
    pub const @"s_ext32_64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01a7`
    /// Convert of 32-bit float in `Ry` to 8-bit integer; discards sign, places the result in `Rx`; `a7 01 Rx Ry __ __ __ __`
    pub const @"f32_to_u8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01a8`
    /// Convert of 32-bit float in `Ry` to 16-bit integer; discards sign, places the result in `Rx`; `a8 01 Rx Ry __ __ __ __`
    pub const @"f32_to_u16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01a9`
    /// Convert of 32-bit float in `Ry` to 32-bit integer; discards sign, places the result in `Rx`; `a9 01 Rx Ry __ __ __ __`
    pub const @"f32_to_u32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01aa`
    /// Convert of 32-bit float in `Ry` to 64-bit integer; discards sign, places the result in `Rx`; `aa 01 Rx Ry __ __ __ __`
    pub const @"f32_to_u64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01ab`
    /// Convert of 32-bit float in `Ry` to 8-bit integer; keeps sign, places the result in `Rx`; `ab 01 Rx Ry __ __ __ __`
    pub const @"f32_to_s8" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01ac`
    /// Convert of 32-bit float in `Ry` to 16-bit integer; keeps sign, places the result in `Rx`; `ac 01 Rx Ry __ __ __ __`
    pub const @"f32_to_s16" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01ad`
    /// Convert of 32-bit float in `Ry` to 32-bit integer; keeps sign, places the result in `Rx`; `ad 01 Rx Ry __ __ __ __`
    pub const @"f32_to_s32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01ae`
    /// Convert of 32-bit float in `Ry` to 64-bit integer; keeps sign, places the result in `Rx`; `ae 01 Rx Ry __ __ __ __`
    pub const @"f32_to_s64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01af`
    /// Convert 8-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `af 01 Rx Ry __ __ __ __`
    pub const @"u8_to_f32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01b0`
    /// Convert 16-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b0 01 Rx Ry __ __ __ __`
    pub const @"u16_to_f32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01b1`
    /// Convert 32-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b1 01 Rx Ry __ __ __ __`
    pub const @"u32_to_f32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01b2`
    /// Convert 64-bits in `Ry` to 32-bit float; discards sign, places result in `Rx`; `b2 01 Rx Ry __ __ __ __`
    pub const @"u64_to_f32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01b3`
    /// Convert 8-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b3 01 Rx Ry __ __ __ __`
    pub const @"s8_to_f32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01b4`
    /// Convert 16-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b4 01 Rx Ry __ __ __ __`
    pub const @"s16_to_f32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01b5`
    /// Convert 32-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b5 01 Rx Ry __ __ __ __`
    pub const @"s32_to_f32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01b6`
    /// Convert 64-bits in `Ry` to 32-bit float; keeps sign, places result in `Rx`; `b6 01 Rx Ry __ __ __ __`
    pub const @"s64_to_f32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01b7`
    /// Convert 8-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b7 01 Rx Ry __ __ __ __`
    pub const @"u8_to_f64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01b8`
    /// Convert 16-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b8 01 Rx Ry __ __ __ __`
    pub const @"u16_to_f64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01b9`
    /// Convert 32-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `b9 01 Rx Ry __ __ __ __`
    pub const @"u32_to_f64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01ba`
    /// Convert 64-bits in `Ry` to 64-bit float; discards sign, places result in `Rx`; `ba 01 Rx Ry __ __ __ __`
    pub const @"u64_to_f64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01bb`
    /// Convert 8-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bb 01 Rx Ry __ __ __ __`
    pub const @"s8_to_f64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01bc`
    /// Convert 16-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bc 01 Rx Ry __ __ __ __`
    pub const @"s16_to_f64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01bd`
    /// Convert 32-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `bd 01 Rx Ry __ __ __ __`
    pub const @"s32_to_f64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01be`
    /// Convert 64-bits in `Ry` to 64-bit float; keeps sign, places result in `Rx`; `be 01 Rx Ry __ __ __ __`
    pub const @"s64_to_f64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01bf`
    /// Convert 32-bit float in `Ry` to 64-bit float; places the result in `Rx`; `bf 01 Rx Ry __ __ __ __`
    pub const @"f32_to_f64" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

    /// `01c0`
    /// Convert 64-bit float in `Ry` to 32-bit float; places the result in `Rx`; `c0 01 Rx Ry __ __ __ __`
    pub const @"f64_to_f32" = packed struct { Rx: core.Register = .null, Ry: core.Register = .null, };

};


comptime {
    for (std.meta.declarations(operand_sets)) |typeDecl| {
        const bits = @bitSizeOf(@field(operand_sets, typeDecl.name));
        if (bits > 48) {
            @compileLog(std.fmt.comptimePrint("Operand set type " ++ @typeName(@field(operand_sets, typeDecl.name)) ++ " is too large to fit in an instruction word; it is {} bits", .{  bits }));
        }
    }
}
